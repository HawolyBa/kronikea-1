{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_STORY, GET_CHAPTERS, ADD_STORY } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nimport firebase from \"firebase\";\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    dispatch({\n      type: GET_STORY,\n      payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      })\n    });\n  });\n};\nexport const addStory = data => dispatch => {\n  db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n    banner: data.image,\n    authorName: data.username,\n    secondaryCharacters: [],\n    authorId: auth.currentUser.uid,\n    featured: false,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    note: 0\n  })).then(res => {\n    dispatch({\n      type: ADD_STORY,\n      payload: {\n        message: \"Story added successfully\",\n        storyId: res\n      }\n    });\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: GET_CHAPTERS,\n      payload: arr\n    });\n  });\n};\nexport const getStoryCharacters = id => dispatch => {};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_STORY","GET_CHAPTERS","ADD_STORY","db","auth","firebase","getStory","id","dispatch","collection","doc","get","then","type","payload","data","addStory","add","banner","image","authorName","username","secondaryCharacters","authorId","currentUser","uid","featured","createdAt","firestore","FieldValue","serverTimestamp","note","res","message","storyId","getChapters","where","orderBy","onSnapshot","docs","arr","forEach","push","number","title","commentsCount","getStoryCharacters","getUserStories","items","getFavoriteStories","favArr","users","result","map","user","Promise","all","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n} from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\nimport firebase from \"firebase\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      dispatch({\r\n        type: GET_STORY,\r\n        payload: { ...doc.data(), id: doc.id },\r\n      });\r\n    });\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      banner: data.image,\r\n      authorName: data.username,\r\n      secondaryCharacters: [],\r\n      authorId: auth.currentUser.uid,\r\n      featured: false,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      note: 0,\r\n    })\r\n    .then((res) => {\r\n      dispatch({\r\n        type: ADD_STORY,\r\n        payload: { message: \"Story added successfully\", storyId: res },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}