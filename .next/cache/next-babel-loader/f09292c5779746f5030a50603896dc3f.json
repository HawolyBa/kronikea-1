{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Grid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Empty } from \"antd\";\nimport Link from \"next/link\";\nimport Masonry from \"react-responsive-masonry\";\nimport Card from \"../common/Card\";\nimport UserCard from \"../common/UserCard\";\nimport CharacterCard from \"../common/CharacterCard\";\nimport LocationCard from \"../common/LocationCard\";\n\nconst StoriesGrid = ({\n  stories,\n  type,\n  gutter,\n  lg,\n  md,\n  sm,\n  xs,\n  xl\n}) => {\n  return __jsx(Masonry, {\n    columnsCount: 3,\n    gutter: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, stories.length > 0 ? stories.map(story => __jsx(Link, {\n    href: `/story/${story.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(Card, {\n    story: story,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 15\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No stories yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  })) // <Row gutter={gutter}>\n  //   {stories.length > 0 ? (\n  //     stories.map((story) => (\n  //       <Col key={story.id} xl={xl} md={md} xs={xs} sm={sm} lg={lg} xl={xl}>\n  //         <Link href={`/story/${story.id}`}>\n  //           <a>\n  //             <Card story={story} type={type} />\n  //           </a>\n  //         </Link>\n  //       </Col>\n  //     ))\n  //   ) : (\n  //     <Empty\n  //       image={Empty.PRESENTED_IMAGE_SIMPLE}\n  //       description=\"No stories yet\"\n  //     />\n  //   )}\n  // </Row>\n  ;\n};\n\nconst UserGrid = () => {\n  return __jsx(Row, {\n    gutter: [20, 30],\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), __jsx(Col, {\n    lg: 4,\n    md: 6,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst LocationGrid = ({\n  locations,\n  gutter,\n  xl,\n  xxl,\n  lg,\n  md,\n  sm,\n  xs,\n  type\n}) => {\n  return locations.length > 0 ? __jsx(Row, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, locations.map(loc => __jsx(Col, {\n    xl: xl,\n    xxl: xxl,\n    xs: xs,\n    sm: sm,\n    md: md,\n    lg: lg,\n    key: loc.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(LocationCard, {\n    type: type,\n    location: loc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No locations yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  });\n};\n\nconst CharacterGrid = ({\n  gutter,\n  xxl,\n  xl,\n  lg,\n  md,\n  sm,\n  xs,\n  characters,\n  type\n}) => {\n  return characters.length > 0 ? __jsx(Row, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, characters === null || characters === void 0 ? void 0 : characters.map(c => __jsx(Col, {\n    key: c.id,\n    xxl: xxl,\n    xl: xl,\n    lg: lg,\n    md: md,\n    sm: sm,\n    xs: xs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, type === \"show\" ? __jsx(Link, {\n    href: `/character${c.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, __jsx(CharacterCard, {\n    character: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }))) : __jsx(CharacterCard, {\n    character: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No characters yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Grid.js"],"names":["Row","Col","Empty","Link","Masonry","Card","UserCard","CharacterCard","LocationCard","StoriesGrid","stories","type","gutter","lg","md","sm","xs","xl","length","map","story","id","PRESENTED_IMAGE_SIMPLE","UserGrid","LocationGrid","locations","xxl","loc","CharacterGrid","characters","c"],"mappings":"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","sourcesContent":["import { Row, Col, Empty } from \"antd\";\r\nimport Link from \"next/link\";\r\nimport Masonry from \"react-responsive-masonry\";\r\n\r\nimport Card from \"../common/Card\";\r\nimport UserCard from \"../common/UserCard\";\r\nimport CharacterCard from \"../common/CharacterCard\";\r\nimport LocationCard from \"../common/LocationCard\";\r\n\r\nconst StoriesGrid = ({ stories, type, gutter, lg, md, sm, xs, xl }) => {\r\n  return (\r\n    <Masonry columnsCount={3} gutter={16}>\r\n      {stories.length > 0 ? (\r\n        stories.map((story) => (\r\n          <Link href={`/story/${story.id}`}>\r\n            <a>\r\n              <Card story={story} type={type} />\r\n            </a>\r\n          </Link>\r\n        ))\r\n      ) : (\r\n        <Empty\r\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n          description=\"No stories yet\"\r\n        />\r\n      )}\r\n    </Masonry>\r\n    // <Row gutter={gutter}>\r\n    //   {stories.length > 0 ? (\r\n    //     stories.map((story) => (\r\n    //       <Col key={story.id} xl={xl} md={md} xs={xs} sm={sm} lg={lg} xl={xl}>\r\n    //         <Link href={`/story/${story.id}`}>\r\n    //           <a>\r\n    //             <Card story={story} type={type} />\r\n    //           </a>\r\n    //         </Link>\r\n    //       </Col>\r\n    //     ))\r\n    //   ) : (\r\n    //     <Empty\r\n    //       image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n    //       description=\"No stories yet\"\r\n    //     />\r\n    //   )}\r\n    // </Row>\r\n  );\r\n};\r\n\r\nconst UserGrid = () => {\r\n  return (\r\n    <Row gutter={[20, 30]} align=\"center\">\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n      <Col lg={4} md={6} sm={8} xs={12}>\r\n        <UserCard />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst LocationGrid = ({ locations, gutter, xl, xxl, lg, md, sm, xs, type }) => {\r\n  return locations.length > 0 ? (\r\n    <Row gutter={gutter}>\r\n      {locations.map((loc) => (\r\n        <Col xl={xl} xxl={xxl} xs={xs} sm={sm} md={md} lg={lg} key={loc.id}>\r\n          <LocationCard type={type} location={loc} />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  ) : (\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No locations yet\"\r\n    />\r\n  );\r\n};\r\n\r\nconst CharacterGrid = ({\r\n  gutter,\r\n  xxl,\r\n  xl,\r\n  lg,\r\n  md,\r\n  sm,\r\n  xs,\r\n  characters,\r\n  type,\r\n}) => {\r\n  return characters.length > 0 ? (\r\n    <Row gutter={gutter}>\r\n      {characters?.map((c) => (\r\n        <Col key={c.id} xxl={xxl} xl={xl} lg={lg} md={md} sm={sm} xs={xs}>\r\n          {type === \"show\" ? (\r\n            <Link href={`/character${c.id}`}>\r\n              <a>\r\n                <CharacterCard character={c} type={type} />\r\n              </a>\r\n            </Link>\r\n          ) : (\r\n            <CharacterCard character={c} type={type} />\r\n          )}\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  ) : (\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No characters yet\"\r\n    />\r\n  );\r\n};\r\n\r\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };\r\n"]},"metadata":{},"sourceType":"module"}