{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_STORY, GET_CHAPTERS } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    dispatch({\n      type: GET_STORY,\n      payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      })\n    });\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: GET_CHAPTERS,\n      payload: arr\n    });\n  });\n};\nexport const getStoryCharacters = id => dispatch => {\n  let characters = {\n    mainCharacters: [],\n    secondaryCharacters: []\n  };\n  db.collection(\"stories\").doc(id).get().then(async doc => {\n    const mainsArr = doc.data().mainCharacters;\n    const mainsQuery = await mainsArr.map(char => db.collection(\"characters\").doc(char).get());\n    console.log(mainsArr); // mains.forEach((char) => {\n    //   db.collection(\"characters\")\n    //     .doc(char)\n    //     .get()\n    //     .then((c) => {\n    //       characters.mainCharacters.push({ ...c.data(), id: c.id });\n    //       console.log(characters);\n    //       db.collection(\"chapters\")\n    //         .where(\"storyId\", \"==\", id)\n    //         .get()\n    //         .then((chapters) => {\n    //           let chapCharacters = [];\n    //           chapters.forEach((chap) => {\n    //             console.log(chap.data());\n    //             chapCharacters.push(...chap.data().characters);\n    //             console.log(chapCharacters);\n    //           });\n    //         });\n    //     });\n    // });\n  });\n};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_STORY","GET_CHAPTERS","db","auth","getStory","id","dispatch","collection","doc","get","then","type","payload","data","getChapters","where","orderBy","onSnapshot","docs","arr","forEach","push","authorId","createdAt","number","title","commentsCount","getStoryCharacters","characters","mainCharacters","secondaryCharacters","mainsArr","mainsQuery","map","char","console","log","getUserStories","currentUser","uid","items","getFavoriteStories","favArr","storyId","users","result","user","Promise","all","res","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n} from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      dispatch({\r\n        type: GET_STORY,\r\n        payload: { ...doc.data(), id: doc.id },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {\r\n  let characters = { mainCharacters: [], secondaryCharacters: [] };\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then(async (doc) => {\r\n      const mainsArr = doc.data().mainCharacters;\r\n      const mainsQuery = await mainsArr.map((char) =>\r\n        db.collection(\"characters\").doc(char).get()\r\n      );\r\n      console.log(mainsArr);\r\n\r\n      // mains.forEach((char) => {\r\n      //   db.collection(\"characters\")\r\n      //     .doc(char)\r\n      //     .get()\r\n      //     .then((c) => {\r\n      //       characters.mainCharacters.push({ ...c.data(), id: c.id });\r\n      //       console.log(characters);\r\n      //       db.collection(\"chapters\")\r\n      //         .where(\"storyId\", \"==\", id)\r\n      //         .get()\r\n      //         .then((chapters) => {\r\n      //           let chapCharacters = [];\r\n      //           chapters.forEach((chap) => {\r\n      //             console.log(chap.data());\r\n      //             chapCharacters.push(...chap.data().characters);\r\n      //             console.log(chapCharacters);\r\n      //           });\r\n      //         });\r\n      //     });\r\n      // });\r\n    });\r\n};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}