{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col, Popconfirm } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\n\nconst Comments = ({\n  comments,\n  auth,\n  deleteComment,\n  submitComment,\n  chapid,\n  storyId,\n  authorId,\n  title\n}) => {\n  const [commentBody, setCommentBody] = React.useState(\"\");\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\n  const [clickedForm, setClickedForm] = React.useState(\"\");\n  const topComments = comments.filter(comm => !comm.answer);\n  const responses = comments.filter(comm => comm.answer);\n  const allComments = topComments.map(comm => {\n    let res = [];\n    responses.forEach(response => {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n\n  const commentToggle = id => {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  const answerToggle = id => {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  const submit = () => {\n    submitComment({\n      content: commentBody,\n      username: auth.user.username,\n      userId: auth.user.uid,\n      answer: false,\n      chapterId: chapid,\n      storyId: storyId,\n      title\n    });\n    setCommentBody(\"\");\n  };\n\n  const submitAnswer = (id, username, userId, e) => {\n    e.preventDefault();\n    submitComment({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      commentAnsweredId: id,\n      answeredToId: userId,\n      content: `@${username} ${commentBody}`,\n      storyId: storyId,\n      chapterId: chapid,\n      authorId: authorId,\n      title: title,\n      answeredTo: username,\n      answer: true\n    });\n    setCommentBody(\"\");\n    answerToggle();\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(comment => __jsx(React.Fragment, null, __jsx(Comment, {\n    key: comment.id,\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: commentToggle.bind(null, comment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(comment.id, chapid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 22\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, comment.responses.sort((a, b) => {\n    return new Date(b.createdAt.seconds * 1000) - new Date(a.createdAt.seconds * 1000);\n  }).map(c => __jsx(React.Fragment, null, __jsx(Comment, {\n    key: c.id,\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: answerToggle.bind(null, c.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(c.id, chapid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 27\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== c.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 25\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, c.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 23\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, __jsx(Avatar, {\n      src: c.userImage,\n      alt: c.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 27\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 30\n      }\n    }, c.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 23\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }\n    }, comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }\n  }), clickedForm === c.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 23\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${c.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 27\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    onClick: submitAnswer.bind(null, comment.id, c.username, c.userId),\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 27\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 23\n    }\n  }))))), clickedForm === comment.id && toggleCommentForm ? __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 17\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${comment.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 19\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: submitAnswer.bind(null, comment.id, comment.username, comment.userId),\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 19\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  })) : null)));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Popconfirm","Link","moment","Report","Comments","comments","auth","deleteComment","submitComment","chapid","storyId","authorId","title","commentBody","setCommentBody","React","useState","toggleCommentForm","setToggleCommentForm","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","commentToggle","answerToggle","submit","content","username","user","userId","uid","chapterId","submitAnswer","e","preventDefault","answeredToId","answeredTo","target","value","minRows","marginBottom","length","comment","bind","userImage","createdAt","unix","seconds","format","fromNow","sort","a","b","Date","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  deleteComment,\r\n  submitComment,\r\n  chapid,\r\n  storyId,\r\n  authorId,\r\n  title,\r\n}) => {\r\n  const [commentBody, setCommentBody] = React.useState(\"\");\r\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\r\n  const [clickedForm, setClickedForm] = React.useState(\"\");\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n\r\n  const commentToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  const submit = () => {\r\n    submitComment({\r\n      content: commentBody,\r\n      username: auth.user.username,\r\n      userId: auth.user.uid,\r\n      answer: false,\r\n      chapterId: chapid,\r\n      storyId: storyId,\r\n      title,\r\n    });\r\n    setCommentBody(\"\");\r\n  };\r\n\r\n  const submitAnswer = (id, username, userId, e) => {\r\n    e.preventDefault();\r\n    submitComment({\r\n      userId: auth.user.uid,\r\n      username: auth.user.username,\r\n      commentAnsweredId: id,\r\n      answeredToId: userId,\r\n      content: `@${username} ${commentBody}`,\r\n      storyId: storyId,\r\n      chapterId: chapid,\r\n      authorId: authorId,\r\n      title: title,\r\n      answeredTo: username,\r\n      answer: true,\r\n    });\r\n\r\n    setCommentBody(\"\");\r\n    answerToggle();\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <>\r\n          <Comment\r\n            key={comment.id}\r\n            actions={[\r\n              auth && auth.user && (\r\n                <span\r\n                  key=\"comment-basic-reply-to\"\r\n                  onClick={commentToggle.bind(null, comment.id)}\r\n                >\r\n                  Reply{\" \"}\r\n                </span>\r\n              ),\r\n              comment.userId === auth.user.uid && (\r\n                <Popconfirm\r\n                  title=\"Do you want to delete this comment ?\"\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                  onConfirm={() => deleteComment(comment.id, chapid)}\r\n                >\r\n                  <span>Delete</span>\r\n                </Popconfirm>\r\n              ),\r\n              auth.user && auth.user.uid !== comment.userId && (\r\n                <Report type=\"comment\" data={comment} />\r\n              ),\r\n            ]}\r\n            author={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>{comment.username}</a>\r\n              </Link>\r\n            }\r\n            avatar={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>\r\n                  <Avatar src={comment.userImage} alt={comment.username} />\r\n                </a>\r\n              </Link>\r\n            }\r\n            content={<p>{comment.content}</p>}\r\n            datetime={\r\n              <Tooltip\r\n                title={\r\n                  comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment\r\n                        .unix(comment.createdAt.seconds)\r\n                        .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                }\r\n              >\r\n                <span>\r\n                  {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                    : moment(comment.createdAt).fromNow()}\r\n                </span>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {comment.responses\r\n              .sort((a, b) => {\r\n                return (\r\n                  new Date(b.createdAt.seconds * 1000) -\r\n                  new Date(a.createdAt.seconds * 1000)\r\n                );\r\n              })\r\n              .map((c) => (\r\n                <>\r\n                  <Comment\r\n                    key={c.id}\r\n                    actions={[\r\n                      auth && auth.user && (\r\n                        <span\r\n                          key=\"comment-basic-reply-to\"\r\n                          onClick={answerToggle.bind(null, c.id)}\r\n                        >\r\n                          Reply{\" \"}\r\n                        </span>\r\n                      ),\r\n                      comment.userId === auth.user.uid && (\r\n                        <Popconfirm\r\n                          title=\"Do you want to delete this comment ?\"\r\n                          okText=\"Yes\"\r\n                          cancelText=\"No\"\r\n                          onConfirm={() => deleteComment(c.id, chapid)}\r\n                        >\r\n                          <span>Delete</span>\r\n                        </Popconfirm>\r\n                      ),\r\n                      auth.user && auth.user.uid !== c.userId && (\r\n                        <Report type=\"comment\" data={comment} />\r\n                      ),\r\n                    ]}\r\n                    author={\r\n                      <Link href={`/profile/${c.userId}`}>\r\n                        <a>{c.username}</a>\r\n                      </Link>\r\n                    }\r\n                    avatar={\r\n                      <Link href={`/profile/${c.userId}`}>\r\n                        <a>\r\n                          <Avatar src={c.userImage} alt={c.username} />\r\n                        </a>\r\n                      </Link>\r\n                    }\r\n                    content={<p>{c.content}</p>}\r\n                    datetime={\r\n                      <Tooltip\r\n                        title={\r\n                          comment.createdAt && typeof c.createdAt === \"object\"\r\n                            ? moment\r\n                                .unix(c.createdAt.seconds)\r\n                                .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                            : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                        }\r\n                      >\r\n                        <span>\r\n                          {comment.createdAt && typeof c.createdAt === \"object\"\r\n                            ? moment.unix(c.createdAt.seconds).fromNow()\r\n                            : moment(c.createdAt).fromNow()}\r\n                        </span>\r\n                      </Tooltip>\r\n                    }\r\n                  />\r\n                  {clickedForm === c.id && toggleAnswerForm && (\r\n                    <>\r\n                      <Row>\r\n                        <Col md={24}>\r\n                          <Input.TextArea\r\n                            value={commentBody}\r\n                            onChange={(e) => setCommentBody(e.target.value)}\r\n                            autoSize={{ minRows: 5 }}\r\n                            showCount={true}\r\n                            maxLength={800}\r\n                            placeholder={`@${c.username}`}\r\n                          ></Input.TextArea>\r\n                        </Col>\r\n                        <Col md={24}>\r\n                          <Button\r\n                            onClick={submitAnswer.bind(\r\n                              null,\r\n                              comment.id,\r\n                              c.username,\r\n                              c.userId\r\n                            )}\r\n                            type=\"primary\"\r\n                          >\r\n                            Comment\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                      <Divider />\r\n                    </>\r\n                  )}\r\n                </>\r\n              ))}\r\n          </Comment>\r\n\r\n          {clickedForm === comment.id && toggleCommentForm ? (\r\n            <>\r\n              <Row>\r\n                <Col md={24}>\r\n                  <Input.TextArea\r\n                    value={commentBody}\r\n                    onChange={(e) => setCommentBody(e.target.value)}\r\n                    autoSize={{ minRows: 5 }}\r\n                    showCount={true}\r\n                    maxLength={800}\r\n                    placeholder={`@${comment.username}`}\r\n                  ></Input.TextArea>\r\n                </Col>\r\n                <Col md={24}>\r\n                  <Button\r\n                    onClick={submitAnswer.bind(\r\n                      null,\r\n                      comment.id,\r\n                      comment.username,\r\n                      comment.userId\r\n                    )}\r\n                    type=\"primary\"\r\n                  >\r\n                    Comment\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Divider />\r\n            </>\r\n          ) : null}\r\n        </>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}