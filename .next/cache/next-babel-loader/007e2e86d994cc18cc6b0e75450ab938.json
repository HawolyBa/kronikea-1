{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport const getUserStories = () => dispatch => {\n  console.log(auth.currentUser.uid);\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get(docs => {\n    let stories = [];\n    docs.forEach(doc => {\n      stories = [...stories, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    console.log(stories);\n    return stories;\n  }).then(stories => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: stories\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","db","auth","getUserStories","dispatch","console","log","currentUser","uid","collection","where","get","docs","stories","forEach","doc","id","data","then","type","payload"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,aAAzB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAOC,QAAD,IAAc;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,WAAL,CAAiBC,GAA7B;AACAP,EAAAA,EAAE,CAACQ,UAAH,CAAc,SAAd,EACGC,KADH,CACS,UADT,EACqB,IADrB,EAC2BR,IAAI,CAACK,WAAL,CAAiBC,GAD5C,EAEGG,GAFH,CAEQC,IAAD,IAAU;AACb,QAAIC,OAAO,GAAG,EAAd;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,MAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ;AAAeG,QAAAA,EAAE,EAAED,GAAG,CAACC;AAAvB,SAA8BD,GAAG,CAACE,IAAJ,EAA9B,EAAV;AACD,KAFD;AAGAZ,IAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;AACA,WAAOA,OAAP;AACD,GATH,EAUGK,IAVH,CAUSL,OAAD,IAAa;AACjBT,IAAAA,QAAQ,CAAC;AAAEe,MAAAA,IAAI,EAAEnB,gBAAR;AAA0BoB,MAAAA,OAAO,EAAEP;AAAnC,KAAD,CAAR;AACD,GAZH;AAaD,CAfM","sourcesContent":["import { GET_USER_STORIES } from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  console.log(auth.currentUser.uid);\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get((docs) => {\r\n      let stories = [];\r\n      docs.forEach((doc) => {\r\n        stories = [...stories, { id: doc.id, ...doc.data() }];\r\n      });\r\n      console.log(stories);\r\n      return stories;\r\n    })\r\n    .then((stories) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: stories });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}