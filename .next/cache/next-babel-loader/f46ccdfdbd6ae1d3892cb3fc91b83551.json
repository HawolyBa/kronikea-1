{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db, auth, storage } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport var log_in = function log_in(email, password) {\n  return function (dispatch) {\n    console.log(email, password);\n    auth.signInWithEmailAndPassword(email, password);\n  };\n};\nexport var getProfile = function getProfile(id) {\n  return function (dispatch) {\n    db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(function (doc) {\n      return dispatch({\n        type: types.GET_PROFILE,\n        payload: _objectSpread({\n          id: doc.id\n        }, doc.data())\n      });\n    });\n  };\n};\nexport var getFavoriteAuthors = function getFavoriteAuthors(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"senderId\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().recipient]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_AUTHORS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getFollowers = function getFollowers(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().senderId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FOLLOWERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getIsFollowing = function getIsFollowing(userId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs.length > 0 ? true : false;\n        return dispatch({\n          type: types.IS_FOLLOWING,\n          payload: answer\n        });\n      });\n    }\n  };\n};\nexport var followUser = function followUser(id, isFavorite, newFollower) {\n  return function (dispatch) {\n    if (isFavorite) return message.warning(\"You are already following this user\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"usersLikes\").add({\n      sender: newFollower.username,\n      senderId: newFollower.uid,\n      recipient: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return db.collection(\"notifications\").doc(\"\".concat(auth.currentUser.uid).concat(id)).set({\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        recipient: id,\n        sender: newFollower.uid,\n        read: false,\n        type: \"follow\",\n        message: \"\".concat(newFollower.username, \" started following you\")\n      });\n    }).then(function () {\n      return message.success(\"You are now following this user\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var unfollowUser = function unfollowUser(id, isFavorite) {\n  return function (dispatch) {\n    if (!isFavorite) return message.warning(\"You are not following this user yet\");\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"usersLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"User successfully unfollowed\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var changeProfile = function changeProfile(data, setOpen, username, userImage) {\n  return function (dispatch) {\n    var newPassword = data.newPassword,\n        actualPassword = data.actualPassword,\n        newInfo = _objectWithoutProperties(data, [\"newPassword\", \"actualPassword\"]);\n\n    var imageName = \"\".concat(auth.currentUser.uid, \"_\").concat(newInfo.username); // // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\n    // const userStoriesQuery = db\n    //   .collection(\"stories\")\n    //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n    //   .get();\n    // const userChaptersQuery = db\n    //   .collection(\"chapters\")\n    //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n    //   .get();\n    // const userCharactersQuery = db\n    //   .collection(\"characters\")\n    //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n    //   .get();\n    // const userCommentsQuery = db\n    //   .collection(\"comments\")\n    //   .where(\"userId\", \"==\", auth.currentUser.uid)\n    //   .get();\n    // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\n    // const batchUpdateAll = async (queries, url) => {\n    //   await Promise.all(queries).then((res) => {\n    //     res[0].forEach((story) => {\n    //       db.collection(\"stories\")\n    //         .doc(story.id)\n    //         .update({\n    //           userImage: url ? url : newInfo.image,\n    //           authorName: data.username,\n    //         });\n    //     });\n    //     res[1].forEach((chap) => {\n    //       db.collection(\"chapters\")\n    //         .doc(chap.id)\n    //         .update({\n    //           userImage: url ? url : newInfo.image,\n    //           authorName: data.username,\n    //         });\n    //     });\n    //     res[2].forEach((char) => {\n    //       db.collection(\"characters\")\n    //         .doc(char.id)\n    //         .update({\n    //           userImage: url ? url : newInfo.image,\n    //           authorName: data.username,\n    //         });\n    //     });\n    //     res[3].forEach((comm) => {\n    //       db.collection(\"comments\")\n    //         .doc(comm.id)\n    //         .update({\n    //           userImage: url ? url : newInfo.image,\n    //           authorName: data.username,\n    //         });\n    //     });\n    //   });\n    // };\n\n    if (newPassword) {\n      auth.currentUser.reauthenticateWithCredential(firebase.auth.EmailAuthProvider.credential(auth.currentUser.email, actualPassword)).then(function () {\n        return auth.currentUser.updatePassword(newPassword);\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof newInfo.image === \"object\")) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(newInfo.image).then(function () {\n                  return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).getDownloadURL();\n                }).then( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            return _context.abrupt(\"return\", db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n                              image: url\n                            })).then(function () {\n                              setOpen(false);\n                              message.success(\"Profile updated successfully\"); // return batchUpdateAll(\n                              //   [\n                              //     userStoriesQuery,\n                              //     userChaptersQuery,\n                              //     userCharactersQuery,\n                              //     userCommentsQuery,\n                              //   ],\n                              //   url\n                              // );\n                            }));\n\n                          case 1:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n                _context2.next = 5;\n                break;\n\n              case 4:\n                return _context2.abrupt(\"return\", db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo)).then(function () {\n                  return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]);\n                }).then(function () {\n                  setOpen(false);\n                  message.success(\"Profile updated successfully\");\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })))[\"catch\"](function (err) {\n        return message.error(err.message);\n      });\n    } else {\n      if (typeof newInfo.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(newInfo.image).then(function () {\n          return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).getDownloadURL();\n        }).then( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    return _context3.abrupt(\"return\", db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n                      image: url\n                    })).then(function () {\n                      return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery], url);\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function (_x2) {\n            return _ref3.apply(this, arguments);\n          };\n        }()).then(function () {\n          setOpen(false);\n          message.success(\"Profile updated successfully\");\n        });\n      } else {\n        console.log(\"mdp pas changé et image pas changé\");\n        db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo)).then(function () {\n          return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]);\n        }).then(function () {\n          setOpen(false);\n          message.success(\"Profile updated successfully\");\n        });\n      }\n    }\n  };\n};\nexport var getUsersFromSearch = function getUsersFromSearch(search) {\n  return function (dispatch) {\n    var result = [];\n    db.collection(\"users\").get().then(function (data) {\n      data.forEach(function (doc) {\n        var username = doc.data().username.toLowerCase().split(\" \");\n        var searchTerm = search.split(\"-\");\n        var isIncluded = searchTerm.every(function (word) {\n          return username.includes(word);\n        });\n        var orIncluded = searchTerm.some(function (word) {\n          return doc.data().username.toLowerCase().indexOf(word) !== -1;\n        });\n\n        if (isIncluded || orIncluded) {\n          result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }));\n        }\n      });\n      return dispatch({\n        type: types.GET_USERS_FROM_SEARCH,\n        payload: result,\n        loading: false\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","storage","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","userId","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","snapshot","answer","length","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","set","read","success","err","unfollowUser","changeProfile","setOpen","userImage","newPassword","actualPassword","newInfo","imageName","reauthenticateWithCredential","EmailAuthProvider","credential","updatePassword","image","ref","put","getDownloadURL","url","update","batchUpdateAll","userStoriesQuery","userChaptersQuery","userCharactersQuery","userCommentsQuery","getUsersFromSearch","search","toLowerCase","split","searchTerm","isIncluded","every","word","includes","orIncluded","some","indexOf","push","GET_USERS_FROM_SEARCH","loading"],"mappings":"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","sourcesContent":["import { db, auth, storage } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs.length > 0 ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.uid,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      return db\r\n        .collection(\"notifications\")\r\n        .doc(`${auth.currentUser.uid}${id}`)\r\n        .set({\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          recipient: id,\r\n          sender: newFollower.uid,\r\n          read: false,\r\n          type: \"follow\",\r\n          message: `${newFollower.username} started following you`,\r\n        });\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const changeProfile = (data, setOpen, username, userImage) => (\r\n  dispatch\r\n) => {\r\n  const { newPassword, actualPassword, ...newInfo } = data;\r\n  const imageName = `${auth.currentUser.uid}_${newInfo.username}`;\r\n\r\n  // // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\r\n  // const userStoriesQuery = db\r\n  //   .collection(\"stories\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userChaptersQuery = db\r\n  //   .collection(\"chapters\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userCharactersQuery = db\r\n  //   .collection(\"characters\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userCommentsQuery = db\r\n  //   .collection(\"comments\")\r\n  //   .where(\"userId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n\r\n  // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\r\n  // const batchUpdateAll = async (queries, url) => {\r\n  //   await Promise.all(queries).then((res) => {\r\n  //     res[0].forEach((story) => {\r\n  //       db.collection(\"stories\")\r\n  //         .doc(story.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[1].forEach((chap) => {\r\n  //       db.collection(\"chapters\")\r\n  //         .doc(chap.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[2].forEach((char) => {\r\n  //       db.collection(\"characters\")\r\n  //         .doc(char.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[3].forEach((comm) => {\r\n  //       db.collection(\"comments\")\r\n  //         .doc(comm.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //   });\r\n  // };\r\n\r\n  if (newPassword) {\r\n    auth.currentUser\r\n      .reauthenticateWithCredential(\r\n        firebase.auth.EmailAuthProvider.credential(\r\n          auth.currentUser.email,\r\n          actualPassword\r\n        )\r\n      )\r\n      .then(() => {\r\n        return auth.currentUser.updatePassword(newPassword);\r\n      })\r\n      .then(async () => {\r\n        if (typeof newInfo.image === \"object\") {\r\n          storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .put(newInfo.image)\r\n            .then(() => {\r\n              return storage\r\n                .ref(`${auth.currentUser.uid}/${imageName}`)\r\n                .getDownloadURL();\r\n            })\r\n            .then(async (url) => {\r\n              return db\r\n                .collection(\"users\")\r\n                .doc(auth.currentUser.uid)\r\n                .update({\r\n                  ...newInfo,\r\n                  image: url,\r\n                })\r\n                .then(() => {\r\n                  setOpen(false);\r\n                  message.success(\"Profile updated successfully\");\r\n                  // return batchUpdateAll(\r\n                  //   [\r\n                  //     userStoriesQuery,\r\n                  //     userChaptersQuery,\r\n                  //     userCharactersQuery,\r\n                  //     userCommentsQuery,\r\n                  //   ],\r\n                  //   url\r\n                  // );\r\n                });\r\n              // .then(() => {\r\n              //   setOpen(false);\r\n              //   message.success(\"Profile updated successfully\");\r\n              // });\r\n            });\r\n        } else {\r\n          return db\r\n            .collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n            })\r\n            .then(() => {\r\n              return batchUpdateAll([\r\n                userStoriesQuery,\r\n                userChaptersQuery,\r\n                userCharactersQuery,\r\n                userCommentsQuery,\r\n              ]);\r\n            })\r\n            .then(() => {\r\n              setOpen(false);\r\n              message.success(\"Profile updated successfully\");\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => message.error(err.message));\r\n  } else {\r\n    if (typeof newInfo.image === \"object\") {\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .put(newInfo.image)\r\n        .then(() => {\r\n          return storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .getDownloadURL();\r\n        })\r\n        .then(async (url) => {\r\n          return db\r\n            .collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n              image: url,\r\n            })\r\n            .then(() => {\r\n              return batchUpdateAll(\r\n                [\r\n                  userStoriesQuery,\r\n                  userChaptersQuery,\r\n                  userCharactersQuery,\r\n                  userCommentsQuery,\r\n                ],\r\n                url\r\n              );\r\n            });\r\n        })\r\n        .then(() => {\r\n          setOpen(false);\r\n          message.success(\"Profile updated successfully\");\r\n        });\r\n    } else {\r\n      console.log(\"mdp pas changé et image pas changé\");\r\n      db.collection(\"users\")\r\n        .doc(auth.currentUser.uid)\r\n        .update({\r\n          ...newInfo,\r\n        })\r\n        .then(() => {\r\n          return batchUpdateAll([\r\n            userStoriesQuery,\r\n            userChaptersQuery,\r\n            userCharactersQuery,\r\n            userCommentsQuery,\r\n          ]);\r\n        })\r\n        .then(() => {\r\n          setOpen(false);\r\n          message.success(\"Profile updated successfully\");\r\n        });\r\n    }\r\n  }\r\n};\r\n\r\nexport const getUsersFromSearch = (search) => (dispatch) => {\r\n  let result = [];\r\n  db.collection(\"users\")\r\n    .get()\r\n    .then((data) => {\r\n      data.forEach((doc) => {\r\n        const username = doc.data().username.toLowerCase().split(\" \");\r\n        const searchTerm = search.split(\"-\");\r\n        const isIncluded = searchTerm.every((word) => username.includes(word));\r\n        const orIncluded = searchTerm.some(\r\n          (word) => doc.data().username.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        if (isIncluded || orIncluded) {\r\n          result.push({ ...doc.data(), id: doc.id });\r\n        }\r\n      });\r\n      return dispatch({\r\n        type: types.GET_USERS_FROM_SEARCH,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}