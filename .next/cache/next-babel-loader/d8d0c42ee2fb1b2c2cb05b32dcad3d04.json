{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\"; // STORIES\n\nexport var getStory = function getStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        var main = doc.data().mainCharacters;\n        var secondary = doc.data().secondaryCharacters;\n        var mainArr = [];\n        var secondaryArr = [];\n        var mainQuery = main.map(function (c) {\n          return db.collection(\"characters\").doc(c).get();\n        });\n        var secondaryQuery = secondary.map(function (c) {\n          return db.collection(\"characters\").doc(c.id).get();\n        });\n        var mainRes = Promise.all(mainQuery);\n        var secondaryRes = Promise.all(secondaryQuery);\n        Promise.all([mainRes, secondaryRes]).then(function (result) {\n          result[0].forEach(function (docu) {\n            mainArr = [].concat(_toConsumableArray(mainArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          result[1].forEach(function (docu) {\n            secondaryArr = [].concat(_toConsumableArray(secondaryArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          dispatch({\n            type: types.GET_STORY,\n            storyExists: true,\n            payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id,\n              secondaryCharacters: secondaryArr,\n              mainCharacters: mainArr,\n              mainArr: doc.data().mainCharacters\n            })\n          });\n        });\n      } else {\n        dispatch({\n          type: types.DISPATCH_ERROR,\n          storyExists: false\n        });\n      }\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var addStory = function addStory(data) {\n  return function (dispatch) {\n    var _objectSpread2;\n\n    dispatch({\n      type: types.ADD_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var storyId = \"\";\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, (_objectSpread2 = {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      secondaryCharacters: [],\n      secondaryArr: [],\n      featured: false,\n      note: 0\n    }, _defineProperty(_objectSpread2, \"chaptersCount\", 0), _defineProperty(_objectSpread2, \"commentsCount\", 0), _defineProperty(_objectSpread2, \"lastUpdated\", firebase.firestore.FieldValue.serverTimestamp()), _objectSpread2))).then(function (res) {\n      storyId = res.id;\n\n      if (typeof data.banner === \"object\") {\n        var imageName = \"\".concat(res.id, \"_\").concat(data.title.toLowerCase().split(\" \").join(\"_\"));\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"stories\").doc(storyId).update({\n            banner: url\n          });\n        }).then(function () {\n          dispatch({\n            type: types.ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: storyId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: storyId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editStory = function editStory(data, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_STORY,\n      payload: {\n        loadingStory: true\n      }\n    });\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n          banner: url,\n          lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n        }));\n      }).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n      })).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteStory = function deleteStory(id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var batch = db.batch();\n    batch[\"delete\"](db.collection(\"stories\").doc(id));\n    var chaptersToDelete = db.collection(\"chapters\").where(\"storyId\", \"==\", id).get();\n    var likesToDelete = db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).get();\n    var locationsToDelete = db.collection(\"locations\").where(\"storyId\", \"==\", id).get();\n    Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(function (res) {\n      res[0].forEach(function (chap) {\n        batch[\"delete\"](db.collection(\"chapters\").doc(chap.id));\n      });\n      res[1].forEach(function (like) {\n        batch[\"delete\"](db.collection(\"storiesLikes\").doc(like.id));\n      });\n      res[2].forEach(function (loc) {\n        batch[\"delete\"](db.collection(\"locations\").doc(loc.id));\n      });\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_STORY,\n          payload: {\n            message: \"Story deleted successfully\",\n            loading: true,\n            deleted: true\n          }\n        });\n      });\n    });\n  };\n};\nexport var getUserStories = function getUserStories(type) {\n  return function (dispatch) {\n    db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).orderBy(\"createdAt\", \"desc\").get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteStories = function getFavoriteStories() {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).orderBy(\"createdAt\", \"desc\").get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().storyId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"stories\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_STORIES,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var isStoryFavorite = function isStoryFavorite(storyId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs[0] ? true : false;\n        return dispatch({\n          type: types.IS_STORY_FAVORITE,\n          payload: answer,\n          loadingFav: false\n        });\n      });\n    }\n  };\n};\nexport var addStoryToFavorite = function addStoryToFavorite(id, username, storyTitle) {\n  return function (dispatch) {\n    // if (isFavorite) return message.warning(\"You've already liked this story\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"storiesLikes\").add({\n      sender: username,\n      senderId: auth.currentUser.uid,\n      storyId: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" added to your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var removeStoryFromFavorite = function removeStoryFromFavorite(id, storyTitle) {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" removed from your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var getStoryCharacters = function getStoryCharacters() {\n  return function (dispatch) {};\n}; // CHAPTERs\n\nexport var addChapter = function addChapter(data, secondaryCharacters) {\n  return function (dispatch) {\n    var chapId = \"\";\n    dispatch({\n      type: types.ADD_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      commentsCount: 0,\n      note: 0,\n      voters: [],\n      votesCount: 0,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function (res) {\n      chapId = res.id;\n      db.collection(\"stories\").doc(data.storyId).get().then(function (story) {\n        db.collection(\"stories\").doc(data.storyId).update({\n          chaptersCount: story.data().chaptersCount + 1,\n          secondaryCharacters: secondaryCharacters,\n          secondaryArr: secondaryCharacters.map(function (c) {\n            return c.id;\n          })\n        }).then(function () {\n          dispatch({\n            type: types.ADD_CHAPTER,\n            payload: {\n              message: \"Chapter added successfully\",\n              chapId: chapId,\n              loading: false\n            }\n          });\n        });\n      });\n    });\n  };\n};\nexport var editChapter = function editChapter(data, storyId, chapid, secondaryCharacters) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(function () {\n      db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n        db.collection(\"stories\").doc(storyId).update({\n          secondaryCharacters: secondaryCharacters,\n          secondaryArr: secondaryCharacters.map(function (c) {\n            return c.id;\n          })\n        }).then(function () {\n          dispatch({\n            type: types.EDIT_CHAPTER,\n            payload: {\n              message: \"Chapter edited successfully\",\n              loading: false\n            }\n          });\n        });\n      });\n    });\n  };\n};\nexport var deleteChapter = function deleteChapter(id, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        loadingChapter: true\n      }\n    });\n    var batch = db.batch();\n    var commentsToDelete = db.collection(\"comments\").where(\"chapterId\", \"==\", id).get();\n    var chapter = db.collection(\"chapters\").doc(id).get();\n    var story = db.collection(\"stories\").doc(storyId).get();\n    Promise.all([chapter, story, commentsToDelete]).then(function (res) {\n      var charactersFromChapter = res[0].data().characters;\n      var charactersFromStory = res[1].data().secondaryCharacters;\n      var newArr = charactersFromStory.map(function (c) {\n        if (charactersFromChapter.includes(c.id)) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            times: c.times - 1\n          });\n        } else {\n          return c;\n        }\n      }).filter(function (c) {\n        return c.times > 0;\n      });\n      batch.update(db.collection(\"stories\").doc(storyId), {\n        chaptersCount: res[1].data().chaptersCount - 1,\n        secondaryCharacters: newArr,\n        secondaryArr: newArr.map(function (c) {\n          return c.id;\n        })\n      });\n      res[2].forEach(function (comm) {\n        return batch[\"delete\"](db.collection(\"comments\").doc(comm.id));\n      });\n      batch[\"delete\"](db.collection(\"chapters\").doc(id));\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            message: \"Chapter deleted successfully\",\n            loadingChapter: false\n          }\n        });\n      });\n    });\n  };\n};\nexport var getChapter = function getChapter(storyId, id, type) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n      if (doc.exists) {\n        db.collection(\"chapters\").doc(id).get().then(function (chap) {\n          if (chap.exists) {\n            if (type === \"show\") {\n              var characters = [];\n              var locations = [];\n              var charaQuery = [];\n              var locQuery = [];\n              var charactersInChaper = chap.data().characters;\n              var locationsInChaper = chap.data().locations;\n              charactersInChaper.forEach(function (_char) {\n                charaQuery.push(db.collection(\"characters\").doc(_char).get());\n              });\n              locationsInChaper.forEach(function (loc) {\n                locQuery.push(db.collection(\"locations\").doc(loc).get());\n              });\n              charaQuery = Promise.all(charaQuery);\n              locQuery = Promise.all(locQuery);\n              Promise.all([charaQuery, locQuery]).then(function (res) {\n                res[0].forEach(function (c) {\n                  characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                    id: c.id\n                  }));\n                });\n                res[1].forEach(function (l) {\n                  locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                    id: l.id\n                  }));\n                });\n                dispatch({\n                  type: types.GET_CHAPTER,\n                  payload: {\n                    chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                      id: chap.id,\n                      locations: locations,\n                      characters: characters,\n                      \"public\": doc.data()[\"public\"],\n                      storyTitle: doc.data().title\n                    }),\n                    chapterExists: true\n                  }\n                });\n              });\n            } else {\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    \"public\": doc.data()[\"public\"]\n                  }),\n                  chapterExists: true\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapterExists: false\n              }\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHAPTER,\n          payload: {\n            chapterExists: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var getChapters = function getChapters(id) {\n  return function (dispatch) {\n    db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(function (docs) {\n      var arr = [];\n      docs.forEach(function (doc) {\n        arr.push({\n          authorId: doc.data().authorId,\n          id: doc.id,\n          createdAt: doc.data().createdAt,\n          number: doc.data().number,\n          title: doc.data().title,\n          commentsCount: doc.data().commentsCount\n        });\n      });\n      dispatch({\n        type: types.GET_CHAPTERS,\n        payload: arr\n      });\n    });\n  };\n}; // LOCATIONS\n\nexport var addLocation = function addLocation(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_LOCATION,\n      payload: {\n        loadingLoc: true\n      }\n    });\n    var locId = \"\";\n    db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function (res) {\n      locId = res.id;\n\n      if (typeof data.image === \"object\") {\n        var imageName = \"\".concat(locId, \"_\").concat(data.name.toLowerCase().split(\" \").join(\"_\"));\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"locations\").doc(locId).update({\n            image: url\n          });\n        }).then(function () {\n          dispatch({\n            type: types.ADD_LOCATION,\n            payload: {\n              message: \"Location added successfully\",\n              locId: res.id,\n              loadingLoc: false\n            }\n          });\n        });\n      } else {\n        dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editLocation = function editLocation(data) {\n  return function (dispatch) {};\n};\nexport var getLocation = function getLocation(id) {\n  return function (dispatch) {\n    db.collection(\"locations\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: types.GET_LOCATION,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }),\n          locationExists: true\n        });\n      } else {\n        dispatch({\n          type: types.GET_LOCATION,\n          locationExists: false\n        });\n      }\n    });\n  };\n};\nexport var deleteLocation = function deleteLocation(id, name) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    var batch = db.batch();\n    var imageName = \"\".concat(id, \"_\").concat(name.toLowerCase().split(\" \").join(\"_\"));\n    batch[\"delete\"](db.collection(\"locations\").doc(id));\n    db.collection(\"chapters\").where(\"locations\", \"array-contains\", id).get().then(function (res) {\n      res.forEach(function (chap) {\n        return batch.update(db.collection(\"chapters\").doc(chap.id), {\n          locations: chap.data().locations.filter(function (c) {\n            return c !== id;\n          })\n        });\n      });\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]().then(function () {\n        batch.commit().then(function () {\n          dispatch({\n            type: types.DELETE_CHAPTER,\n            payload: {\n              loading: false,\n              message: \"Location deleted successfully\",\n              deleted: true\n            }\n          });\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n        batch.commit().then(function () {\n          dispatch({\n            type: types.DELETE_CHAPTER,\n            payload: {\n              loading: false,\n              message: \"Location deleted successfully\",\n              deleted: true\n            }\n          });\n        });\n      });\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var getUserLocations = function getUserLocations() {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var locations = [];\n      docs.forEach(function (doc) {\n        locations = [].concat(_toConsumableArray(locations), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      dispatch({\n        type: types.GET_USER_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n};\nexport var getStoryLocations = function getStoryLocations(storyId) {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n      var locations = docs.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        });\n      });\n      dispatch({\n        type: types.GET_STORY_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n}; // COMMENTS\n\nexport var getComments = function getComments(id) {\n  return function (dispatch) {\n    db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(function (snap) {\n      var comments = snap.docs.map(function (comment) {\n        return _objectSpread(_objectSpread({}, comment.data()), {}, {\n          id: comment.id\n        });\n      });\n      var queries = [];\n      comments.forEach(function (comm) {\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\n      });\n      Promise.all(queries).then(function (res) {\n        comments = comments.map(function (comm) {\n          return _objectSpread(_objectSpread({}, comm), {}, {\n            userImage: res.find(function (d) {\n              return d.id === comm.userId;\n            }).data().image\n          });\n        });\n        dispatch({\n          type: types.GET_COMMENTS,\n          payload: {\n            loadingComments: false,\n            comments: comments\n          }\n        });\n      });\n    });\n  };\n};\nexport var submitComment = function submitComment(info) {\n  return function (dispatch) {\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    if (!info.content) return message.error(\"Content must not be empty\");\n    var batch = db.batch();\n    var story = db.collection(\"stories\").doc(info.storyId).get();\n    var chapter = db.collection(\"chapters\").doc(info.chapterId).get();\n    db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function () {\n      message.success(\"Comment posted successfully\");\n      Promise.all([story, chapter]).then(function (res) {\n        console.log(res);\n        batch.update(story, {\n          commentsCount: res[0].data().commentsCount + 1\n        });\n        batch.update(chapter, {\n          commentsCount: res[1].data().commentsCount + 1\n        });\n        batch.commit();\n      });\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};\nexport var deleteComment = function deleteComment(id, chapid) {\n  return function (dispatch) {\n    db.collection(\"chapters\").doc(chapid).get().then(function (chap) {\n      db.collection(\"chapters\").doc(chapid).update({\n        commentsCount: chap.data().commentsCount - 1\n      }).then(function () {\n        db.collection(\"comments\").doc(id)[\"delete\"]();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","err","console","log","addStory","ADD_STORY","loading","storyId","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","imageName","title","toLowerCase","split","join","ref","put","child","getDownloadURL","url","update","error","editStory","EDIT_STORY","loadingStory","lastUpdated","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","batch","chaptersToDelete","likesToDelete","locationsToDelete","chap","like","loc","commit","deleted","getUserStories","orderBy","items","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","success","removeStoryFromFavorite","getStoryCharacters","addChapter","chapId","ADD_CHAPTER","commentsCount","voters","votesCount","story","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","commentsToDelete","chapter","charactersFromChapter","characters","charactersFromStory","newArr","includes","times","filter","comm","getChapter","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","char","push","l","GET_CHAPTER","chapterExists","getChapters","arr","number","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","locId","image","name","editLocation","getLocation","GET_LOCATION","locationExists","deleteLocation","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","userId","userImage","find","d","GET_COMMENTS","loadingComments","submitComment","info","content","chapterId","deleteComment"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n      chaptersCount: 0,\r\n      commentsCount: 0,\r\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        const imageName = `${res.id}_${data.title\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyId)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: storyId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: storyId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n            lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  batch.delete(db.collection(\"stories\").doc(id));\r\n  const chaptersToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const likesToDelete = db\r\n    .collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const locationsToDelete = db\r\n    .collection(\"locations\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(\r\n    (res) => {\r\n      res[0].forEach((chap) => {\r\n        batch.delete(db.collection(\"chapters\").doc(chap.id));\r\n      });\r\n      res[1].forEach((like) => {\r\n        batch.delete(db.collection(\"storiesLikes\").doc(like.id));\r\n      });\r\n      res[2].forEach((loc) => {\r\n        batch.delete(db.collection(\"locations\").doc(loc.id));\r\n      });\r\n      batch.commit().then(() => {\r\n        dispatch({\r\n          type: types.DELETE_STORY,\r\n          payload: {\r\n            message: \"Story deleted successfully\",\r\n            loading: true,\r\n            deleted: true,\r\n          },\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const getUserStories = (type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  let chapId = \"\";\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  return db\r\n    .collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      chapId = res.id;\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((story) => {\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              chaptersCount: story.data().chaptersCount + 1,\r\n              secondaryCharacters: secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: chapId,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  const batch = db.batch();\r\n\r\n  const commentsToDelete = db\r\n    .collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .get();\r\n  const chapter = db.collection(\"chapters\").doc(id).get();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n\r\n  Promise.all([chapter, story, commentsToDelete]).then((res) => {\r\n    const charactersFromChapter = res[0].data().characters;\r\n    const charactersFromStory = res[1].data().secondaryCharacters;\r\n    let newArr = charactersFromStory\r\n      .map((c) => {\r\n        if (charactersFromChapter.includes(c.id)) {\r\n          return { ...c, times: c.times - 1 };\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n      .filter((c) => c.times > 0);\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      chaptersCount: res[1].data().chaptersCount - 1,\r\n      secondaryCharacters: newArr,\r\n      secondaryArr: newArr.map((c) => c.id),\r\n    });\r\n    res[2].forEach((comm) =>\r\n      batch.delete(db.collection(\"comments\").doc(comm.id))\r\n    );\r\n    batch.delete(db.collection(\"chapters\").doc(id));\r\n    batch.commit().then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery]).then((res) => {\r\n                  res[0].forEach((c) => {\r\n                    characters.push({ ...c.data(), id: c.id });\r\n                  });\r\n                  res[1].forEach((l) => {\r\n                    locations.push({ ...l.data(), id: l.id });\r\n                  });\r\n                  dispatch({\r\n                    type: types.GET_CHAPTER,\r\n                    payload: {\r\n                      chapter: {\r\n                        ...chap.data(),\r\n                        id: chap.id,\r\n                        locations,\r\n                        characters,\r\n                        public: doc.data().public,\r\n                        storyTitle: doc.data().title,\r\n                      },\r\n                      chapterExists: true,\r\n                    },\r\n                  });\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n  let locId = \"\";\r\n\r\n  db.collection(\"locations\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      locId = res.id;\r\n      if (typeof data.image === \"object\") {\r\n        const imageName = `${locId}_${data.name\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db.collection(\"locations\").doc(locId).update({ image: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_LOCATION,\r\n              payload: {\r\n                message: \"Location added successfully\",\r\n                locId: res.id,\r\n                loadingLoc: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const deleteLocation = (id, name) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\r\n\r\n  batch.delete(db.collection(\"locations\").doc(id));\r\n  db.collection(\"chapters\")\r\n    .where(\"locations\", \"array-contains\", id)\r\n    .get()\r\n    .then((res) => {\r\n      res.forEach((chap) =>\r\n        batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n          locations: chap.data().locations.filter((c) => c !== id),\r\n        })\r\n      );\r\n\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .delete()\r\n        .then(() => {\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  const batch = db.batch();\r\n  const story = db.collection(\"stories\").doc(info.storyId).get();\r\n  const chapter = db.collection(\"chapters\").doc(info.chapterId).get();\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      message.success(\"Comment posted successfully\");\r\n      Promise.all([story, chapter]).then((res) => {\r\n        console.log(res);\r\n        batch.update(story, { commentsCount: res[0].data().commentsCount + 1 });\r\n        batch.update(chapter, {\r\n          commentsCount: res[1].data().commentsCount + 1,\r\n        });\r\n        batch.commit();\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id, chapid) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .get()\r\n    .then((chap) => {\r\n      db.collection(\"chapters\")\r\n        .doc(chapid)\r\n        .update({ commentsCount: chap.data().commentsCount - 1 })\r\n        .then(() => {\r\n          db.collection(\"comments\").doc(id).delete();\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}