{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_USER_CHARACTERS, GET_FAVORITE_CHARACTERS, ADD_CHARACTER, EDIT_CHARACTER, GET_CHARACTER, GET_STORY_CHARACTERS } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id) {\n  return function (dispatch) {\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          likesCount: 0,\n          likes: [],\n          dislikes: []\n        }));\n      }).then(function (res) {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: res.id,\n            loading: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        likes: [],\n        dislikes: []\n      })).then(function (res) {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: res.id,\n            loading: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url\n        }));\n      }).then(function () {\n        dispatch({\n          type: EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread({}, data)).then(function () {\n        dispatch({\n          type: EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["GET_USER_CHARACTERS","GET_FAVORITE_CHARACTERS","ADD_CHARACTER","EDIT_CHARACTER","GET_CHARACTER","GET_STORY_CHARACTERS","message","db","auth","storage","firebase","getCharacter","id","dispatch","collection","doc","get","then","exists","type","payload","character","data","charaExists","loading","addCharacter","imageName","firstname","toLowerCase","lastname","image","ref","currentUser","uid","put","child","getDownloadURL","url","add","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","success","characterId","err","error","editCharacter","loadingCharacter","update","getUserCharacters","userId","where","docs","items","forEach","getFavoriteCharacters","favArr","users","result","map","user","Promise","all","favUsers","getCharactersInStory","onSnapshot","secondaryCharacters","mainArr","mainCharacters"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_CHARACTERS,\r\n  GET_FAVORITE_CHARACTERS,\r\n  ADD_CHARACTER,\r\n  EDIT_CHARACTER,\r\n  GET_CHARACTER,\r\n  GET_STORY_CHARACTERS,\r\n} from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: GET_CHARACTER,\r\n          payload: {\r\n            character: { ...doc.data(), id: doc.id },\r\n            charaExists: true,\r\n            loading: false,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"characters\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          likes: [],\r\n          dislikes: [],\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        likes: [],\r\n        dislikes: [],\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}