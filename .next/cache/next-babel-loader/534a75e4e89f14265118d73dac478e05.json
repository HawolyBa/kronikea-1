{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    const newItems = items.map(item => {\n      let newItem = _objectSpread(_objectSpread({}, item), {}, {\n        categories: []\n      });\n\n      const categories = item.category.map(cat => {\n        const promises = db.collection(\"categories\").doc(cat).get().then(doc => {\n          return doc.data().name;\n        });\n      });\n      Promise.all(promises).then(categories => console.log(res));\n      console.log(categories);\n      return newItem;\n    }); // items.foreach((item) => {\n    //   item.category.forEach((cat) =>\n    //     db\n    //       .collection(\"categories\")\n    //       .doc(cat)\n    //       .get((doc) => (categories = [...categories, doc.data().name]))\n    //   );\n    //   newItems = [...newItems, { ...item, categories }];\n    // });\n    //console.log(newItems);\n\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","db","auth","getUserStories","dispatch","collection","where","currentUser","uid","get","then","docs","items","forEach","doc","id","data","newItems","map","item","newItem","categories","category","cat","promises","name","Promise","all","console","log","res","type","payload"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,aAAzB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAOC,QAAD,IAAc;AAChDH,EAAAA,EAAE,CAACI,UAAH,CAAc,SAAd,EACGC,KADH,CACS,UADT,EACqB,IADrB,EAC2BJ,IAAI,CAACK,WAAL,CAAiBC,GAD5C,EAEGC,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACd,QAAIC,KAAK,GAAG,EAAZ;AAEAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ;AAAaG,QAAAA,EAAE,EAAED,GAAG,CAACC;AAArB,SAA4BD,GAAG,CAACE,IAAJ,EAA5B,EAAR;AACD,KAFD;AAIA,WAAOJ,KAAP;AACD,GAXH,EAYGF,IAZH,CAYSE,KAAD,IAAW;AACf,UAAMK,QAAQ,GAAGL,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AACnC,UAAIC,OAAO,mCAAQD,IAAR;AAAcE,QAAAA,UAAU,EAAE;AAA1B,QAAX;;AACA,YAAMA,UAAU,GAAGF,IAAI,CAACG,QAAL,CAAcJ,GAAd,CAAmBK,GAAD,IAAS;AAC5C,cAAMC,QAAQ,GAAGvB,EAAE,CAChBI,UADc,CACH,YADG,EAEdS,GAFc,CAEVS,GAFU,EAGdd,GAHc,GAIdC,IAJc,CAIRI,GAAD,IAAS;AACb,iBAAOA,GAAG,CAACE,IAAJ,GAAWS,IAAlB;AACD,SANc,CAAjB;AAOD,OARkB,CAAnB;AASAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBd,IAAtB,CAA4BW,UAAD,IAAgBO,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAA3C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AACA,aAAOD,OAAP;AACD,KAdgB,CAAjB,CADe,CAiBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,WAAOR,KAAP;AACD,GAzCH,EA0CGF,IA1CH,CA0CSE,KAAD,IAAW;AACfR,IAAAA,QAAQ,CAAC;AAAE2B,MAAAA,IAAI,EAAE/B,gBAAR;AAA0BgC,MAAAA,OAAO,EAAEpB;AAAnC,KAAD,CAAR;AACD,GA5CH;AA6CD,CA9CM","sourcesContent":["import { GET_USER_STORIES } from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      const newItems = items.map((item) => {\r\n        let newItem = { ...item, categories: [] };\r\n        const categories = item.category.map((cat) => {\r\n          const promises = db\r\n            .collection(\"categories\")\r\n            .doc(cat)\r\n            .get()\r\n            .then((doc) => {\r\n              return doc.data().name;\r\n            });\r\n        });\r\n        Promise.all(promises).then((categories) => console.log(res));\r\n        console.log(categories);\r\n        return newItem;\r\n      });\r\n\r\n      // items.foreach((item) => {\r\n      //   item.category.forEach((cat) =>\r\n      //     db\r\n      //       .collection(\"categories\")\r\n      //       .doc(cat)\r\n      //       .get((doc) => (categories = [...categories, doc.data().name]))\r\n      //   );\r\n      //   newItems = [...newItems, { ...item, categories }];\r\n      // });\r\n\r\n      //console.log(newItems);\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}