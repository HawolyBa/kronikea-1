{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\n\nconst Comments = ({\n  comments,\n  auth,\n  commentBody,\n  setCommentBody,\n  submit,\n  responseBody,\n  setResponseBody\n}) => {\n  const [toggleCommentForm, setToggleCommentForm] = useState(false);\n  const [toggleAnswerForm, setToggleAnswerForm] = useState(false);\n  const [clickedForm, setClickedForm] = useState(\"\");\n  const [openReply, setOpenReply] = React.useState(false);\n  const topComments = comments.filter(comm => !comm.answer);\n  const responses = comments.filter(comm => comm.answer);\n  const allComments = topComments.map(comm => {\n    let res = [];\n    responses.forEach(response => {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n\n  const commentToggle = (id, e) => {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  const answerToggle = id => {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(comment => __jsx(React.Fragment, null, __jsx(Comment, {\n    key: comment.id,\n    actions: [__jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: () => setOpenReply(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 51\n      }\n    }, \"Delete\"), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 22\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, comment.responses.map(c => __jsx(Comment, {\n    key: c.id,\n    actions: [__jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: () => setOpenReply(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 55\n      }\n    }, \"Delete\"), auth.user && (auth.user.uid !== comment.userId)(__jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 23\n      }\n    }))],\n    author: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, c.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      src: c.userImage,\n      alt: c.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 26\n      }\n    }, c.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  })), clickedForm === answer.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, __jsx(Input.TextArea, {\n    value: responseBody,\n    onChange: e => setResponseBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${answer.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }))), clickedForm === comment.id && toggleCommentForm ? __jsx(Form, {\n    onSubmit: submitAnswer.bind(null, comment.id, comment.username, comment.userId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, __jsx(Input.TextArea, {\n    onInput: onChange,\n    name: \"content\",\n    placeholder: `@${comment.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  })), __jsx(Button, {\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 15\n    }\n  }, \"Submit\")) : null)));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Link","moment","Report","Comments","comments","auth","commentBody","setCommentBody","submit","responseBody","setResponseBody","toggleCommentForm","setToggleCommentForm","useState","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","openReply","setOpenReply","React","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","commentToggle","e","answerToggle","user","target","value","minRows","marginBottom","length","comment","userId","uid","username","userImage","content","createdAt","unix","seconds","format","fromNow","c","submitAnswer","bind","onChange"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  commentBody,\r\n  setCommentBody,\r\n  submit,\r\n  responseBody,\r\n  setResponseBody,\r\n}) => {\r\n  const [toggleCommentForm, setToggleCommentForm] = useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = useState(false);\r\n  const [clickedForm, setClickedForm] = useState(\"\");\r\n  const [openReply, setOpenReply] = React.useState(false);\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n\r\n  const commentToggle = (id, e) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <>\r\n          <Comment\r\n            key={comment.id}\r\n            actions={[\r\n              <span\r\n                key=\"comment-basic-reply-to\"\r\n                onClick={() => setOpenReply(true)}\r\n              >\r\n                Reply{\" \"}\r\n              </span>,\r\n              comment.userId === auth.user.uid && <span>Delete</span>,\r\n              auth.user && auth.user.uid !== comment.userId && (\r\n                <Report type=\"comment\" data={comment} />\r\n              ),\r\n            ]}\r\n            author={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>{comment.username}</a>\r\n              </Link>\r\n            }\r\n            avatar={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>\r\n                  <Avatar src={comment.userImage} alt={comment.username} />\r\n                </a>\r\n              </Link>\r\n            }\r\n            content={<p>{comment.content}</p>}\r\n            datetime={\r\n              <Tooltip\r\n                title={\r\n                  comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment\r\n                        .unix(comment.createdAt.seconds)\r\n                        .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                }\r\n              >\r\n                <span>\r\n                  {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                    : moment(comment.createdAt).fromNow()}\r\n                </span>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {comment.responses.map((c) => (\r\n              <Comment\r\n                key={c.id}\r\n                actions={[\r\n                  <span\r\n                    key=\"comment-basic-reply-to\"\r\n                    onClick={() => setOpenReply(true)}\r\n                  >\r\n                    Reply{\" \"}\r\n                  </span>,\r\n                  comment.userId === auth.user.uid && <span>Delete</span>,\r\n                  auth.user &&\r\n                    (auth.user.uid !== comment.userId)(\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                ]}\r\n                author={\r\n                  <Link href={`/profile/${c.userId}`}>\r\n                    <a>{c.username}</a>\r\n                  </Link>\r\n                }\r\n                avatar={\r\n                  <Link href={`/profile/${c.userId}`}>\r\n                    <a>\r\n                      <Avatar src={c.userImage} alt={c.username} />\r\n                    </a>\r\n                  </Link>\r\n                }\r\n                content={<p>{c.content}</p>}\r\n                datetime={\r\n                  <Tooltip\r\n                    title={\r\n                      comment.createdAt && typeof c.createdAt === \"object\"\r\n                        ? moment\r\n                            .unix(c.createdAt.seconds)\r\n                            .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                        : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    }\r\n                  >\r\n                    <span>\r\n                      {comment.createdAt && typeof c.createdAt === \"object\"\r\n                        ? moment.unix(c.createdAt.seconds).fromNow()\r\n                        : moment(c.createdAt).fromNow()}\r\n                    </span>\r\n                  </Tooltip>\r\n                }\r\n              />\r\n            ))}\r\n            {clickedForm === answer.id && toggleAnswerForm && (\r\n              <>\r\n                <Row>\r\n                  <Col md={24}>\r\n                    <Input.TextArea\r\n                      value={responseBody}\r\n                      onChange={(e) => setResponseBody(e.target.value)}\r\n                      autoSize={{ minRows: 5 }}\r\n                      showCount={true}\r\n                      maxLength={800}\r\n                      placeholder={`@${answer.username}`}\r\n                    ></Input.TextArea>\r\n                  </Col>\r\n                  <Col md={24}>\r\n                    <Button onClick={submit} type=\"primary\">\r\n                      Comment\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n                <Divider />\r\n              </>\r\n            )}\r\n          </Comment>\r\n\r\n          {clickedForm === comment.id && toggleCommentForm ? (\r\n            <Form\r\n              onSubmit={submitAnswer.bind(\r\n                null,\r\n                comment.id,\r\n                comment.username,\r\n                comment.userId\r\n              )}\r\n            >\r\n              <Form.Item>\r\n                <Input.TextArea\r\n                  onInput={onChange}\r\n                  name=\"content\"\r\n                  placeholder={`@${comment.username}`}\r\n                />\r\n              </Form.Item>\r\n              <Button htmlType=\"submit\">Submit</Button>\r\n            </Form>\r\n          ) : null}\r\n        </>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}