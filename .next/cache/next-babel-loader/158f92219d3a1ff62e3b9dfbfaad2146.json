{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_USER_STORIES } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport var getUserStories = function getUserStories() {\n  return function (dispatch) {\n    db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      var arr = [];\n      var newItems = items.map(function (item) {\n        var newItem = _objectSpread(_objectSpread({}, item), {}, {\n          categories: []\n        });\n\n        var categories = item.category.map(function (cat) {\n          return db.collection(\"categories\").doc(cat).get().then(function (doc) {\n            return doc.data().name;\n          });\n        });\n        Promise.all(categories).then(function (res) {\n          arr.push(_objectSpread(_objectSpread({}, newItem), {}, {\n            categories: res\n          }));\n        });\n        return newItem;\n      });\n      console.log(arr);\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","db","auth","getUserStories","dispatch","collection","where","currentUser","uid","get","then","docs","items","forEach","doc","id","data","arr","newItems","map","item","newItem","categories","category","cat","name","Promise","all","res","push","console","log","type","payload"],"mappings":";;;;;;;AAAA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,aAAzB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAM,UAACC,QAAD,EAAc;AAChDH,IAAAA,EAAE,CAACI,UAAH,CAAc,SAAd,EACGC,KADH,CACS,UADT,EACqB,IADrB,EAC2BJ,IAAI,CAACK,WAAL,CAAiBC,GAD5C,EAEGC,GAFH,GAGGC,IAHH,CAGQ,UAACC,IAAD,EAAU;AACd,UAAIC,KAAK,GAAG,EAAZ;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAa,UAACC,GAAD,EAAS;AACpBF,QAAAA,KAAK,gCAAOA,KAAP;AAAgBG,UAAAA,EAAE,EAAED,GAAG,CAACC;AAAxB,WAA+BD,GAAG,CAACE,IAAJ,EAA/B,GAAL;AACD,OAFD;AAGA,aAAOJ,KAAP;AACD,KATH,EAUGF,IAVH,CAUQ,UAACE,KAAD,EAAW;AACf,UAAIK,GAAG,GAAG,EAAV;AACA,UAAMC,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAU,UAACC,IAAD,EAAU;AACnC,YAAIC,OAAO,mCAAQD,IAAR;AAAcE,UAAAA,UAAU,EAAE;AAA1B,UAAX;;AACA,YAAMA,UAAU,GAAGF,IAAI,CAACG,QAAL,CAAcJ,GAAd,CAAkB,UAACK,GAAD,EAAS;AAC5C,iBAAOvB,EAAE,CACNI,UADI,CACO,YADP,EAEJS,GAFI,CAEAU,GAFA,EAGJf,GAHI,GAIJC,IAJI,CAIC,UAACI,GAAD,EAAS;AACb,mBAAOA,GAAG,CAACE,IAAJ,GAAWS,IAAlB;AACD,WANI,CAAP;AAOD,SARkB,CAAnB;AASAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAAwBZ,IAAxB,CAA6B,UAACkB,GAAD,EAAS;AACpCX,UAAAA,GAAG,CAACY,IAAJ,iCAAcR,OAAd;AAAuBC,YAAAA,UAAU,EAAEM;AAAnC;AACD,SAFD;AAIA,eAAOP,OAAP;AACD,OAhBgB,CAAjB;AAkBAS,MAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AACA,aAAOL,KAAP;AACD,KAhCH,EAiCGF,IAjCH,CAiCQ,UAACE,KAAD,EAAW;AACfR,MAAAA,QAAQ,CAAC;AAAE4B,QAAAA,IAAI,EAAEhC,gBAAR;AAA0BiC,QAAAA,OAAO,EAAErB;AAAnC,OAAD,CAAR;AACD,KAnCH;AAoCD,GArC6B;AAAA,CAAvB","sourcesContent":["import { GET_USER_STORIES } from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      let arr = [];\r\n      const newItems = items.map((item) => {\r\n        let newItem = { ...item, categories: [] };\r\n        const categories = item.category.map((cat) => {\r\n          return db\r\n            .collection(\"categories\")\r\n            .doc(cat)\r\n            .get()\r\n            .then((doc) => {\r\n              return doc.data().name;\r\n            });\r\n        });\r\n        Promise.all(categories).then((res) => {\r\n          arr.push({ ...newItem, categories: res });\r\n        });\r\n\r\n        return newItem;\r\n      });\r\n\r\n      console.log(arr);\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}