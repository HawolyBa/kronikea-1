{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Pagination.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Pagination as Paginate, Divider, PageHeader, Select, Form } from \"antd\";\nimport { StoriesGrid } from \"./Grid\";\n\nvar Pagination = function Pagination(_ref) {\n  _s();\n\n  var data = _ref.data,\n      xs = _ref.xs,\n      sm = _ref.sm,\n      lg = _ref.lg,\n      xl = _ref.xl,\n      md = _ref.md,\n      type = _ref.type,\n      gutter = _ref.gutter,\n      columnsCountBreakPoints = _ref.columnsCountBreakPoints,\n      itemType = _ref.itemType;\n\n  var _React$useState = React.useState({\n    currentPage: 1,\n    datasPerPage: 12\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pagination = _React$useState2[0],\n      setPagination = _React$useState2[1];\n\n  var currentPage = pagination.currentPage,\n      datasPerPage = pagination.datasPerPage;\n  var indexOfLastData = currentPage * datasPerPage;\n  var indexOfFirstData = indexOfLastData - datasPerPage;\n  var currentDatas = data.slice(indexOfFirstData, indexOfLastData);\n\n  var _React$useState3 = React.useState(\"date-asc\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      sortValue = _React$useState4[0],\n      setSortValue = _React$useState4[1];\n\n  var handleClick = function handleClick(e) {\n    return setPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n      currentPage: Number(e)\n    }));\n  };\n\n  var renderDatas = itemType === \"stories\" ? __jsx(StoriesGrid, {\n    gutter: gutter,\n    type: type,\n    stories: currentDatas,\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }) : null;\n  var pageNumbers = [];\n\n  for (var i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"ctrl-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: function showTotal(total, range) {\n      return \"\".concat(range[0], \"-\").concat(range[1], \" of \").concat(total, \" items\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    label: \"Sort by\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    value: sortValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(Select.Option, {\n    value: \"date-asc\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, \"by date(ascending)\"), __jsx(Select.Option, {\n    value: \"date-desc\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \"by date(descending)\"), __jsx(Select.Option, {\n    value: \"name-asc\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"by name (ascending)\"), __jsx(Select.Option, {\n    value: \"name-desc\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"by name (descending)\"))))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), renderDatas, __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: function showTotal(total, range) {\n      return \"\".concat(range[0], \"-\").concat(range[1], \" of \").concat(total, \" items\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Pagination, \"ExaL9wOBYF+/tustkIGhhFQSRG4=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Pagination.js"],"names":["React","Pagination","Paginate","Divider","PageHeader","Select","Form","StoriesGrid","data","xs","sm","lg","xl","md","type","gutter","columnsCountBreakPoints","itemType","useState","currentPage","datasPerPage","pagination","setPagination","indexOfLastData","indexOfFirstData","currentDatas","slice","sortValue","setSortValue","handleClick","e","Number","renderDatas","pageNumbers","i","Math","ceil","length","push","total","range"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Pagination as Paginate,\r\n  Divider,\r\n  PageHeader,\r\n  Select,\r\n  Form,\r\n} from \"antd\";\r\n\r\nimport { StoriesGrid } from \"./Grid\";\r\n\r\nconst Pagination = ({\r\n  data,\r\n  xs,\r\n  sm,\r\n  lg,\r\n  xl,\r\n  md,\r\n  type,\r\n  gutter,\r\n  columnsCountBreakPoints,\r\n  itemType,\r\n}) => {\r\n  const [pagination, setPagination] = React.useState({\r\n    currentPage: 1,\r\n    datasPerPage: 12,\r\n  });\r\n  const { currentPage, datasPerPage } = pagination;\r\n  const indexOfLastData = currentPage * datasPerPage;\r\n  const indexOfFirstData = indexOfLastData - datasPerPage;\r\n  const currentDatas = data.slice(indexOfFirstData, indexOfLastData);\r\n\r\n  const [sortValue, setSortValue] = React.useState(\"date-asc\");\r\n\r\n  const handleClick = (e) =>\r\n    setPagination({ ...pagination, currentPage: Number(e) });\r\n\r\n  const renderDatas =\r\n    itemType === \"stories\" ? (\r\n      <StoriesGrid\r\n        gutter={gutter}\r\n        type={type}\r\n        stories={currentDatas}\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n      />\r\n    ) : null;\r\n\r\n  let pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"ctrl-section\">\r\n        <Paginate\r\n          size=\"small\"\r\n          showQuickJumper\r\n          onChange={handleClick}\r\n          total={data.length}\r\n          pageSize={datasPerPage}\r\n          showTotal={(total, range) =>\r\n            `${range[0]}-${range[1]} of ${total} items`\r\n          }\r\n        />\r\n        <Form>\r\n          <Form.Item label=\"Sort by\">\r\n            <Select value={sortValue}>\r\n              <Select.Option value=\"date-asc\">by date(ascending)</Select.Option>\r\n              <Select.Option value=\"date-desc\">\r\n                by date(descending)\r\n              </Select.Option>\r\n              <Select.Option value=\"name-asc\">\r\n                by name (ascending)\r\n              </Select.Option>\r\n              <Select.Option value=\"name-desc\">\r\n                by name (descending)\r\n              </Select.Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n      <div></div>\r\n      <Divider />\r\n      {renderDatas}\r\n      <Divider />\r\n      <Paginate\r\n        size=\"small\"\r\n        showQuickJumper\r\n        onChange={handleClick}\r\n        total={data.length}\r\n        pageSize={datasPerPage}\r\n        showTotal={(total, range) =>\r\n          `${range[0]}-${range[1]} of ${total} items`\r\n        }\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}