{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Select.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Col, Popover, Select, Form } from \"antd\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\nconst {\n  Option\n} = Select;\n\nconst SelectGroup = ({\n  xs,\n  lg,\n  sm,\n  md,\n  name,\n  options,\n  info,\n  value,\n  onChangeFunc,\n  storyInfo,\n  type\n}) => {\n  return __jsx(Col, {\n    xs: xs,\n    sm: sm,\n    md: md,\n    lg: lg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    required: true,\n    label: info ? __jsx(React.Fragment, null, capitalizeFirstLetter(name), __jsx(Popover, {\n      title: info,\n      trigger: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }\n    }, __jsx(\"ion-icon\", {\n      name: \"information-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }))) : capitalizeFirstLetter(name),\n    colon: false,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"genre\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }), type === \"multiple\" ? __jsx(Select, {\n    mode: \"multiple\",\n    allowClear: true,\n    style: {\n      width: \"100%\"\n    },\n    placeholder: \"Please select\",\n    value: value,\n    onChange: val => onChangeFunc(_objectSpread(_objectSpread({}, storyInfo), {}, {\n      [name]: val\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, options === null || options === void 0 ? void 0 : options.sort((a, b) => {\n    const keyA = a.name,\n          keyB = b.name; // Compare the 2 dates\n\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  }).map(option => __jsx(Option, {\n    style: {\n      textTransform: \"capitalize\"\n    },\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }, option.name))) : __jsx(Select, {\n    allowClear: true,\n    style: {\n      width: \"100%\"\n    },\n    placeholder: \"Please select\",\n    value: value,\n    onChange: val => onChangeFunc(_objectSpread(_objectSpread({}, storyInfo), {}, {\n      [name]: val\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, options === null || options === void 0 ? void 0 : options.sort((a, b) => {\n    const keyA = a.name,\n          keyB = b.name; // Compare the 2 dates\n\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  }).map(option => __jsx(Option, {\n    style: {\n      textTransform: \"capitalize\"\n    },\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, option.name))))));\n};\n\nexport default SelectGroup;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Select.js"],"names":["Col","Popover","Select","Form","capitalizeFirstLetter","Option","SelectGroup","xs","lg","sm","md","name","options","info","value","onChangeFunc","storyInfo","type","width","val","sort","a","b","keyA","keyB","map","option","textTransform"],"mappings":"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","sourcesContent":["import { Col, Popover, Select, Form } from \"antd\";\r\n\r\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SelectGroup = ({\r\n  xs,\r\n  lg,\r\n  sm,\r\n  md,\r\n  name,\r\n  options,\r\n  info,\r\n  value,\r\n  onChangeFunc,\r\n  storyInfo,\r\n  type,\r\n}) => {\r\n  return (\r\n    <Col xs={xs} sm={sm} md={md} lg={lg}>\r\n      <Form.Item\r\n        required\r\n        label={\r\n          info ? (\r\n            <>\r\n              {capitalizeFirstLetter(name)}\r\n              <Popover title={info} trigger=\"click\">\r\n                <ion-icon name=\"information-circle\"></ion-icon>\r\n              </Popover>\r\n            </>\r\n          ) : (\r\n            capitalizeFirstLetter(name)\r\n          )\r\n        }\r\n        colon={false}\r\n        name={name}\r\n      >\r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"genre\"></label>\r\n          {type === \"multiple\" ? (\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={value}\r\n              onChange={(val) => onChangeFunc({ ...storyInfo, [name]: val })}\r\n            >\r\n              {options\r\n                ?.sort((a, b) => {\r\n                  const keyA = a.name,\r\n                    keyB = b.name;\r\n                  // Compare the 2 dates\r\n                  if (keyA < keyB) return -1;\r\n                  if (keyA > keyB) return 1;\r\n                  return 0;\r\n                })\r\n                .map((option) => (\r\n                  <Option\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                    key={option.value}\r\n                    value={option.value}\r\n                  >\r\n                    {option.name}\r\n                  </Option>\r\n                ))}\r\n            </Select>\r\n          ) : (\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={value}\r\n              onChange={(val) => onChangeFunc({ ...storyInfo, [name]: val })}\r\n            >\r\n              {options\r\n                ?.sort((a, b) => {\r\n                  const keyA = a.name,\r\n                    keyB = b.name;\r\n                  // Compare the 2 dates\r\n                  if (keyA < keyB) return -1;\r\n                  if (keyA > keyB) return 1;\r\n                  return 0;\r\n                })\r\n                .map((option) => (\r\n                  <Option\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                    key={option.value}\r\n                    value={option.value}\r\n                  >\r\n                    {option.name}\r\n                  </Option>\r\n                ))}\r\n            </Select>\r\n          )}\r\n        </div>\r\n      </Form.Item>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default SelectGroup;\r\n"]},"metadata":{},"sourceType":"module"}