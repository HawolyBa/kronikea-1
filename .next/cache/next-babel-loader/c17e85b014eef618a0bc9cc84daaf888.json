{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\character\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\nimport { dummy } from \"../../utils/dummy\";\nimport LoadingScreen from \"../hoc/LoadingScreen\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comments = _ref.comments,\n      auth = _ref.auth,\n      submit = _ref.submit,\n      character = _ref.character,\n      loadingComments = _ref.loadingComments,\n      deleteComment = _ref.deleteComment,\n      alreadyPosted = _ref.alreadyPosted,\n      userComment = _ref.userComment;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      content = _React$useState4[0],\n      setContent = _React$useState4[1];\n\n  var submitComment = function submitComment(e) {\n    e.preventDefault();\n    submit({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      content: content,\n      characterId: character.id,\n      authorId: character.authorId,\n      answer: false\n    }, alreadyPosted);\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  var closeModal = function closeModal() {\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"character-feedback\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"feedback-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"side-heading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Feedback\"), !alreadyPosted && __jsx(\"div\", {\n    className: \"add-comment\",\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, __jsx(\"ion-icon\", {\n    name: \"add-circle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, \"Leave a comment\"))), __jsx(LoadingScreen, {\n    loading: loadingComments,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"comments-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, userComment && __jsx(Comment, {\n    actions: [// auth && auth.user && (\n    //   <span\n    //     key=\"comment-basic-reply-to\"\n    //     onClick={commentToggle.bind(null, comment.id)}\n    //   >\n    //     Reply{\" \"}\n    //   </span>\n    // ),\n    userComment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: function onConfirm() {\n        return deleteComment(userComment.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== userComment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: userComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    })],\n    author: __jsx(Link, {\n      href: \"/profile/\".concat(userComment.userId),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, userComment.username)),\n    avatar: __jsx(Link, {\n      href: \"/profile/\".concat(userComment.userId),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      src: userComment.userImage ? userComment.userImage : dummy.avatar,\n      alt: userComment.username,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 26\n      }\n    }, userComment.content),\n    datetime: __jsx(Tooltip, {\n      title: userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(userComment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).fromNow() : moment(userComment.createdAt).fromNow())),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), comments && comments.map(function (comment) {\n    return __jsx(Comment, {\n      key: comment.id,\n      actions: [// auth && auth.user && (\n      //   <span\n      //     key=\"comment-basic-reply-to\"\n      //     onClick={commentToggle.bind(null, comment.id)}\n      //   >\n      //     Reply{\" \"}\n      //   </span>\n      // ),\n      comment.userId === auth.user.uid && __jsx(Popconfirm, {\n        title: \"Do you want to delete this comment ?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: function onConfirm() {\n          return deleteComment(comment.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 23\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n        type: \"comment\",\n        data: comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 23\n        }\n      })],\n      author: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 23\n        }\n      }, comment.username)),\n      avatar: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        src: comment.userImage ? comment.userImage : dummy.avatar,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }\n      }))),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 28\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 23\n        }\n      }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    });\n  })))), __jsx(Modal, {\n    title: \"Leave a new comment\",\n    visible: visible,\n    onCancel: closeModal,\n    okText: \"Submit\",\n    onOk: submitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 5,\n    value: content,\n    onChange: function onChange(e) {\n      return setContent(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(Comments, \"hGlOKuJVQcb+FgScMtu04+/z0ns=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/character/Comments.js"],"names":["React","Link","moment","Input","Modal","Comment","Tooltip","Popconfirm","Avatar","dummy","LoadingScreen","Comments","comments","auth","submit","character","loadingComments","deleteComment","alreadyPosted","userComment","useState","visible","setVisible","content","setContent","submitComment","e","preventDefault","userId","user","uid","username","characterId","id","authorId","answer","closeModal","userImage","avatar","createdAt","unix","seconds","format","fromNow","map","comment","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\r\n\r\nimport { dummy } from \"../../utils/dummy\";\r\nimport LoadingScreen from \"../hoc/LoadingScreen\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  submit,\r\n  character,\r\n  loadingComments,\r\n  deleteComment,\r\n  alreadyPosted,\r\n  userComment,\r\n}) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [content, setContent] = React.useState(\"\");\r\n\r\n  const submitComment = (e) => {\r\n    e.preventDefault();\r\n    submit(\r\n      {\r\n        userId: auth.user.uid,\r\n        username: auth.user.username,\r\n        content,\r\n        characterId: character.id,\r\n        authorId: character.authorId,\r\n        answer: false,\r\n      },\r\n      alreadyPosted\r\n    );\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"character-feedback\">\r\n        <header className=\"feedback-header\">\r\n          <h3 className=\"side-heading\">Feedback</h3>\r\n          {!alreadyPosted && (\r\n            <div className=\"add-comment\" onClick={() => setVisible(true)}>\r\n              <ion-icon name=\"add-circle\"></ion-icon>\r\n              <span>Leave a comment</span>\r\n            </div>\r\n          )}\r\n        </header>\r\n        <LoadingScreen loading={loadingComments}>\r\n          <div className=\"comments-block\">\r\n            {userComment && (\r\n              <Comment\r\n                actions={[\r\n                  // auth && auth.user && (\r\n                  //   <span\r\n                  //     key=\"comment-basic-reply-to\"\r\n                  //     onClick={commentToggle.bind(null, comment.id)}\r\n                  //   >\r\n                  //     Reply{\" \"}\r\n                  //   </span>\r\n                  // ),\r\n                  userComment.userId === auth.user.uid && (\r\n                    <Popconfirm\r\n                      title=\"Do you want to delete this comment ?\"\r\n                      okText=\"Yes\"\r\n                      cancelText=\"No\"\r\n                      onConfirm={() => deleteComment(userComment.id)}\r\n                    >\r\n                      <span>Delete</span>\r\n                    </Popconfirm>\r\n                  ),\r\n                  auth.user && auth.user.uid !== userComment.userId && (\r\n                    <Report type=\"comment\" data={userComment} />\r\n                  ),\r\n                ]}\r\n                author={\r\n                  <Link href={`/profile/${userComment.userId}`}>\r\n                    <a>{userComment.username}</a>\r\n                  </Link>\r\n                }\r\n                avatar={\r\n                  <Link href={`/profile/${userComment.userId}`}>\r\n                    <a>\r\n                      <Avatar\r\n                        src={\r\n                          userComment.userImage\r\n                            ? userComment.userImage\r\n                            : dummy.avatar\r\n                        }\r\n                        alt={userComment.username}\r\n                      />\r\n                    </a>\r\n                  </Link>\r\n                }\r\n                content={<p>{userComment.content}</p>}\r\n                datetime={\r\n                  <Tooltip\r\n                    title={\r\n                      userComment.createdAt &&\r\n                      typeof userComment.createdAt === \"object\"\r\n                        ? moment\r\n                            .unix(userComment.createdAt.seconds)\r\n                            .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                        : moment(userComment.createdAt).format(\r\n                            \"YYYY-MM-DD HH:mm:ss\"\r\n                          )\r\n                    }\r\n                  >\r\n                    <span>\r\n                      {userComment.createdAt &&\r\n                      typeof userComment.createdAt === \"object\"\r\n                        ? moment.unix(userComment.createdAt.seconds).fromNow()\r\n                        : moment(userComment.createdAt).fromNow()}\r\n                    </span>\r\n                  </Tooltip>\r\n                }\r\n              />\r\n            )}\r\n            {comments &&\r\n              comments.map((comment) => (\r\n                <Comment\r\n                  key={comment.id}\r\n                  actions={[\r\n                    // auth && auth.user && (\r\n                    //   <span\r\n                    //     key=\"comment-basic-reply-to\"\r\n                    //     onClick={commentToggle.bind(null, comment.id)}\r\n                    //   >\r\n                    //     Reply{\" \"}\r\n                    //   </span>\r\n                    // ),\r\n                    comment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(comment.id)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user && auth.user.uid !== comment.userId && (\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>{comment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            comment.userImage ? comment.userImage : dummy.avatar\r\n                          }\r\n                          alt={comment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{comment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(comment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(comment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                          : moment(comment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              ))}\r\n          </div>\r\n        </LoadingScreen>\r\n      </section>\r\n      <Modal\r\n        title={\"Leave a new comment\"}\r\n        visible={visible}\r\n        onCancel={closeModal}\r\n        okText=\"Submit\"\r\n        onOk={submitComment}\r\n      >\r\n        <Input.TextArea\r\n          rows={5}\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        ></Input.TextArea>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}