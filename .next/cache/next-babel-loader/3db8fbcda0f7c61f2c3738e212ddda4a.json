{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\character\\\\Comments.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\nimport { dummy } from \"../../utils/dummy\";\nimport LoadingScreen from \"../hoc/LoadingScreen\";\n\nconst Comments = ({\n  comments,\n  auth,\n  submit,\n  character,\n  loadingComments,\n  deleteComment\n}) => {\n  const [visible, setVisible] = React.useState(false);\n  const [content, setContent] = React.useState(\"\");\n  const commentIds = comments.map(c => c.userId);\n\n  const submitComment = e => {\n    e.preventDefault();\n    submit({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      content,\n      characterId: character.id,\n      authorId: character.authorId,\n      answer: false\n    }, commentIds);\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const closeModal = () => {\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"character-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"feedback-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Feedback\"), __jsx(\"div\", {\n    className: \"add-comment\",\n    onClick: () => setVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"ion-icon\", {\n    name: \"add-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Leave a comment\"))), __jsx(LoadingScreen, {\n    loading: loadingComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"comments-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, comments && comments.map(comment => __jsx(Comment, {\n    key: comment.id,\n    actions: [// auth && auth.user && (\n    //   <span\n    //     key=\"comment-basic-reply-to\"\n    //     onClick={commentToggle.bind(null, comment.id)}\n    //   >\n    //     Reply{\" \"}\n    //   </span>\n    // ),\n    comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(comment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage ? comment.userImage : dummy.avatar,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 28\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }))))), __jsx(Modal, {\n    title: \"Leave a new comment\",\n    visible: visible,\n    onCancel: closeModal,\n    okText: \"Submit\",\n    onOk: submitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 5,\n    value: content,\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/character/Comments.js"],"names":["React","Link","moment","Input","Modal","Comment","Tooltip","Popconfirm","Avatar","dummy","LoadingScreen","Comments","comments","auth","submit","character","loadingComments","deleteComment","visible","setVisible","useState","content","setContent","commentIds","map","c","userId","submitComment","e","preventDefault","user","uid","username","characterId","id","authorId","answer","closeModal","comment","userImage","avatar","createdAt","unix","seconds","format","fromNow","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\r\n\r\nimport { dummy } from \"../../utils/dummy\";\r\nimport LoadingScreen from \"../hoc/LoadingScreen\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  submit,\r\n  character,\r\n  loadingComments,\r\n  deleteComment,\r\n}) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [content, setContent] = React.useState(\"\");\r\n\r\n  const commentIds = comments.map((c) => c.userId);\r\n\r\n  const submitComment = (e) => {\r\n    e.preventDefault();\r\n    submit(\r\n      {\r\n        userId: auth.user.uid,\r\n        username: auth.user.username,\r\n        content,\r\n        characterId: character.id,\r\n        authorId: character.authorId,\r\n        answer: false,\r\n      },\r\n      commentIds\r\n    );\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"character-feedback\">\r\n        <header className=\"feedback-header\">\r\n          <h3 className=\"side-heading\">Feedback</h3>\r\n          <div className=\"add-comment\" onClick={() => setVisible(true)}>\r\n            <ion-icon name=\"add-circle\"></ion-icon>\r\n            <span>Leave a comment</span>\r\n          </div>\r\n        </header>\r\n        <LoadingScreen loading={loadingComments}>\r\n          <div className=\"comments-block\">\r\n            {comments &&\r\n              comments.map((comment) => (\r\n                <Comment\r\n                  key={comment.id}\r\n                  actions={[\r\n                    // auth && auth.user && (\r\n                    //   <span\r\n                    //     key=\"comment-basic-reply-to\"\r\n                    //     onClick={commentToggle.bind(null, comment.id)}\r\n                    //   >\r\n                    //     Reply{\" \"}\r\n                    //   </span>\r\n                    // ),\r\n                    comment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(comment.id)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user && auth.user.uid !== comment.userId && (\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>{comment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            comment.userImage ? comment.userImage : dummy.avatar\r\n                          }\r\n                          alt={comment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{comment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(comment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(comment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                          : moment(comment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              ))}\r\n          </div>\r\n        </LoadingScreen>\r\n      </section>\r\n      <Modal\r\n        title={\"Leave a new comment\"}\r\n        visible={visible}\r\n        onCancel={closeModal}\r\n        okText=\"Submit\"\r\n        onOk={submitComment}\r\n      >\r\n        <Input.TextArea\r\n          rows={5}\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        ></Input.TextArea>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}