{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\forms\\\\Relatives.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, Select, Input, Divider } from \"antd\";\nimport CharacterCard, { CharacterGrid } from \"../common/CharacterCard\";\nconst {\n  Option\n} = Select;\n\nconst Relatives = ({\n  character,\n  characters,\n  form\n}) => {\n  const relatives = character.relatives.map(c => _objectSpread(_objectSpread({}, characters.find(char => char.id === c.character)), {}, {\n    relation: c.relation\n  }));\n  const [relations, setRelations] = React.useState(character ? character.relatives : []);\n  const [currentChar, setCurrentChar] = React.useState(\"\");\n  const [currentRel, setCurrentRel] = React.useState(\"\");\n  const [selectedCharacters, setSelectedCharacters] = React.useState(character ? relatives : []);\n  const [selectedArr, setSelectedArr] = React.useState(character ? character.relatives.map(c => c.character) : []);\n  const [showErrorRel, setShowErrorRel] = React.useState(false);\n  const [showErrorChar, setShowErrorChar] = React.useState(false);\n\n  const addRelation = () => {\n    let newRelations = [...relations];\n\n    if (currentChar && currentRel) {\n      newRelations = [...newRelations, {\n        character: currentChar,\n        relation: currentRel\n      }];\n      setSelectedCharacters([...selectedCharacters, _objectSpread(_objectSpread({}, characters.find(c => c.id === currentChar)), {}, {\n        relation: currentRel\n      })]);\n      setSelectedArr([...selectedArr, currentChar]);\n      form.setFieldsValue({\n        relatives: newRelations\n      });\n      setRelations(newRelations);\n      setCurrentChar(\"\");\n      setCurrentRel(\"\");\n      setShowErrorChar(false);\n      setShowErrorRel(false);\n    }\n\n    if (!currentRel) {\n      setShowErrorRel(true);\n    }\n\n    if (!currentChar) {\n      setShowErrorChar(true);\n    }\n  };\n\n  console.log(character.relatives.map(c => _objectSpread(_objectSpread({}, characters.find(char => char.id === c.character)), {}, {\n    relation: c.relation\n  })));\n\n  const removeCharacter = id => {\n    setSelectedCharacters(selectedCharacters.filter(c => c.id !== id));\n    setSelectedArr(selectedArr.filter(c => c !== id));\n    setRelations(relations.filter(c => c.character !== id));\n    form.setFieldsValue({\n      relatives: relations.filter(c => c.character !== id)\n    });\n  };\n\n  return __jsx(Form.Item, {\n    name: \"relatives\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Relationships\"), __jsx(Row, {\n    gutter: [24, 12],\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: 11,\n    sm: 24,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    label: \"Select a character\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    value: currentChar,\n    onChange: val => setCurrentChar(val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Option, {\n    value: \"none\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Select a character\"), characters === null || characters === void 0 ? void 0 : characters.filter(c => !selectedArr.includes(c.id)).map(c => __jsx(Option, {\n    key: c.id,\n    value: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, `${c.firstname} ${c.lastname}`))), showErrorChar && __jsx(\"div\", {\n    className: \"ant-form-item-explain ant-form-item-explain-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"A character is required\")))), __jsx(Col, {\n    md: 11,\n    sm: 21,\n    xs: 21,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    label: \"Type of relationship\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    value: currentRel,\n    onChange: e => setCurrentRel(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), showErrorRel && __jsx(\"div\", {\n    className: \"ant-form-item-explain ant-form-item-explain-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"A type of relationship is required\")))), __jsx(Col, {\n    md: 2,\n    xs: 3,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"select-add-input-iconbox\",\n    onClick: addRelation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"+\")))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, selectedCharacters === null || selectedCharacters === void 0 ? void 0 : selectedCharacters.map(rel => __jsx(Col, {\n    lg: 4,\n    md: 8,\n    sm: 12,\n    xs: 24,\n    key: rel.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, __jsx(CharacterCard, {\n    removeCharacter: removeCharacter,\n    type: \"add\",\n    character: rel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Relatives;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/forms/Relatives.js"],"names":["Row","Col","Form","Select","Input","Divider","CharacterCard","CharacterGrid","Option","Relatives","character","characters","form","relatives","map","c","find","char","id","relation","relations","setRelations","React","useState","currentChar","setCurrentChar","currentRel","setCurrentRel","selectedCharacters","setSelectedCharacters","selectedArr","setSelectedArr","showErrorRel","setShowErrorRel","showErrorChar","setShowErrorChar","addRelation","newRelations","setFieldsValue","console","log","removeCharacter","filter","val","includes","firstname","lastname","e","target","value","rel"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,OAAxC,QAAuD,MAAvD;AAEA,OAAOC,aAAP,IAAwBC,aAAxB,QAA6C,yBAA7C;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaL,MAAnB;;AAEA,MAAMM,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAD,KAAqC;AACrD,QAAMC,SAAS,GAAGH,SAAS,CAACG,SAAV,CAAoBC,GAApB,CAAyBC,CAAD,oCACrCJ,UAAU,CAACK,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYH,CAAC,CAACL,SAAxC,CADqC;AAExCS,IAAAA,QAAQ,EAAEJ,CAAC,CAACI;AAF4B,IAAxB,CAAlB;AAIA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,KAAK,CAACC,QAAN,CAChCb,SAAS,GAAGA,SAAS,CAACG,SAAb,GAAyB,EADF,CAAlC;AAGA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCH,KAAK,CAACC,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BL,KAAK,CAACC,QAAN,CAAe,EAAf,CAApC;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CP,KAAK,CAACC,QAAN,CAClDb,SAAS,GAAGG,SAAH,GAAe,EAD0B,CAApD;AAGA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgCT,KAAK,CAACC,QAAN,CACpCb,SAAS,GAAGA,SAAS,CAACG,SAAV,CAAoBC,GAApB,CAAyBC,CAAD,IAAOA,CAAC,CAACL,SAAjC,CAAH,GAAiD,EADtB,CAAtC;AAGA,QAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCX,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxC;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCb,KAAK,CAACC,QAAN,CAAe,KAAf,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAIC,YAAY,GAAG,CAAC,GAAGjB,SAAJ,CAAnB;;AACA,QAAII,WAAW,IAAIE,UAAnB,EAA+B;AAC7BW,MAAAA,YAAY,GAAG,CACb,GAAGA,YADU,EAEb;AAAE3B,QAAAA,SAAS,EAAEc,WAAb;AAA0BL,QAAAA,QAAQ,EAAEO;AAApC,OAFa,CAAf;AAIAG,MAAAA,qBAAqB,CAAC,CACpB,GAAGD,kBADiB,kCAGfjB,UAAU,CAACK,IAAX,CAAiBD,CAAD,IAAOA,CAAC,CAACG,EAAF,KAASM,WAAhC,CAHe;AAIlBL,QAAAA,QAAQ,EAAEO;AAJQ,SAAD,CAArB;AAOAK,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBN,WAAjB,CAAD,CAAd;AACAZ,MAAAA,IAAI,CAAC0B,cAAL,CAAoB;AAAEzB,QAAAA,SAAS,EAAEwB;AAAb,OAApB;AACAhB,MAAAA,YAAY,CAACgB,YAAD,CAAZ;AACAZ,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAQ,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAF,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;;AAED,QAAI,CAACP,UAAL,EAAiB;AACfO,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,QAAI,CAACT,WAAL,EAAkB;AAChBW,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GA9BD;;AAgCAI,EAAAA,OAAO,CAACC,GAAR,CACE9B,SAAS,CAACG,SAAV,CAAoBC,GAApB,CAAyBC,CAAD,oCACnBJ,UAAU,CAACK,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYH,CAAC,CAACL,SAAxC,CADmB;AAEtBS,IAAAA,QAAQ,EAAEJ,CAAC,CAACI;AAFU,IAAxB,CADF;;AAOA,QAAMsB,eAAe,GAAIvB,EAAD,IAAQ;AAC9BW,IAAAA,qBAAqB,CAACD,kBAAkB,CAACc,MAAnB,CAA2B3B,CAAD,IAAOA,CAAC,CAACG,EAAF,KAASA,EAA1C,CAAD,CAArB;AACAa,IAAAA,cAAc,CAACD,WAAW,CAACY,MAAZ,CAAoB3B,CAAD,IAAOA,CAAC,KAAKG,EAAhC,CAAD,CAAd;AACAG,IAAAA,YAAY,CAACD,SAAS,CAACsB,MAAV,CAAkB3B,CAAD,IAAOA,CAAC,CAACL,SAAF,KAAgBQ,EAAxC,CAAD,CAAZ;AACAN,IAAAA,IAAI,CAAC0B,cAAL,CAAoB;AAClBzB,MAAAA,SAAS,EAAEO,SAAS,CAACsB,MAAV,CAAkB3B,CAAD,IAAOA,CAAC,CAACL,SAAF,KAAgBQ,EAAxC;AADO,KAApB;AAGD,GAPD;;AASA,SACE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,IAAI,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAuB,IAAA,KAAK,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEM,WAAf;AAA4B,IAAA,QAAQ,EAAGmB,GAAD,IAASlB,cAAc,CAACkB,GAAD,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,QAAQ,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAIGhC,UAJH,aAIGA,UAJH,uBAIGA,UAAU,CACP+B,MADH,CACW3B,CAAD,IAAO,CAACe,WAAW,CAACc,QAAZ,CAAqB7B,CAAC,CAACG,EAAvB,CADlB,EAEEJ,GAFF,CAEOC,CAAD,IACH,MAAC,MAAD;AACE,IAAA,GAAG,EAAEA,CAAC,CAACG,EADT;AAEE,IAAA,KAAK,EAAEH,CAAC,CAACG,EAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGG,GAAEH,CAAC,CAAC8B,SAAU,IAAG9B,CAAC,CAAC+B,QAAS,EAH/B,CAHH,CAJH,CADF,EAcGZ,aAAa,IACZ;AAAK,IAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CAfJ,CADF,CADF,EAuBE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAER,UADT;AAEE,IAAA,QAAQ,EAAGqB,CAAD,IAAOpB,aAAa,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKGjB,YAAY,IACX;AAAK,IAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADF,CANJ,CADF,CAvBF,EAoCE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,CAAhB;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAA0C,IAAA,OAAO,EAAEI,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF,CApCF,CAFF,EA4CE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CF,EA6CE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,kBADH,aACGA,kBADH,uBACGA,kBAAkB,CAAEd,GAApB,CAAyBoC,GAAD,IACvB,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,CAAhB;AAAmB,IAAA,EAAE,EAAE,EAAvB;AAA2B,IAAA,EAAE,EAAE,EAA/B;AAAmC,IAAA,GAAG,EAAEA,GAAG,CAAChC,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,eAAe,EAAEuB,eADnB;AAEE,IAAA,IAAI,EAAC,KAFP;AAGE,IAAA,SAAS,EAAES,GAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CADH,CA7CF,CADF;AA2DD,CA9HD;;AAgIA,eAAezC,SAAf","sourcesContent":["import { Row, Col, Form, Select, Input, Divider } from \"antd\";\r\n\r\nimport CharacterCard, { CharacterGrid } from \"../common/CharacterCard\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Relatives = ({ character, characters, form }) => {\r\n  const relatives = character.relatives.map((c) => ({\r\n    ...characters.find((char) => char.id === c.character),\r\n    relation: c.relation,\r\n  }));\r\n  const [relations, setRelations] = React.useState(\r\n    character ? character.relatives : []\r\n  );\r\n  const [currentChar, setCurrentChar] = React.useState(\"\");\r\n  const [currentRel, setCurrentRel] = React.useState(\"\");\r\n  const [selectedCharacters, setSelectedCharacters] = React.useState(\r\n    character ? relatives : []\r\n  );\r\n  const [selectedArr, setSelectedArr] = React.useState(\r\n    character ? character.relatives.map((c) => c.character) : []\r\n  );\r\n  const [showErrorRel, setShowErrorRel] = React.useState(false);\r\n  const [showErrorChar, setShowErrorChar] = React.useState(false);\r\n\r\n  const addRelation = () => {\r\n    let newRelations = [...relations];\r\n    if (currentChar && currentRel) {\r\n      newRelations = [\r\n        ...newRelations,\r\n        { character: currentChar, relation: currentRel },\r\n      ];\r\n      setSelectedCharacters([\r\n        ...selectedCharacters,\r\n        {\r\n          ...characters.find((c) => c.id === currentChar),\r\n          relation: currentRel,\r\n        },\r\n      ]);\r\n      setSelectedArr([...selectedArr, currentChar]);\r\n      form.setFieldsValue({ relatives: newRelations });\r\n      setRelations(newRelations);\r\n      setCurrentChar(\"\");\r\n      setCurrentRel(\"\");\r\n      setShowErrorChar(false);\r\n      setShowErrorRel(false);\r\n    }\r\n\r\n    if (!currentRel) {\r\n      setShowErrorRel(true);\r\n    }\r\n\r\n    if (!currentChar) {\r\n      setShowErrorChar(true);\r\n    }\r\n  };\r\n\r\n  console.log(\r\n    character.relatives.map((c) => ({\r\n      ...characters.find((char) => char.id === c.character),\r\n      relation: c.relation,\r\n    }))\r\n  );\r\n\r\n  const removeCharacter = (id) => {\r\n    setSelectedCharacters(selectedCharacters.filter((c) => c.id !== id));\r\n    setSelectedArr(selectedArr.filter((c) => c !== id));\r\n    setRelations(relations.filter((c) => c.character !== id));\r\n    form.setFieldsValue({\r\n      relatives: relations.filter((c) => c.character !== id),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form.Item name=\"relatives\">\r\n      <h3>Relationships</h3>\r\n      <Row gutter={[24, 12]} align=\"center\">\r\n        <Col md={11} sm={24} xs={24}>\r\n          <Form.Item label=\"Select a character\">\r\n            <Select value={currentChar} onChange={(val) => setCurrentChar(val)}>\r\n              <Option value=\"none\" disabled>\r\n                Select a character\r\n              </Option>\r\n              {characters\r\n                ?.filter((c) => !selectedArr.includes(c.id))\r\n                .map((c) => (\r\n                  <Option\r\n                    key={c.id}\r\n                    value={c.id}\r\n                  >{`${c.firstname} ${c.lastname}`}</Option>\r\n                ))}\r\n            </Select>\r\n            {showErrorChar && (\r\n              <div className=\"ant-form-item-explain ant-form-item-explain-error\">\r\n                <div role=\"alert\">A character is required</div>\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={11} sm={21} xs={21}>\r\n          <Form.Item label=\"Type of relationship\">\r\n            <Input\r\n              value={currentRel}\r\n              onChange={(e) => setCurrentRel(e.target.value)}\r\n            />\r\n            {showErrorRel && (\r\n              <div className=\"ant-form-item-explain ant-form-item-explain-error\">\r\n                <div role=\"alert\">A type of relationship is required</div>\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={2} xs={3} sm={3}>\r\n          <div className=\"select-add-input-iconbox\" onClick={addRelation}>\r\n            <span>+</span>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n      <Row gutter={[16, 16]}>\r\n        {selectedCharacters?.map((rel) => (\r\n          <Col lg={4} md={8} sm={12} xs={24} key={rel.id}>\r\n            <CharacterCard\r\n              removeCharacter={removeCharacter}\r\n              type=\"add\"\r\n              character={rel}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default Relatives;\r\n"]},"metadata":{},"sourceType":"module"}