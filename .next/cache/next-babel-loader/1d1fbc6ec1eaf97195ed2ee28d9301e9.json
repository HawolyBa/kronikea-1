{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col, Popconfirm } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comments = _ref.comments,\n      auth = _ref.auth,\n      commentBody = _ref.commentBody,\n      setCommentBody = _ref.setCommentBody,\n      submit = _ref.submit,\n      responseBody = _ref.responseBody,\n      setResponseBody = _ref.setResponseBody,\n      deleteComment = _ref.deleteComment,\n      chapid = _ref.chapid;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      toggleCommentForm = _React$useState2[0],\n      setToggleCommentForm = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      toggleAnswerForm = _React$useState4[0],\n      setToggleAnswerForm = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      clickedForm = _React$useState6[0],\n      setClickedForm = _React$useState6[1];\n\n  var topComments = comments.filter(function (comm) {\n    return !comm.answer;\n  });\n  var responses = comments.filter(function (comm) {\n    return comm.answer;\n  });\n  var allComments = topComments.map(function (comm) {\n    var res = [];\n    responses.forEach(function (response) {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n\n  var commentToggle = function commentToggle(id) {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  var answerToggle = function answerToggle(id) {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  var deleteFunc = function deleteFunc(id) {\n    deleteComment(id, chapid);\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: function onChange(e) {\n      return setCommentBody(e.target.value);\n    },\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(function (comment) {\n    return __jsx(React.Fragment, null, __jsx(Comment, {\n      key: comment.id,\n      actions: [auth && auth.user && __jsx(\"span\", {\n        key: \"comment-basic-reply-to\",\n        onClick: commentToggle.bind(null, comment.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n        title: \"Do you want to delete this comment ?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: function onConfirm() {\n          return deleteComment(comment.id, chapid);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }\n      }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n        type: \"comment\",\n        data: comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      })],\n      author: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, comment.username)),\n      avatar: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }\n      }, __jsx(Avatar, {\n        src: comment.userImage,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 19\n        }\n      }))),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 22\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, comment.responses.map(function (c) {\n      return __jsx(React.Fragment, null, __jsx(Comment, {\n        key: c.id,\n        actions: [auth && auth.user && __jsx(\"span\", {\n          key: \"comment-basic-reply-to\",\n          onClick: answerToggle.bind(null, c.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 23\n          }\n        }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n          title: \"Do you want to delete this comment ?\",\n          okText: \"Yes\",\n          cancelText: \"No\",\n          onConfirm: function onConfirm() {\n            return deleteComment(c.id, chapid);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 23\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }\n        }, \"Delete\")), auth.user && (auth.user.uid !== comment.userId)(__jsx(Report, {\n          type: \"comment\",\n          data: comment,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }\n        }))],\n        author: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 23\n          }\n        }, c.username)),\n        avatar: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 23\n          }\n        }, __jsx(Avatar, {\n          src: c.userImage,\n          alt: c.username,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }\n        }))),\n        content: __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 28\n          }\n        }, c.content),\n        datetime: __jsx(Tooltip, {\n          title: comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 23\n          }\n        }, comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }\n      }), clickedForm === c.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }\n      }, __jsx(Col, {\n        md: 24,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 23\n        }\n      }, __jsx(Input.TextArea, {\n        value: responseBody,\n        onChange: function onChange(e) {\n          return setResponseBody(e.target.value);\n        },\n        autoSize: {\n          minRows: 5\n        },\n        showCount: true,\n        maxLength: 800,\n        placeholder: \"@\".concat(c.username),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }\n      })), __jsx(Col, {\n        md: 24,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 23\n        }\n      }, __jsx(Button, {\n        onClick: submit,\n        type: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }\n      }, \"Comment\"))), __jsx(Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      })));\n    })), clickedForm === comment.id && toggleCommentForm ? __jsx(React.Fragment, null, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }, __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, __jsx(Input.TextArea, {\n      value: responseBody,\n      onChange: function onChange(e) {\n        return setResponseBody(e.target.value);\n      },\n      autoSize: {\n        minRows: 5\n      },\n      showCount: true,\n      maxLength: 800,\n      placeholder: \"@\".concat(comment.username),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    })), __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      onClick: submit,\n      type: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 19\n      }\n    }, \"Comment\"))), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 15\n      }\n    })) : null);\n  }));\n};\n\n_s(Comments, \"kkZarMmi3pYYkth2gicuMeel31Y=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Popconfirm","Link","moment","Report","Comments","comments","auth","commentBody","setCommentBody","submit","responseBody","setResponseBody","deleteComment","chapid","React","useState","toggleCommentForm","setToggleCommentForm","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","commentToggle","answerToggle","deleteFunc","user","e","target","value","minRows","marginBottom","length","comment","bind","userId","uid","username","userImage","content","createdAt","unix","seconds","format","fromNow","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  commentBody,\r\n  setCommentBody,\r\n  submit,\r\n  responseBody,\r\n  setResponseBody,\r\n  deleteComment,\r\n  chapid,\r\n}) => {\r\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\r\n  const [clickedForm, setClickedForm] = React.useState(\"\");\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n\r\n  const commentToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  const deleteFunc = (id) => {\r\n    deleteComment(id, chapid);\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <>\r\n          <Comment\r\n            key={comment.id}\r\n            actions={[\r\n              auth && auth.user && (\r\n                <span\r\n                  key=\"comment-basic-reply-to\"\r\n                  onClick={commentToggle.bind(null, comment.id)}\r\n                >\r\n                  Reply{\" \"}\r\n                </span>\r\n              ),\r\n              comment.userId === auth.user.uid && (\r\n                <Popconfirm\r\n                  title=\"Do you want to delete this comment ?\"\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                  onConfirm={() => deleteComment(comment.id, chapid)}\r\n                >\r\n                  <span>Delete</span>\r\n                </Popconfirm>\r\n              ),\r\n              auth.user && auth.user.uid !== comment.userId && (\r\n                <Report type=\"comment\" data={comment} />\r\n              ),\r\n            ]}\r\n            author={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>{comment.username}</a>\r\n              </Link>\r\n            }\r\n            avatar={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>\r\n                  <Avatar src={comment.userImage} alt={comment.username} />\r\n                </a>\r\n              </Link>\r\n            }\r\n            content={<p>{comment.content}</p>}\r\n            datetime={\r\n              <Tooltip\r\n                title={\r\n                  comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment\r\n                        .unix(comment.createdAt.seconds)\r\n                        .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                }\r\n              >\r\n                <span>\r\n                  {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                    : moment(comment.createdAt).fromNow()}\r\n                </span>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {comment.responses.map((c) => (\r\n              <>\r\n                <Comment\r\n                  key={c.id}\r\n                  actions={[\r\n                    auth && auth.user && (\r\n                      <span\r\n                        key=\"comment-basic-reply-to\"\r\n                        onClick={answerToggle.bind(null, c.id)}\r\n                      >\r\n                        Reply{\" \"}\r\n                      </span>\r\n                    ),\r\n                    comment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(c.id, chapid)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user &&\r\n                      (auth.user.uid !== comment.userId)(\r\n                        <Report type=\"comment\" data={comment} />\r\n                      ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${c.userId}`}>\r\n                      <a>{c.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${c.userId}`}>\r\n                      <a>\r\n                        <Avatar src={c.userImage} alt={c.username} />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{c.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(c.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment.unix(c.createdAt.seconds).fromNow()\r\n                          : moment(c.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n                {clickedForm === c.id && toggleAnswerForm && (\r\n                  <>\r\n                    <Row>\r\n                      <Col md={24}>\r\n                        <Input.TextArea\r\n                          value={responseBody}\r\n                          onChange={(e) => setResponseBody(e.target.value)}\r\n                          autoSize={{ minRows: 5 }}\r\n                          showCount={true}\r\n                          maxLength={800}\r\n                          placeholder={`@${c.username}`}\r\n                        ></Input.TextArea>\r\n                      </Col>\r\n                      <Col md={24}>\r\n                        <Button onClick={submit} type=\"primary\">\r\n                          Comment\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                    <Divider />\r\n                  </>\r\n                )}\r\n              </>\r\n            ))}\r\n          </Comment>\r\n\r\n          {clickedForm === comment.id && toggleCommentForm ? (\r\n            <>\r\n              <Row>\r\n                <Col md={24}>\r\n                  <Input.TextArea\r\n                    value={responseBody}\r\n                    onChange={(e) => setResponseBody(e.target.value)}\r\n                    autoSize={{ minRows: 5 }}\r\n                    showCount={true}\r\n                    maxLength={800}\r\n                    placeholder={`@${comment.username}`}\r\n                  ></Input.TextArea>\r\n                </Col>\r\n                <Col md={24}>\r\n                  <Button onClick={submit} type=\"primary\">\r\n                    Comment\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Divider />\r\n            </>\r\n          ) : null}\r\n        </>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}