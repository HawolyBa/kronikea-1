{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id) {\n  return function (dispatch) {\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var charaId = \"\";\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(function (res) {\n      charaId = res.id;\n      var imageName = \"\".concat(res.id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"characters\").doc(charaId).update({\n            image: url\n          });\n        }).then(function () {\n          message.success(\"Character added successfully\");\n          dispatch({\n            type: types.ADD_CHARACTER,\n            payload: {\n              message: \"Character added successfully\",\n              characterId: charaId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          relativesArr: data.relatives.map(function (c) {\n            return c.character_id;\n          })\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        relativesArr: data.relatives.map(function (c) {\n          return c.character_id;\n        })\n      })).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id, firstname, lastname) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(firstname.toLowerCase()).concat(lastname && \"_\").concat(lastname && lastname.toLowerCase());\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]();\n    }).then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              mainCharacters: story.data().mainCharacters.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryArr: story.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: story.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char) {\n              batch.update(db.collection(\"characters\").doc(_char.id), {\n                relativesArr: _char.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: _char.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n            batch.commit().then(function () {\n              dispatch({\n                type: types.DELETE_CHARACTER,\n                payload: {\n                  message: \"Character deleted successfully\",\n                  loading: false,\n                  deleted: true,\n                  charaExists: false\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","dispatch","collection","doc","get","then","exists","type","GET_CHARACTER","payload","character","data","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","imageName","firstname","toLowerCase","lastname","ref","currentUser","uid","put","child","getDownloadURL","url","update","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","relativesArr","relatives","map","c","character_id","deleteCharacter","DELETE_CHARACTER","batch","where","docs","forEach","characters","filter","stories","story","mainCharacters","secondaryArr","secondaryCharacters","char","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","user","Promise","all","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            character: { ...doc.data(), id: doc.id },\r\n            charaExists: true,\r\n            loading: false,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n\r\n                  batch.commit().then(() => {\r\n                    dispatch({\r\n                      type: types.DELETE_CHARACTER,\r\n                      payload: {\r\n                        message: \"Character deleted successfully\",\r\n                        loading: false,\r\n                        deleted: true,\r\n                        charaExists: false,\r\n                      },\r\n                    });\r\n                  });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}