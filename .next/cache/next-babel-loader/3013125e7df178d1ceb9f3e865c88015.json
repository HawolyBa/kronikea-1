{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = (id, type) => dispatch => {\n  let relArr = [];\n  let storyArr = [];\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      if (type === \"show\") {\n        const relatives = doc.data().relativesArr;\n        let relQueries = [];\n        relatives.forEach(rel => {\n          relQueries.push(db.collection(\"characters\").doc(rel).get());\n        });\n        Promise.all(relQueries).then(res => {\n          res.forEach(char => relArr.push(_objectSpread(_objectSpread({}, char.data()), {}, {\n            id: char.id,\n            relation: doc.data().relatives.find(c => c.character_id === char.id).relation\n          })));\n          const mainQuery = db.collection(\"stories\").where(\"mainCharacters\", \"array-contains\", id).get();\n          const secondaryQuery = db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get();\n          Promise.all([mainQuery, secondaryQuery]).then(result => {\n            const allStory = result[0].docs.concat(result[1].docs);\n            allStory.forEach(story => {\n              storyArr.push({\n                id: story.id,\n                title: story.data().title,\n                authorId: story.data().authorId,\n                banner: story.data().banner\n              });\n            });\n            dispatch({\n              type: types.GET_CHARACTER,\n              payload: {\n                character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id,\n                  relatives: relArr.filter(r => (auth.currentUser && auth.currentUser.uid) === r.authorId || r.public),\n                  stories: storyArr.filter(r => (auth.currentUser && auth.currentUser.uid) === r.authorId || r.public)\n                }),\n                charaExists: true,\n                loading: false\n              }\n            });\n          });\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      }\n    } else {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  let charaId = \"\";\n  db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    likes: [],\n    dislikes: []\n  })).then(res => {\n    charaId = res.id;\n    const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n    if (typeof data.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"characters\").doc(charaId).update({\n          image: url\n        });\n      }).then(() => {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: charaId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        relativesArr: data.relatives.map(c => c.character_id)\n      }));\n    }).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n      relativesArr: data.relatives.map(c => c.character_id)\n    })).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteCharacter = (id, firstname, lastname) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${lastname && lastname.toLowerCase()}`; //const batch = db.batch();\n\n  db.collection(\"characters\").doc(id).delete().then(() => {\n    if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\n      return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete().then(() => {\n        dispatch({\n          type: types.DELETE_CHARACTER,\n          payload: {\n            message: \"Character deleted successfully\",\n            loading: false,\n            deleted: true,\n            charaExists: false\n          }\n        });\n      });\n    }\n  });\n};\nexport const getUserCharacters = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())].filter(c => id ? c.public : c);\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const isCharacterFavorite = charId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"characterId\", \"==\", charId).onSnapshot(snapshot => {\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.IS_CHARACTER_FAVORITE,\n        payload: answer,\n        loadingFav: false\n      });\n    });\n  }\n};\nexport const addCharacterToFavorite = (id, username, characterName, authorId) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a character\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"charactersLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    characterId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(`${characterName} added to your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const removeCharacterFromFavorite = (id, characterName) => dispatch => {\n  db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"charactersLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${characterName} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: types.GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};\nexport const submitCharaterFeedback = (info, userComment) => dispatch => {\n  const {\n    characterName\n  } = info,\n        allInfo = _objectWithoutProperties(info, [\"characterName\"]);\n\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  if (!info.content) return message.error(\"Content must not be empty\");\n  if (userComment) return message.error(\"You have already sent feedback\");\n  db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(() => {\n    dispatch({\n      type: types.SUBMIT_COMMENT,\n      message: \"Comment posted successfully\"\n    });\n  }).catch(err => message.error(err.message));\n};\nexport const getCharacterComments = id => dispatch => {\n  let comments = [];\n  db.collection(\"comments\").where(\"characterId\", \"==\", id).orderBy(\"createdAt\", \"asc\").get().then(comm => {\n    let userQueries = [];\n    comm.forEach(c => comments.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n      id: c.id\n    })));\n    comments.forEach(comment => {\n      userQueries.push(db.collection(\"users\").doc(comment.userId).get());\n    });\n    Promise.all(userQueries).then(res => {\n      comments = comments.map(c => _objectSpread(_objectSpread({}, c), {}, {\n        userImage: res.find(d => d.id === c.userId).data().image\n      }));\n      const userComment = auth.currentUser ? comments.find(c => c.userId === auth.currentUser.uid) : null;\n      comments = auth.currentUser ? comments.filter(c => c.userId !== auth.currentUser.uid) : comments;\n      dispatch({\n        type: types.GET_COMMENTS,\n        payload: {\n          comments,\n          userComment,\n          loadingComments: false\n        }\n      });\n    });\n  });\n};\nexport const deleteCharacterComment = id => dispatch => {\n  db.collection(\"comments\").doc(id).delete().then(() => {\n    dispatch({\n      type: types.SUBMIT_COMMENT,\n      message: \"Comment deleted successfully\"\n    });\n  });\n};\nexport const rateComment = (commentId, type) => dispatch => {\n  dispatch({\n    type: types.RATE_COMMENT,\n    rated: true\n  });\n  if (!auth.currentUser) return message.error(\"You need to be logged in to rate a comment\");\n  db.collection(\"comments\").doc(commentId).get().then(doc => {\n    const isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\n    const isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\n\n    if (type === \"like\" && isLiked || type === \"dislike\" && isDisliked) {\n      return;\n    }\n\n    if (type === \"like\") {\n      db.collection(\"comments\").doc(commentId).update({\n        dislikedBy: isDisliked ? doc.data().dislikedBy.filter(d => d !== auth.currentUser.uid) : doc.data().dislikedBy,\n        likedBy: [...doc.data().likedBy, auth.currentUser.uid]\n      }).then(() => {\n        dispatch({\n          type: types.SUBMIT_COMMENT,\n          message: \"Voilou\"\n        });\n      });\n    } else if (type === \"dislike\") {\n      db.collection(\"comments\").doc(commentId).update({\n        likedBy: isLiked ? doc.data().likedBy.filter(d => d !== auth.currentUser.uid) : doc.data().likedBy,\n        dislikedBy: [...doc.data().dislikedBy, auth.currentUser.uid]\n      }).then(() => {\n        dispatch({\n          type: types.RATE_COMMENT,\n          rated: false\n        });\n      });\n    }\n  });\n};\nexport const getCharactersFromSearch = search => dispatch => {\n  let result = [];\n  dispatch({\n    type: types.GET_CHARACTERS_FROM_SEARCH,\n    loading: true\n  });\n  db.collection(\"characters\").where(\"public\", \"==\", true).get().then(docs => {\n    docs.forEach(doc => {\n      const firstname = doc.data().firstname.toLowerCase();\n      const lastname = doc.data().lastname.toLowerCase();\n      const authorName = doc.data().authorName.toLowerCase().split(\" \");\n      const searchTerm = search.split(\"-\");\n      const firstnameIncluded = searchTerm.some(word => firstname.indexOf(word) !== -1);\n      const lastnameIncluded = searchTerm.some(word => lastname.indexOf(word) !== -1);\n      const authorIncluded = searchTerm.every(word => authorName.includes(word));\n      const orAuthorIncluded = searchTerm.some(word => doc.data().authorName.toLowerCase().indexOf(word) !== -1);\n\n      if (firstnameIncluded || lastnameIncluded || authorIncluded || orAuthorIncluded) {\n        result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }));\n      }\n\n      return result;\n    });\n  }).then(() => {\n    dispatch({\n      type: types.GET_CHARACTERS_FROM_SEARCH,\n      payload: result,\n      loading: false\n    });\n  }).catch(err => message.error(err.message));\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","relArr","storyArr","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","char","relation","find","c","character_id","mainQuery","where","secondaryQuery","result","allStory","docs","concat","story","title","authorId","banner","GET_CHARACTER","payload","character","filter","r","currentUser","uid","public","stories","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","put","child","getDownloadURL","url","update","success","characterId","catch","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","deleteCharacter","DELETE_CHARACTER","delete","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","user","favUsers","GET_FAVORITE_CHARACTERS","isCharacterFavorite","charId","onSnapshot","snapshot","answer","IS_CHARACTER_FAVORITE","loadingFav","addCharacterToFavorite","username","characterName","emailVerified","sender","senderId","removeCharacterFromFavorite","getCharactersInStory","GET_STORY_CHARACTERS","secondaryCharacters","mainArr","mainCharacters","submitCharaterFeedback","info","userComment","allInfo","content","SUBMIT_COMMENT","getCharacterComments","comments","orderBy","comm","userQueries","comment","userImage","d","GET_COMMENTS","loadingComments","deleteCharacterComment","rateComment","commentId","RATE_COMMENT","rated","isLiked","likedBy","includes","isDisliked","dislikedBy","getCharactersFromSearch","search","GET_CHARACTERS_FROM_SEARCH","authorName","split","searchTerm","firstnameIncluded","some","word","indexOf","lastnameIncluded","authorIncluded","every","orAuthorIncluded"],"mappings":";;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,OAAnB,QAAkC,aAAlC;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAeC,QAAD,IAAc;AACtD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAT,EAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,EAEGO,GAFH,GAGGC,IAHH,CAGSF,GAAD,IAAS;AACb,QAAIA,GAAG,CAACG,MAAR,EAAgB;AACd,UAAIR,IAAI,KAAK,MAAb,EAAqB;AACnB,cAAMS,SAAS,GAAGJ,GAAG,CAACK,IAAJ,GAAWC,YAA7B;AACA,YAAIC,UAAU,GAAG,EAAjB;AACAH,QAAAA,SAAS,CAACI,OAAV,CAAmBC,GAAD,IAAS;AACzBF,UAAAA,UAAU,CAACG,IAAX,CAAgBrB,EAAE,CAACU,UAAH,CAAc,YAAd,EAA4BC,GAA5B,CAAgCS,GAAhC,EAAqCR,GAArC,EAAhB;AACD,SAFD;AAGAU,QAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAAwBL,IAAxB,CAA8BW,GAAD,IAAS;AACpCA,UAAAA,GAAG,CAACL,OAAJ,CAAaM,IAAD,IACVjB,MAAM,CAACa,IAAP,iCACKI,IAAI,CAACT,IAAL,EADL;AAEEX,YAAAA,EAAE,EAAEoB,IAAI,CAACpB,EAFX;AAGEqB,YAAAA,QAAQ,EAAEf,GAAG,CACVK,IADO,GAEPD,SAFO,CAEGY,IAFH,CAESC,CAAD,IAAOA,CAAC,CAACC,YAAF,KAAmBJ,IAAI,CAACpB,EAFvC,EAE2CqB;AALvD,aADF;AAUA,gBAAMI,SAAS,GAAG9B,EAAE,CACjBU,UADe,CACJ,SADI,EAEfqB,KAFe,CAET,gBAFS,EAES,gBAFT,EAE2B1B,EAF3B,EAGfO,GAHe,EAAlB;AAKA,gBAAMoB,cAAc,GAAGhC,EAAE,CACtBU,UADoB,CACT,SADS,EAEpBqB,KAFoB,CAEd,cAFc,EAEE,gBAFF,EAEoB1B,EAFpB,EAGpBO,GAHoB,EAAvB;AAKAU,UAAAA,OAAO,CAACC,GAAR,CAAY,CAACO,SAAD,EAAYE,cAAZ,CAAZ,EAAyCnB,IAAzC,CAA+CoB,MAAD,IAAY;AACxD,kBAAMC,QAAQ,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAV,CAAeC,MAAf,CAAsBH,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAhC,CAAjB;AACAD,YAAAA,QAAQ,CAACf,OAAT,CAAkBkB,KAAD,IAAW;AAC1B5B,cAAAA,QAAQ,CAACY,IAAT,CAAc;AACZhB,gBAAAA,EAAE,EAAEgC,KAAK,CAAChC,EADE;AAEZiC,gBAAAA,KAAK,EAAED,KAAK,CAACrB,IAAN,GAAasB,KAFR;AAGZC,gBAAAA,QAAQ,EAAEF,KAAK,CAACrB,IAAN,GAAauB,QAHX;AAIZC,gBAAAA,MAAM,EAAEH,KAAK,CAACrB,IAAN,GAAawB;AAJT,eAAd;AAMD,aAPD;AAQAjC,YAAAA,QAAQ,CAAC;AACPD,cAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,SAAS,kCACJhC,GAAG,CAACK,IAAJ,EADI;AAEPX,kBAAAA,EAAE,EAAEM,GAAG,CAACN,EAFD;AAGPU,kBAAAA,SAAS,EAAEP,MAAM,CAACoC,MAAP,CACRC,CAAD,IACE,CAAC5C,IAAI,CAAC6C,WAAL,IAAoB7C,IAAI,CAAC6C,WAAL,CAAiBC,GAAtC,MACEF,CAAC,CAACN,QADJ,IACgBM,CAAC,CAACG,MAHX,CAHJ;AAQPC,kBAAAA,OAAO,EAAExC,QAAQ,CAACmC,MAAT,CACNC,CAAD,IACE,CAAC5C,IAAI,CAAC6C,WAAL,IAAoB7C,IAAI,CAAC6C,WAAL,CAAiBC,GAAtC,MACEF,CAAC,CAACN,QADJ,IACgBM,CAAC,CAACG,MAHb;AARF,kBADF;AAePE,gBAAAA,WAAW,EAAE,IAfN;AAgBPC,gBAAAA,OAAO,EAAE;AAhBF;AAFF,aAAD,CAAR;AAqBD,WA/BD;AAgCD,SArDD;AAsDD,OA5DD,MA4DO;AACL5C,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,SAAS,kCAAOhC,GAAG,CAACK,IAAJ,EAAP;AAAmBX,cAAAA,EAAE,EAAEM,GAAG,CAACN;AAA3B,cADF;AAEP6C,YAAAA,WAAW,EAAE,IAFN;AAGPC,YAAAA,OAAO,EAAE;AAHF;AAFF,SAAD,CAAR;AAQD;AACF,KAvED,MAuEO;AACL5C,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,QAAAA,OAAO,EAAE;AACPQ,UAAAA,WAAW,EAAE,KADN;AAEPC,UAAAA,OAAO,EAAE;AAFF;AAFF,OAAD,CAAR;AAOD;AACF,GApFH;AAqFD,CAxFM;AA0FP,OAAO,MAAMC,YAAY,GAAIpC,IAAD,IAAWT,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAAC;AAAED,IAAAA,IAAI,EAAER,KAAK,CAACuD,aAAd;AAA6BX,IAAAA,OAAO,EAAE;AAAES,MAAAA,OAAO,EAAE;AAAX;AAAtC,GAAD,CAAR;AAEA,MAAIG,OAAO,GAAG,EAAd;AACAtD,EAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACG6C,GADH,iCAEOvC,IAFP;AAGIwC,IAAAA,KAAK,EAAE,OAAOxC,IAAI,CAACwC,KAAZ,KAAsB,QAAtB,GAAiCxC,IAAI,CAACwC,KAAtC,GAA8C,EAHzD;AAIIC,IAAAA,SAAS,EAAEtD,QAAQ,CAACuD,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAJf;AAKIC,IAAAA,UAAU,EAAE,CALhB;AAMIC,IAAAA,KAAK,EAAE,EANX;AAOIC,IAAAA,QAAQ,EAAE;AAPd,MASGlD,IATH,CASSW,GAAD,IAAS;AACb8B,IAAAA,OAAO,GAAG9B,GAAG,CAACnB,EAAd;AACA,UAAM2D,SAAS,GAAI,GAAExC,GAAG,CAACnB,EAAG,GAAE,GAAI,GAAEW,IAAI,CAACiD,SAAL,CAAeC,WAAf,EAA6B,GAC/DlD,IAAI,CAACmD,QAAL,IAAiB,GAClB,GAAEnD,IAAI,CAACmD,QAAL,IAAiBnD,IAAI,CAACmD,QAAL,CAAcD,WAAd,EAA4B,EAFhD;;AAIA,QAAI,OAAOlD,IAAI,CAACwC,KAAZ,KAAsB,QAA1B,EAAoC;AAClCtD,MAAAA,OAAO,CACJkE,GADH,CACQ,GAAEnE,IAAI,CAAC6C,WAAL,CAAiBC,GAAI,IAAGiB,SAAU,EAD5C,EAEGK,GAFH,CAEOrD,IAAI,CAACwC,KAFZ,EAGG3C,IAHH,CAGQ,MAAM;AACV,eAAOX,OAAO,CACXkE,GADI,CACAnE,IAAI,CAAC6C,WAAL,CAAiBC,GADjB,EAEJuB,KAFI,CAEEN,SAFF,EAGJO,cAHI,EAAP;AAID,OARH,EASG1D,IATH,CASS2D,GAAD,IAAS;AACb,eAAOxE,EAAE,CACNU,UADI,CACO,YADP,EAEJC,GAFI,CAEA2C,OAFA,EAGJmB,MAHI,CAGG;AAAEjB,UAAAA,KAAK,EAAEgB;AAAT,SAHH,CAAP;AAID,OAdH,EAeG3D,IAfH,CAeQ,MAAM;AACVd,QAAAA,OAAO,CAAC2E,OAAR,CAAgB,8BAAhB;AACAnE,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACuD,aADL;AAEPX,UAAAA,OAAO,EAAE;AACP3C,YAAAA,OAAO,EAAE,8BADF;AAEP4E,YAAAA,WAAW,EAAErB,OAFN;AAGPH,YAAAA,OAAO,EAAE;AAHF;AAFF,SAAD,CAAR;AAQD,OAzBH;AA0BD,KA3BD,MA2BO;AACLpD,MAAAA,OAAO,CAAC2E,OAAR,CAAgB,8BAAhB;AACAnE,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAACuD,aADL;AAEPX,QAAAA,OAAO,EAAE;AACP3C,UAAAA,OAAO,EAAE,8BADF;AAEP4E,UAAAA,WAAW,EAAErB,OAFN;AAGPH,UAAAA,OAAO,EAAE;AAHF;AAFF,OAAD,CAAR;AAQD;AACF,GArDH,EAsDGyB,KAtDH,CAsDUC,GAAD,IAAS;AACd9E,IAAAA,OAAO,CAAC+E,KAAR,CAAcD,GAAG,CAAC9E,OAAlB;AACD,GAxDH;AAyDD,CA7DM;AA+DP,OAAO,MAAMgF,aAAa,GAAG,CAAC/D,IAAD,EAAOX,EAAP,KAAeE,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAAED,IAAAA,IAAI,EAAER,KAAK,CAACkF,cAAd;AAA8BtC,IAAAA,OAAO,EAAE;AAAEuC,MAAAA,gBAAgB,EAAE;AAApB;AAAvC,GAAD,CAAR;AAEA,QAAMjB,SAAS,GAAI,GAAE3D,EAAG,GAAE,GAAI,GAAEW,IAAI,CAACiD,SAAL,CAAeC,WAAf,EAA6B,GAC3DlD,IAAI,CAACmD,QAAL,IAAiB,GAClB,GAAEnD,IAAI,CAACmD,QAAL,IAAiBnD,IAAI,CAACmD,QAAL,CAAcD,WAAd,EAA4B,EAFhD;;AAIA,MAAIlD,IAAI,CAACwC,KAAL,IAAc,OAAOxC,IAAI,CAACwC,KAAZ,KAAsB,QAAxC,EAAkD;AAChDtD,IAAAA,OAAO,CACJkE,GADH,CACQ,GAAEnE,IAAI,CAAC6C,WAAL,CAAiBC,GAAI,IAAGiB,SAAU,EAD5C,EAEGK,GAFH,CAEOrD,IAAI,CAACwC,KAFZ,EAGG3C,IAHH,CAGQ,MAAM;AACV,aAAOX,OAAO,CACXkE,GADI,CACAnE,IAAI,CAAC6C,WAAL,CAAiBC,GADjB,EAEJuB,KAFI,CAEEN,SAFF,EAGJO,cAHI,EAAP;AAID,KARH,EASG1D,IATH,CASS2D,GAAD,IAAS;AACb,aAAOxE,EAAE,CACNU,UADI,CACO,YADP,EAEJC,GAFI,CAEAN,EAFA,EAGJoE,MAHI,iCAIAzD,IAJA;AAKHwC,QAAAA,KAAK,EAAEgB,GALJ;AAMHvD,QAAAA,YAAY,EAAED,IAAI,CAACD,SAAL,CAAemE,GAAf,CAAoBtD,CAAD,IAAOA,CAAC,CAACC,YAA5B;AANX,SAAP;AAQD,KAlBH,EAmBGhB,IAnBH,CAmBQ,MAAM;AACVN,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAACkF,cADL;AAEPtC,QAAAA,OAAO,EAAE;AACP3C,UAAAA,OAAO,EAAE,+BADF;AAEPkF,UAAAA,gBAAgB,EAAE;AAFX;AAFF,OAAD,CAAR;AAOD,KA3BH,EA4BGL,KA5BH,CA4BUC,GAAD,IAAS;AACd9E,MAAAA,OAAO,CAAC+E,KAAR,CAAcD,GAAG,CAAC9E,OAAlB;AACD,KA9BH;AA+BD,GAhCD,MAgCO;AACLC,IAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,EAEGoE,MAFH,iCAGOzD,IAHP;AAIIC,MAAAA,YAAY,EAAED,IAAI,CAACD,SAAL,CAAemE,GAAf,CAAoBtD,CAAD,IAAOA,CAAC,CAACC,YAA5B;AAJlB,QAMGhB,IANH,CAMQ,MAAM;AACVN,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAACkF,cADL;AAEPtC,QAAAA,OAAO,EAAE;AACP3C,UAAAA,OAAO,EAAE,+BADF;AAEPkF,UAAAA,gBAAgB,EAAE;AAFX;AAFF,OAAD,CAAR;AAOD,KAdH,EAeGL,KAfH,CAeUC,GAAD,IAAS;AACd9E,MAAAA,OAAO,CAAC+E,KAAR,CAAcD,GAAG,CAAC9E,OAAlB;AACD,KAjBH;AAkBD;AACF,CA3DM;AA6DP,OAAO,MAAMoF,eAAe,GAAG,CAAC9E,EAAD,EAAK4D,SAAL,EAAgBE,QAAhB,KAA8B5D,QAAD,IAAc;AACxEA,EAAAA,QAAQ,CAAC;AAAED,IAAAA,IAAI,EAAER,KAAK,CAACsF,gBAAd;AAAgC1C,IAAAA,OAAO,EAAE;AAAES,MAAAA,OAAO,EAAE;AAAX;AAAzC,GAAD,CAAR;AACA,QAAMa,SAAS,GAAI,GAAE3D,EAAG,GAAE,GAAI,GAAE4D,SAAS,CAACC,WAAV,EAAwB,GAAEC,QAAQ,IAAI,GAAI,GACxEA,QAAQ,IAAIA,QAAQ,CAACD,WAAT,EACb,EAFD,CAFwE,CAKxE;;AACAlE,EAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,EAEGgF,MAFH,GAGGxE,IAHH,CAGQ,MAAM;AACV,QAAIX,OAAO,CAACkE,GAAR,CAAa,GAAEnE,IAAI,CAAC6C,WAAL,CAAiBC,GAAI,IAAGiB,SAAU,EAAjD,CAAJ,EAAyD;AACvD,aAAO9D,OAAO,CACXkE,GADI,CACC,GAAEnE,IAAI,CAAC6C,WAAL,CAAiBC,GAAI,IAAGiB,SAAU,EADrC,EAEJqB,MAFI,GAGJxE,IAHI,CAGC,MAAM;AACVN,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACsF,gBADL;AAEP1C,UAAAA,OAAO,EAAE;AACP3C,YAAAA,OAAO,EAAE,gCADF;AAEPoD,YAAAA,OAAO,EAAE,KAFF;AAGPmC,YAAAA,OAAO,EAAE,IAHF;AAIPpC,YAAAA,WAAW,EAAE;AAJN;AAFF,SAAD,CAAR;AASD,OAbI,CAAP;AAcD;AACF,GApBH;AAqBD,CA3BM;AA6BP,OAAO,MAAMqC,iBAAiB,GAAIlF,EAAD,IAASE,QAAD,IAAc;AACrD,QAAMiF,MAAM,GAAGnF,EAAE,GAAGA,EAAH,GAAQJ,IAAI,CAAC6C,WAAL,CAAiBC,GAA1C;AACA/C,EAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGqB,KADH,CACS,UADT,EACqB,IADrB,EAC2ByD,MAD3B,EAEG5E,GAFH,GAGGC,IAHH,CAGSsB,IAAD,IAAU;AACd,QAAIsD,KAAK,GAAG,EAAZ;AACAtD,IAAAA,IAAI,CAAChB,OAAL,CAAcR,GAAD,IAAS;AACpB8E,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ;AAAapF,QAAAA,EAAE,EAAEM,GAAG,CAACN;AAArB,SAA4BM,GAAG,CAACK,IAAJ,EAA5B,GAA0C4B,MAA1C,CAAkDhB,CAAD,IACvDvB,EAAE,GAAGuB,CAAC,CAACoB,MAAL,GAAcpB,CADV,CAAR;AAGD,KAJD;AAKA,WAAO6D,KAAP;AACD,GAXH,EAYG5E,IAZH,CAYS4E,KAAD,IAAW;AACflF,IAAAA,QAAQ,CAAC;AAAED,MAAAA,IAAI,EAAER,KAAK,CAAC4F,mBAAd;AAAmChD,MAAAA,OAAO,EAAE+C;AAA5C,KAAD,CAAR;AACD,GAdH;AAeD,CAjBM;AAmBP,OAAO,MAAME,qBAAqB,GAAItF,EAAD,IAASE,QAAD,IAAc;AACzD,QAAMiF,MAAM,GAAGnF,EAAE,GAAGA,EAAH,GAAQJ,IAAI,CAAC6C,WAAL,CAAiBC,GAA1C;AACA/C,EAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACGqB,KADH,CACS,UADT,EACqB,IADrB,EAC2ByD,MAD3B,EAEG5E,GAFH,GAGGC,IAHH,CAGSsB,IAAD,IAAU;AACd,QAAIyD,MAAM,GAAG,EAAb;AACAzD,IAAAA,IAAI,CAAChB,OAAL,CAAcR,GAAD,IAAS;AACpBiF,MAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYjF,GAAG,CAACK,IAAJ,GAAW2D,WAAvB,CAAT;AACD,KAFD;AAGA,WAAOiB,MAAP;AACD,GATH,EAUG/E,IAVH,CAUSgF,KAAD,IAAW;AACf,UAAM5D,MAAM,GAAG4D,KAAK,CAACX,GAAN,CAAWY,IAAD,IACvB9F,EAAE,CAACU,UAAH,CAAc,YAAd,EAA4BC,GAA5B,CAAgCmF,IAAhC,EAAsClF,GAAtC,EADa,CAAf;AAGAU,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ,EAAoBpB,IAApB,CAA0BW,GAAD,IAAS;AAChC,UAAIuE,QAAQ,GAAG,EAAf;AACAvE,MAAAA,GAAG,CAACL,OAAJ,CACGR,GAAD,IAAUoF,QAAQ,GAAG,CAAC,GAAGA,QAAJ;AAAgB1F,QAAAA,EAAE,EAAEM,GAAG,CAACN;AAAxB,SAA+BM,GAAG,CAACK,IAAJ,EAA/B,EADvB;AAGAT,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAACkG,uBADL;AAEPtD,QAAAA,OAAO,EAAEqD;AAFF,OAAD,CAAR;AAID,KATD;AAUD,GAxBH;AAyBD,CA3BM;AA6BP,OAAO,MAAME,mBAAmB,GAAIC,MAAD,IAAa3F,QAAD,IAAc;AAC3D,MAAIN,IAAI,CAAC6C,WAAT,EAAsB;AACpB9C,IAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACGqB,KADH,CACS,UADT,EACqB,IADrB,EAC2B9B,IAAI,CAAC6C,WAAL,CAAiBC,GAD5C,EAEGhB,KAFH,CAES,aAFT,EAEwB,IAFxB,EAE8BmE,MAF9B,EAGGC,UAHH,CAGeC,QAAD,IAAc;AACxB,YAAMC,MAAM,GAAGD,QAAQ,CAACjE,IAAT,CAAc,CAAd,IAAmB,IAAnB,GAA0B,KAAzC;AACA,aAAO5B,QAAQ,CAAC;AACdD,QAAAA,IAAI,EAAER,KAAK,CAACwG,qBADE;AAEd5D,QAAAA,OAAO,EAAE2D,MAFK;AAGdE,QAAAA,UAAU,EAAE;AAHE,OAAD,CAAf;AAKD,KAVH;AAWD;AACF,CAdM;AAgBP,OAAO,MAAMC,sBAAsB,GAAG,CACpCnG,EADoC,EAEpCoG,QAFoC,EAGpCC,aAHoC,EAIpCnE,QAJoC,KAKhChC,QAAD,IAAc;AACjB;AACA,MAAI,CAACN,IAAI,CAAC6C,WAAV,EACE,OAAO/C,OAAO,CAAC+E,KAAR,CAAc,8CAAd,CAAP;AACF,MAAI,CAAC7E,IAAI,CAAC6C,WAAL,CAAiB6D,aAAtB,EACE,OAAO5G,OAAO,CAAC+E,KAAR,CAAc,qCAAd,CAAP;AAEF9E,EAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACG6C,GADH,CACO;AACHqD,IAAAA,MAAM,EAAEH,QADL;AAEHI,IAAAA,QAAQ,EAAE5G,IAAI,CAAC6C,WAAL,CAAiBC,GAFxB;AAGH4B,IAAAA,WAAW,EAAEtE,EAHV;AAIHoD,IAAAA,SAAS,EAAEtD,QAAQ,CAACuD,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B;AAJR,GADP,EAOG/C,IAPH,CAOQ,MAAMd,OAAO,CAAC2E,OAAR,CAAiB,GAAEgC,aAAc,0BAAjC,CAPd,EAQG9B,KARH,CAQUC,GAAD,IAAS9E,OAAO,CAAC+E,KAAR,CAAc,0BAAd,CARlB;AASD,CArBM;AAuBP,OAAO,MAAMgC,2BAA2B,GAAG,CAACzG,EAAD,EAAKqG,aAAL,KACzCnG,QADgE,IAE7D;AACHP,EAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACGqB,KADH,CACS,aADT,EACwB,IADxB,EAC8B1B,EAD9B,EAEG0B,KAFH,CAES,UAFT,EAEqB,IAFrB,EAE2B9B,IAAI,CAAC6C,WAAL,CAAiBC,GAF5C,EAGGnC,GAHH,GAIGC,IAJH,CAISG,IAAD,IAAU;AACd,WAAOhB,EAAE,CAACU,UAAH,CAAc,iBAAd,EAAiCC,GAAjC,CAAqCK,IAAI,CAACmB,IAAL,CAAU,CAAV,EAAa9B,EAAlD,EAAsDgF,MAAtD,EAAP;AACD,GANH,EAOGxE,IAPH,CAOQ,MAAMd,OAAO,CAAC2E,OAAR,CAAiB,GAAEgC,aAAc,8BAAjC,CAPd,EAQG9B,KARH,CAQUC,GAAD,IAAS9E,OAAO,CAAC+E,KAAR,CAAc,0BAAd,CARlB;AASD,CAZM;AAcP,OAAO,MAAMiC,oBAAoB,GAAI1G,EAAD,IAASE,QAAD,IAAc;AACxDP,EAAAA,EAAE,CAACU,UAAH,CAAc,SAAd,EACGC,GADH,CACON,EADP,EAEG8F,UAFH,CAEexF,GAAD,IAAS;AACnBJ,IAAAA,QAAQ,CAAC;AACPD,MAAAA,IAAI,EAAER,KAAK,CAACkH,oBADL;AAEPtE,MAAAA,OAAO,EAAE;AACPuE,QAAAA,mBAAmB,EAAEtG,GAAG,CAACK,IAAJ,GAAWiG,mBADzB;AAEPC,QAAAA,OAAO,EAAEvG,GAAG,CAACK,IAAJ,GAAWmG;AAFb;AAFF,KAAD,CAAR;AAOD,GAVH;AAWD,CAZM;AAcP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAwB/G,QAAD,IAAc;AACzE,QAAM;AAAEmG,IAAAA;AAAF,MAAgCW,IAAtC;AAAA,QAA0BE,OAA1B,4BAAsCF,IAAtC;;AACA,MAAI,CAACpH,IAAI,CAAC6C,WAAL,CAAiB6D,aAAtB,EACE,OAAO5G,OAAO,CAAC+E,KAAR,CAAc,qCAAd,CAAP;AACF,MAAI,CAACuC,IAAI,CAACG,OAAV,EAAmB,OAAOzH,OAAO,CAAC+E,KAAR,CAAc,2BAAd,CAAP;AACnB,MAAIwC,WAAJ,EAAiB,OAAOvH,OAAO,CAAC+E,KAAR,CAAc,gCAAd,CAAP;AAEjB9E,EAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACG6C,GADH,iCAEO8D,IAFP;AAGI5D,IAAAA,SAAS,EAAEtD,QAAQ,CAACuD,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B;AAHf,MAKG/C,IALH,CAKQ,MAAM;AACVN,IAAAA,QAAQ,CAAC;AACPD,MAAAA,IAAI,EAAER,KAAK,CAAC2H,cADL;AAEP1H,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAVH,EAWG6E,KAXH,CAWUC,GAAD,IAAS9E,OAAO,CAAC+E,KAAR,CAAcD,GAAG,CAAC9E,OAAlB,CAXlB;AAYD,CAnBM;AAqBP,OAAO,MAAM2H,oBAAoB,GAAIrH,EAAD,IAASE,QAAD,IAAc;AACxD,MAAIoH,QAAQ,GAAG,EAAf;AACA3H,EAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGqB,KADH,CACS,aADT,EACwB,IADxB,EAC8B1B,EAD9B,EAEGuH,OAFH,CAEW,WAFX,EAEwB,KAFxB,EAGGhH,GAHH,GAIGC,IAJH,CAISgH,IAAD,IAAU;AACd,QAAIC,WAAW,GAAG,EAAlB;AACAD,IAAAA,IAAI,CAAC1G,OAAL,CAAcS,CAAD,IAAO+F,QAAQ,CAACtG,IAAT,iCAAmBO,CAAC,CAACZ,IAAF,EAAnB;AAA6BX,MAAAA,EAAE,EAAEuB,CAAC,CAACvB;AAAnC,OAApB;AACAsH,IAAAA,QAAQ,CAACxG,OAAT,CAAkB4G,OAAD,IAAa;AAC5BD,MAAAA,WAAW,CAACzG,IAAZ,CAAiBrB,EAAE,CAACU,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BoH,OAAO,CAACvC,MAAnC,EAA2C5E,GAA3C,EAAjB;AACD,KAFD;AAIAU,IAAAA,OAAO,CAACC,GAAR,CAAYuG,WAAZ,EAAyBjH,IAAzB,CAA+BW,GAAD,IAAS;AACrCmG,MAAAA,QAAQ,GAAGA,QAAQ,CAACzC,GAAT,CAActD,CAAD,oCACnBA,CADmB;AAEtBoG,QAAAA,SAAS,EAAExG,GAAG,CAACG,IAAJ,CAAUsG,CAAD,IAAOA,CAAC,CAAC5H,EAAF,KAASuB,CAAC,CAAC4D,MAA3B,EAAmCxE,IAAnC,GAA0CwC;AAF/B,QAAb,CAAX;AAIA,YAAM8D,WAAW,GAAGrH,IAAI,CAAC6C,WAAL,GAChB6E,QAAQ,CAAChG,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAC4D,MAAF,KAAavF,IAAI,CAAC6C,WAAL,CAAiBC,GAAnD,CADgB,GAEhB,IAFJ;AAGA4E,MAAAA,QAAQ,GAAG1H,IAAI,CAAC6C,WAAL,GACP6E,QAAQ,CAAC/E,MAAT,CAAiBhB,CAAD,IAAOA,CAAC,CAAC4D,MAAF,KAAavF,IAAI,CAAC6C,WAAL,CAAiBC,GAArD,CADO,GAEP4E,QAFJ;AAGApH,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAACoI,YADL;AAEPxF,QAAAA,OAAO,EAAE;AACPiF,UAAAA,QADO;AAEPL,UAAAA,WAFO;AAGPa,UAAAA,eAAe,EAAE;AAHV;AAFF,OAAD,CAAR;AAQD,KAnBD;AAoBD,GA/BH;AAgCD,CAlCM;AAoCP,OAAO,MAAMC,sBAAsB,GAAI/H,EAAD,IAASE,QAAD,IAAc;AAC1DP,EAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGC,GADH,CACON,EADP,EAEGgF,MAFH,GAGGxE,IAHH,CAGQ,MAAM;AACVN,IAAAA,QAAQ,CAAC;AACPD,MAAAA,IAAI,EAAER,KAAK,CAAC2H,cADL;AAEP1H,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GARH;AASD,CAVM;AAYP,OAAO,MAAMsI,WAAW,GAAG,CAACC,SAAD,EAAYhI,IAAZ,KAAsBC,QAAD,IAAc;AAC5DA,EAAAA,QAAQ,CAAC;AAAED,IAAAA,IAAI,EAAER,KAAK,CAACyI,YAAd;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAAD,CAAR;AACA,MAAI,CAACvI,IAAI,CAAC6C,WAAV,EACE,OAAO/C,OAAO,CAAC+E,KAAR,CAAc,4CAAd,CAAP;AACF9E,EAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGC,GADH,CACO2H,SADP,EAEG1H,GAFH,GAGGC,IAHH,CAGSF,GAAD,IAAS;AACb,UAAM8H,OAAO,GAAG9H,GAAG,CAACK,IAAJ,GAAW0H,OAAX,CAAmBC,QAAnB,CAA4B1I,IAAI,CAAC6C,WAAL,CAAiBC,GAA7C,CAAhB;AACA,UAAM6F,UAAU,GAAGjI,GAAG,CAACK,IAAJ,GAAW6H,UAAX,CAAsBF,QAAtB,CAA+B1I,IAAI,CAAC6C,WAAL,CAAiBC,GAAhD,CAAnB;;AACA,QAAKzC,IAAI,KAAK,MAAT,IAAmBmI,OAApB,IAAiCnI,IAAI,KAAK,SAAT,IAAsBsI,UAA3D,EAAwE;AACtE;AACD;;AACD,QAAItI,IAAI,KAAK,MAAb,EAAqB;AACnBN,MAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGC,GADH,CACO2H,SADP,EAEG7D,MAFH,CAEU;AACNoE,QAAAA,UAAU,EAAED,UAAU,GAClBjI,GAAG,CAACK,IAAJ,GAAW6H,UAAX,CAAsBjG,MAAtB,CAA8BqF,CAAD,IAAOA,CAAC,KAAKhI,IAAI,CAAC6C,WAAL,CAAiBC,GAA3D,CADkB,GAElBpC,GAAG,CAACK,IAAJ,GAAW6H,UAHT;AAINH,QAAAA,OAAO,EAAE,CAAC,GAAG/H,GAAG,CAACK,IAAJ,GAAW0H,OAAf,EAAwBzI,IAAI,CAAC6C,WAAL,CAAiBC,GAAzC;AAJH,OAFV,EAQGlC,IARH,CAQQ,MAAM;AACVN,QAAAA,QAAQ,CAAC;AAAED,UAAAA,IAAI,EAAER,KAAK,CAAC2H,cAAd;AAA8B1H,UAAAA,OAAO,EAAE;AAAvC,SAAD,CAAR;AACD,OAVH;AAWD,KAZD,MAYO,IAAIO,IAAI,KAAK,SAAb,EAAwB;AAC7BN,MAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGC,GADH,CACO2H,SADP,EAEG7D,MAFH,CAEU;AACNiE,QAAAA,OAAO,EAAED,OAAO,GACZ9H,GAAG,CAACK,IAAJ,GAAW0H,OAAX,CAAmB9F,MAAnB,CAA2BqF,CAAD,IAAOA,CAAC,KAAKhI,IAAI,CAAC6C,WAAL,CAAiBC,GAAxD,CADY,GAEZpC,GAAG,CAACK,IAAJ,GAAW0H,OAHT;AAING,QAAAA,UAAU,EAAE,CAAC,GAAGlI,GAAG,CAACK,IAAJ,GAAW6H,UAAf,EAA2B5I,IAAI,CAAC6C,WAAL,CAAiBC,GAA5C;AAJN,OAFV,EAQGlC,IARH,CAQQ,MAAM;AACVN,QAAAA,QAAQ,CAAC;AAAED,UAAAA,IAAI,EAAER,KAAK,CAACyI,YAAd;AAA4BC,UAAAA,KAAK,EAAE;AAAnC,SAAD,CAAR;AACD,OAVH;AAWD;AACF,GAlCH;AAmCD,CAvCM;AAyCP,OAAO,MAAMM,uBAAuB,GAAIC,MAAD,IAAaxI,QAAD,IAAc;AAC/D,MAAI0B,MAAM,GAAG,EAAb;AACA1B,EAAAA,QAAQ,CAAC;AAAED,IAAAA,IAAI,EAAER,KAAK,CAACkJ,0BAAd;AAA0C7F,IAAAA,OAAO,EAAE;AAAnD,GAAD,CAAR;AACAnD,EAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGqB,KADH,CACS,QADT,EACmB,IADnB,EACyB,IADzB,EAEGnB,GAFH,GAGGC,IAHH,CAGSsB,IAAD,IAAU;AACdA,IAAAA,IAAI,CAAChB,OAAL,CAAcR,GAAD,IAAS;AACpB,YAAMsD,SAAS,GAAGtD,GAAG,CAACK,IAAJ,GAAWiD,SAAX,CAAqBC,WAArB,EAAlB;AACA,YAAMC,QAAQ,GAAGxD,GAAG,CAACK,IAAJ,GAAWmD,QAAX,CAAoBD,WAApB,EAAjB;AACA,YAAM+E,UAAU,GAAGtI,GAAG,CAACK,IAAJ,GAAWiI,UAAX,CAAsB/E,WAAtB,GAAoCgF,KAApC,CAA0C,GAA1C,CAAnB;AACA,YAAMC,UAAU,GAAGJ,MAAM,CAACG,KAAP,CAAa,GAAb,CAAnB;AAEA,YAAME,iBAAiB,GAAGD,UAAU,CAACE,IAAX,CACvBC,IAAD,IAAUrF,SAAS,CAACsF,OAAV,CAAkBD,IAAlB,MAA4B,CAAC,CADf,CAA1B;AAGA,YAAME,gBAAgB,GAAGL,UAAU,CAACE,IAAX,CACtBC,IAAD,IAAUnF,QAAQ,CAACoF,OAAT,CAAiBD,IAAjB,MAA2B,CAAC,CADf,CAAzB;AAGA,YAAMG,cAAc,GAAGN,UAAU,CAACO,KAAX,CAAkBJ,IAAD,IACtCL,UAAU,CAACN,QAAX,CAAoBW,IAApB,CADqB,CAAvB;AAGA,YAAMK,gBAAgB,GAAGR,UAAU,CAACE,IAAX,CACtBC,IAAD,IAAU3I,GAAG,CAACK,IAAJ,GAAWiI,UAAX,CAAsB/E,WAAtB,GAAoCqF,OAApC,CAA4CD,IAA5C,MAAsD,CAAC,CAD1C,CAAzB;;AAGA,UACEF,iBAAiB,IACjBI,gBADA,IAEAC,cAFA,IAGAE,gBAJF,EAKE;AACA1H,QAAAA,MAAM,CAACZ,IAAP,iCAAiBV,GAAG,CAACK,IAAJ,EAAjB;AAA6BX,UAAAA,EAAE,EAAEM,GAAG,CAACN;AAArC;AACD;;AACD,aAAO4B,MAAP;AACD,KA3BD;AA4BD,GAhCH,EAiCGpB,IAjCH,CAiCQ,MAAM;AACVN,IAAAA,QAAQ,CAAC;AACPD,MAAAA,IAAI,EAAER,KAAK,CAACkJ,0BADL;AAEPtG,MAAAA,OAAO,EAAET,MAFF;AAGPkB,MAAAA,OAAO,EAAE;AAHF,KAAD,CAAR;AAKD,GAvCH,EAwCGyB,KAxCH,CAwCUC,GAAD,IAAS9E,OAAO,CAAC+E,KAAR,CAAcD,GAAG,CAAC9E,OAAlB,CAxClB;AAyCD,CA5CM","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  let relArr = [];\r\n  let storyArr = [];\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            res.forEach((char) =>\r\n              relArr.push({\r\n                ...char.data(),\r\n                id: char.id,\r\n                relation: doc\r\n                  .data()\r\n                  .relatives.find((c) => c.character_id === char.id).relation,\r\n              })\r\n            );\r\n\r\n            const mainQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"mainCharacters\", \"array-contains\", id)\r\n              .get();\r\n\r\n            const secondaryQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n              const allStory = result[0].docs.concat(result[1].docs);\r\n              allStory.forEach((story) => {\r\n                storyArr.push({\r\n                  id: story.id,\r\n                  title: story.data().title,\r\n                  authorId: story.data().authorId,\r\n                  banner: story.data().banner,\r\n                });\r\n              });\r\n              dispatch({\r\n                type: types.GET_CHARACTER,\r\n                payload: {\r\n                  character: {\r\n                    ...doc.data(),\r\n                    id: doc.id,\r\n                    relatives: relArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                    stories: storyArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                  },\r\n                  charaExists: true,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  //const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .delete()\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHARACTER,\r\n              payload: {\r\n                message: \"Character deleted successfully\",\r\n                loading: false,\r\n                deleted: true,\r\n                charaExists: false,\r\n              },\r\n            });\r\n          });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((c) =>\r\n          id ? c.public : c\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isCharacterFavorite = (charId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"charactersLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"characterId\", \"==\", charId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_CHARACTER_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addCharacterToFavorite = (\r\n  id,\r\n  username,\r\n  characterName,\r\n  authorId\r\n) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a character\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"charactersLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      characterId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${characterName} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeCharacterFromFavorite = (id, characterName) => (\r\n  dispatch\r\n) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"characterId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"charactersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${characterName} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitCharaterFeedback = (info, userComment) => (dispatch) => {\r\n  const { characterName, ...allInfo } = info;\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n  if (userComment) return message.error(\"You have already sent feedback\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment posted successfully\",\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const getCharacterComments = (id) => (dispatch) => {\r\n  let comments = [];\r\n  db.collection(\"comments\")\r\n    .where(\"characterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"asc\")\r\n    .get()\r\n    .then((comm) => {\r\n      let userQueries = [];\r\n      comm.forEach((c) => comments.push({ ...c.data(), id: c.id }));\r\n      comments.forEach((comment) => {\r\n        userQueries.push(db.collection(\"users\").doc(comment.userId).get());\r\n      });\r\n\r\n      Promise.all(userQueries).then((res) => {\r\n        comments = comments.map((c) => ({\r\n          ...c,\r\n          userImage: res.find((d) => d.id === c.userId).data().image,\r\n        }));\r\n        const userComment = auth.currentUser\r\n          ? comments.find((c) => c.userId === auth.currentUser.uid)\r\n          : null;\r\n        comments = auth.currentUser\r\n          ? comments.filter((c) => c.userId !== auth.currentUser.uid)\r\n          : comments;\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            comments,\r\n            userComment,\r\n            loadingComments: false,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const deleteCharacterComment = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment deleted successfully\",\r\n      });\r\n    });\r\n};\r\n\r\nexport const rateComment = (commentId, type) => (dispatch) => {\r\n  dispatch({ type: types.RATE_COMMENT, rated: true });\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to rate a comment\");\r\n  db.collection(\"comments\")\r\n    .doc(commentId)\r\n    .get()\r\n    .then((doc) => {\r\n      const isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\r\n      const isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\r\n      if ((type === \"like\" && isLiked) || (type === \"dislike\" && isDisliked)) {\r\n        return;\r\n      }\r\n      if (type === \"like\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            dislikedBy: isDisliked\r\n              ? doc.data().dislikedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().dislikedBy,\r\n            likedBy: [...doc.data().likedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.SUBMIT_COMMENT, message: \"Voilou\" });\r\n          });\r\n      } else if (type === \"dislike\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            likedBy: isLiked\r\n              ? doc.data().likedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().likedBy,\r\n            dislikedBy: [...doc.data().dislikedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.RATE_COMMENT, rated: false });\r\n          });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getCharactersFromSearch = (search) => (dispatch) => {\r\n  let result = [];\r\n  dispatch({ type: types.GET_CHARACTERS_FROM_SEARCH, loading: true });\r\n  db.collection(\"characters\")\r\n    .where(\"public\", \"==\", true)\r\n    .get()\r\n    .then((docs) => {\r\n      docs.forEach((doc) => {\r\n        const firstname = doc.data().firstname.toLowerCase();\r\n        const lastname = doc.data().lastname.toLowerCase();\r\n        const authorName = doc.data().authorName.toLowerCase().split(\" \");\r\n        const searchTerm = search.split(\"-\");\r\n\r\n        const firstnameIncluded = searchTerm.some(\r\n          (word) => firstname.indexOf(word) !== -1\r\n        );\r\n        const lastnameIncluded = searchTerm.some(\r\n          (word) => lastname.indexOf(word) !== -1\r\n        );\r\n        const authorIncluded = searchTerm.every((word) =>\r\n          authorName.includes(word)\r\n        );\r\n        const orAuthorIncluded = searchTerm.some(\r\n          (word) => doc.data().authorName.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        if (\r\n          firstnameIncluded ||\r\n          lastnameIncluded ||\r\n          authorIncluded ||\r\n          orAuthorIncluded\r\n        ) {\r\n          result.push({ ...doc.data(), id: doc.id });\r\n        }\r\n        return result;\r\n      });\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.GET_CHARACTERS_FROM_SEARCH,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}