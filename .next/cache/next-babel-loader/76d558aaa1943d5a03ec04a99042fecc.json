{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, auth, storage } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport const log_in = (email, password) => dispatch => {\n  console.log(email, password);\n  auth.signInWithEmailAndPassword(email, password);\n};\nexport const getProfile = id => dispatch => {\n  db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(doc => {\n    return dispatch({\n      type: types.GET_PROFILE,\n      payload: _objectSpread({\n        id: doc.id\n      }, doc.data())\n    });\n  });\n};\nexport const getFavoriteAuthors = id => dispatch => {\n  let addedOn;\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"usersLikes\").where(\"senderId\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().recipient];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_AUTHORS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getFollowers = id => dispatch => {\n  let addedOn;\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().senderId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FOLLOWERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getIsFollowing = userId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(snapshot => {\n      const answer = snapshot.docs.length > 0 ? true : false;\n      return dispatch({\n        type: types.IS_FOLLOWING,\n        payload: answer\n      });\n    });\n  }\n};\nexport const followUser = (id, isFavorite, newFollower) => dispatch => {\n  if (isFavorite) return message.warning(\"You are already following this user\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"usersLikes\").add({\n    sender: newFollower.username,\n    senderId: newFollower.uid,\n    recipient: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(\"You are now following this user\")).catch(err => message.error(\"There has been a problem\"));\n};\nexport const unfollowUser = (id, isFavorite) => dispatch => {\n  if (!isFavorite) return message.warning(\"You are not following this user yet\");\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(\"User successfully unfollowed\")).catch(err => message.error(\"There has been a problem\"));\n};\nexport const changeProfile = (data, setOpen, username, userImage) => dispatch => {\n  const batch = db.batch();\n\n  const {\n    newPassword,\n    actualPassword\n  } = data,\n        newInfo = _objectWithoutProperties(data, [\"newPassword\", \"actualPassword\"]);\n\n  const imageName = `${auth.currentUser.uid}_${data.username}`;\n  const userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n  const userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n  const userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n  const userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get();\n\n  const reauthenticate = currentPassword => {\n    const user = auth.currentUser;\n    const cred = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);\n    return user.reauthenticateWithCredential(cred);\n  };\n\n  if (newPassword) {\n    reauthenticate(actualPassword).then(() => {\n      const user = auth.currentUser;\n      user.updatePassword(newPassword).then(() => {\n        if (typeof data.image === \"object\") {\n          storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n            return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n          }).then(url => {\n            if (data.username !== username || data.image !== userImage) {\n              Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(res => {\n                res[0].forEach(story => {\n                  batch.update(db.collection(\"stories\").doc(story.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(chap => {\n                  batch.update(db.collection(\"chapters\").doc(chap.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(char => {\n                  batch.update(db.collection(\"characters\").doc(char.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(char => {\n                  batch.update(db.collection(\"comments\").doc(char.id), {\n                    userImage: url,\n                    username: data.username\n                  });\n                });\n              });\n            } else {\n              batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({\n                image: url\n              }, newInfo));\n              batch.commit().then(() => {\n                setOpen(false);\n                message.success(\"Your profile has been successfully updated\");\n              }).catch(error => {\n                message.error(error.message);\n              });\n            }\n          });\n        } else {\n          if (data.username !== username) {\n            Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(res => {\n              res[0].forEach(story => {\n                batch.update(db.collection(\"stories\").doc(story.id), {\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(chap => {\n                batch.update(db.collection(\"chapters\").doc(chap.id), {\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(char => {\n                batch.update(db.collection(\"characters\").doc(char.id), {\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(char => {\n                batch.update(db.collection(\"comments\").doc(char.id), {\n                  username: data.username\n                });\n              });\n            });\n            batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n          } else {\n            batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n            batch.commit().then(() => {\n              setOpen(false);\n              message.success(\"Your profile has been successfully updated\");\n            }).catch(error => {\n              message.error(error.message);\n            });\n          }\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    if (typeof data.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        if (data.username !== username || data.image !== userImage) {\n          Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(res => {\n            res[0].forEach(story => {\n              batch.update(db.collection(\"stories\").doc(story.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(chap => {\n              batch.update(db.collection(\"chapters\").doc(chap.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(char => {\n              batch.update(db.collection(\"characters\").doc(char.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(char => {\n              batch.update(db.collection(\"comments\").doc(char.id), {\n                userImage: url,\n                username: data.username\n              });\n            });\n          });\n          batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n          batch.commit().then(() => {\n            setOpen(false);\n            message.success(\"Your profile has been successfully updated\");\n          }).catch(error => {\n            message.error(error.message);\n          });\n        } else {\n          batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n          batch.commit().then(() => {\n            setOpen(false);\n            message.success(\"Your profile has been successfully updated\");\n          }).catch(error => {\n            message.error(error.message);\n          });\n        }\n      });\n    } else {\n      if (data.username !== username) {\n        Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(res => {\n          res[0].forEach(story => {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              authorName: data.username\n            });\n          });\n          res[0].forEach(chap => {\n            batch.update(db.collection(\"chapters\").doc(chap.id), {\n              authorName: data.username\n            });\n          });\n          res[0].forEach(char => {\n            batch.update(db.collection(\"characters\").doc(char.id), {\n              authorName: data.username\n            });\n          });\n          res[0].forEach(char => {\n            batch.update(db.collection(\"comments\").doc(char.id), {\n              username: data.username\n            });\n          });\n          batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n          batch.commit().then(() => {\n            setOpen(false);\n            message.success(\"Your profile has been successfully updated\");\n          }).catch(error => {\n            message.error(error.message);\n          });\n        });\n      } else {\n        batch.update(db.collection(\"users\").doc(auth.currentUser.uid), _objectSpread({}, newInfo));\n        batch.commit().then(() => {\n          setOpen(false);\n          message.success(\"Your profile has been successfully updated\");\n        }).catch(error => {\n          message.error(error.message);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","storage","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","userId","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","snapshot","answer","length","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","success","catch","err","unfollowUser","delete","changeProfile","setOpen","userImage","batch","newPassword","actualPassword","newInfo","imageName","userStoriesQuery","userChaptersQuery","userCharactersQuery","userCommentsQuery","reauthenticate","currentPassword","cred","EmailAuthProvider","credential","reauthenticateWithCredential","updatePassword","image","ref","put","child","getDownloadURL","url","story","update","authorName","chap","char","commit"],"mappings":"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","sourcesContent":["import { db, auth, storage } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs.length > 0 ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.uid,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const changeProfile = (data, setOpen, username, userImage) => (\r\n  dispatch\r\n) => {\r\n  const batch = db.batch();\r\n  const { newPassword, actualPassword, ...newInfo } = data;\r\n  const imageName = `${auth.currentUser.uid}_${data.username}`;\r\n\r\n  const userStoriesQuery = db\r\n    .collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userChaptersQuery = db\r\n    .collection(\"chapters\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userCharactersQuery = db\r\n    .collection(\"characters\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userCommentsQuery = db\r\n    .collection(\"comments\")\r\n    .where(\"userId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n\r\n  const reauthenticate = (currentPassword) => {\r\n    const user = auth.currentUser;\r\n    const cred = firebase.auth.EmailAuthProvider.credential(\r\n      user.email,\r\n      currentPassword\r\n    );\r\n    return user.reauthenticateWithCredential(cred);\r\n  };\r\n\r\n  if (newPassword) {\r\n    reauthenticate(actualPassword)\r\n      .then(() => {\r\n        const user = auth.currentUser;\r\n        user.updatePassword(newPassword).then(() => {\r\n          if (typeof data.image === \"object\") {\r\n            storage\r\n              .ref(`${auth.currentUser.uid}/${imageName}`)\r\n              .put(data.image)\r\n              .then(() => {\r\n                return storage\r\n                  .ref(auth.currentUser.uid)\r\n                  .child(imageName)\r\n                  .getDownloadURL();\r\n              })\r\n              .then((url) => {\r\n                if (data.username !== username || data.image !== userImage) {\r\n                  Promise.all([\r\n                    userStoriesQuery,\r\n                    userChaptersQuery,\r\n                    userCharactersQuery,\r\n                    userCommentsQuery,\r\n                  ]).then((res) => {\r\n                    res[0].forEach((story) => {\r\n                      batch.update(db.collection(\"stories\").doc(story.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((chap) => {\r\n                      batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((char) => {\r\n                      batch.update(db.collection(\"characters\").doc(char.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((char) => {\r\n                      batch.update(db.collection(\"comments\").doc(char.id), {\r\n                        userImage: url,\r\n                        username: data.username,\r\n                      });\r\n                    });\r\n                  });\r\n                } else {\r\n                  batch.update(\r\n                    db.collection(\"users\").doc(auth.currentUser.uid),\r\n                    {\r\n                      image: url,\r\n                      ...newInfo,\r\n                    }\r\n                  );\r\n                  batch\r\n                    .commit()\r\n                    .then(() => {\r\n                      setOpen(false);\r\n                      message.success(\r\n                        \"Your profile has been successfully updated\"\r\n                      );\r\n                    })\r\n                    .catch((error) => {\r\n                      message.error(error.message);\r\n                    });\r\n                }\r\n              });\r\n          } else {\r\n            if (data.username !== username) {\r\n              Promise.all([\r\n                userStoriesQuery,\r\n                userChaptersQuery,\r\n                userCharactersQuery,\r\n                userCommentsQuery,\r\n              ]).then((res) => {\r\n                res[0].forEach((story) => {\r\n                  batch.update(db.collection(\"stories\").doc(story.id), {\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((chap) => {\r\n                  batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((char) => {\r\n                  batch.update(db.collection(\"characters\").doc(char.id), {\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((char) => {\r\n                  batch.update(db.collection(\"comments\").doc(char.id), {\r\n                    username: data.username,\r\n                  });\r\n                });\r\n              });\r\n              batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n                ...newInfo,\r\n              });\r\n            } else {\r\n              batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n                ...newInfo,\r\n              });\r\n              batch\r\n                .commit()\r\n                .then(() => {\r\n                  setOpen(false);\r\n                  message.success(\"Your profile has been successfully updated\");\r\n                })\r\n                .catch((error) => {\r\n                  message.error(error.message);\r\n                });\r\n            }\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    if (typeof data.image === \"object\") {\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .put(data.image)\r\n        .then(() => {\r\n          return storage\r\n            .ref(auth.currentUser.uid)\r\n            .child(imageName)\r\n            .getDownloadURL();\r\n        })\r\n        .then((url) => {\r\n          if (data.username !== username || data.image !== userImage) {\r\n            Promise.all([\r\n              userStoriesQuery,\r\n              userChaptersQuery,\r\n              userCharactersQuery,\r\n              userCommentsQuery,\r\n            ]).then((res) => {\r\n              res[0].forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((chap) => {\r\n                batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((char) => {\r\n                batch.update(db.collection(\"characters\").doc(char.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((char) => {\r\n                batch.update(db.collection(\"comments\").doc(char.id), {\r\n                  userImage: url,\r\n                  username: data.username,\r\n                });\r\n              });\r\n            });\r\n            batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n              ...newInfo,\r\n            });\r\n            batch\r\n              .commit()\r\n              .then(() => {\r\n                setOpen(false);\r\n                message.success(\"Your profile has been successfully updated\");\r\n              })\r\n              .catch((error) => {\r\n                message.error(error.message);\r\n              });\r\n          } else {\r\n            batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n              ...newInfo,\r\n            });\r\n            batch\r\n              .commit()\r\n              .then(() => {\r\n                setOpen(false);\r\n                message.success(\"Your profile has been successfully updated\");\r\n              })\r\n              .catch((error) => {\r\n                message.error(error.message);\r\n              });\r\n          }\r\n        });\r\n    } else {\r\n      if (data.username !== username) {\r\n        Promise.all([\r\n          userStoriesQuery,\r\n          userChaptersQuery,\r\n          userCharactersQuery,\r\n          userCommentsQuery,\r\n        ]).then((res) => {\r\n          res[0].forEach((story) => {\r\n            batch.update(db.collection(\"stories\").doc(story.id), {\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((chap) => {\r\n            batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((char) => {\r\n            batch.update(db.collection(\"characters\").doc(char.id), {\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((char) => {\r\n            batch.update(db.collection(\"comments\").doc(char.id), {\r\n              username: data.username,\r\n            });\r\n          });\r\n          batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n            ...newInfo,\r\n          });\r\n\r\n          batch\r\n            .commit()\r\n            .then(() => {\r\n              setOpen(false);\r\n              message.success(\"Your profile has been successfully updated\");\r\n            })\r\n            .catch((error) => {\r\n              message.error(error.message);\r\n            });\r\n        });\r\n      } else {\r\n        batch.update(db.collection(\"users\").doc(auth.currentUser.uid), {\r\n          ...newInfo,\r\n        });\r\n\r\n        batch\r\n          .commit()\r\n          .then(() => {\r\n            setOpen(false);\r\n            message.success(\"Your profile has been successfully updated\");\r\n          })\r\n          .catch((error) => {\r\n            message.error(error.message);\r\n          });\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}