{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comments = _ref.comments,\n      auth = _ref.auth,\n      commentBody = _ref.commentBody,\n      setCommentBody = _ref.setCommentBody,\n      submit = _ref.submit,\n      responseBody = _ref.responseBody,\n      setResponseBody = _ref.setResponseBody;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openReply = _React$useState2[0],\n      setOpenReply = _React$useState2[1];\n\n  var topComments = comments.filter(function (comm) {\n    return !comm.answer;\n  });\n  var responses = comments.filter(function (comm) {\n    return comm.answer;\n  });\n  var allComments = topComments.map(function (comm) {\n    var res = [];\n    responses.forEach(function (response) {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: function onChange(e) {\n      return setCommentBody(e.target.value);\n    },\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(function (comment) {\n    return __jsx(Comment, {\n      key: comment.id,\n      actions: [__jsx(\"span\", {\n        key: \"comment-basic-reply-to\",\n        onClick: function onClick() {\n          return setOpenReply(true);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, \"Reply\", \" \"), comment.userId === auth.uid && __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 44\n        }\n      }, \"Delete\"), auth && auth.uid && __jsx(Report, {\n        type: \"comment\",\n        data: comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 33\n        }\n      })],\n      author: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }\n      }, comment.username)),\n      avatar: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }, __jsx(Avatar, {\n        src: comment.userImage,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }))),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, openReply && __jsx(React.Fragment, null, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, __jsx(Input.TextArea, {\n      value: responseBody,\n      onChange: function onChange(e) {\n        return setResponseBody(e.target.value);\n      },\n      autoSize: {\n        minRows: 5\n      },\n      showCount: true,\n      maxLength: 800,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    })), __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      onClick: submit,\n      type: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, \"Comment\"))), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    })), comment.responses.map(function (c) {\n      return __jsx(Comment, {\n        key: c.id,\n        actions: [__jsx(\"span\", {\n          key: \"comment-basic-reply-to\",\n          onClick: function onClick() {\n            return setOpenReply(true);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }\n        }, \"Reply\", \" \"), comment.userId === auth.uid && __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 48\n          }\n        }, \"Delete\"), auth && auth.uid && __jsx(Report, {\n          type: \"comment\",\n          data: comment,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 37\n          }\n        })],\n        author: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 19\n          }\n        }, c.username)),\n        avatar: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }\n        }, __jsx(Avatar, {\n          src: c.userImage,\n          alt: c.username,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }\n        }))),\n        content: __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 24\n          }\n        }, c.content),\n        datetime: __jsx(Tooltip, {\n          title: comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }\n        }, comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      });\n    }));\n  }));\n};\n\n_s(Comments, \"uyeb//TN2gWkLWkO/ZM8h2GkMnY=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Link","moment","Report","Comments","comments","auth","commentBody","setCommentBody","submit","responseBody","setResponseBody","React","useState","openReply","setOpenReply","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","user","e","target","value","minRows","marginBottom","length","comment","userId","uid","username","userImage","content","createdAt","unix","seconds","format","fromNow","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  commentBody,\r\n  setCommentBody,\r\n  submit,\r\n  responseBody,\r\n  setResponseBody,\r\n}) => {\r\n  const [openReply, setOpenReply] = React.useState(false);\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <Comment\r\n          key={comment.id}\r\n          actions={[\r\n            <span\r\n              key=\"comment-basic-reply-to\"\r\n              onClick={() => setOpenReply(true)}\r\n            >\r\n              Reply{\" \"}\r\n            </span>,\r\n            comment.userId === auth.uid && <span>Delete</span>,\r\n            auth && auth.uid && <Report type=\"comment\" data={comment} />,\r\n          ]}\r\n          author={\r\n            <Link href={`/profile/${comment.userId}`}>\r\n              <a>{comment.username}</a>\r\n            </Link>\r\n          }\r\n          avatar={\r\n            <Link href={`/profile/${comment.userId}`}>\r\n              <a>\r\n                <Avatar src={comment.userImage} alt={comment.username} />\r\n              </a>\r\n            </Link>\r\n          }\r\n          content={<p>{comment.content}</p>}\r\n          datetime={\r\n            <Tooltip\r\n              title={\r\n                comment.createdAt && typeof comment.createdAt === \"object\"\r\n                  ? moment\r\n                      .unix(comment.createdAt.seconds)\r\n                      .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n              }\r\n            >\r\n              <span>\r\n                {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                  ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                  : moment(comment.createdAt).fromNow()}\r\n              </span>\r\n            </Tooltip>\r\n          }\r\n        >\r\n          {openReply && (\r\n            <>\r\n              <Row>\r\n                <Col md={24}>\r\n                  <Input.TextArea\r\n                    value={responseBody}\r\n                    onChange={(e) => setResponseBody(e.target.value)}\r\n                    autoSize={{ minRows: 5 }}\r\n                    showCount={true}\r\n                    maxLength={800}\r\n                  ></Input.TextArea>\r\n                </Col>\r\n                <Col md={24}>\r\n                  <Button onClick={submit} type=\"primary\">\r\n                    Comment\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Divider />\r\n            </>\r\n          )}\r\n          {comment.responses.map((c) => (\r\n            <Comment\r\n              key={c.id}\r\n              actions={[\r\n                <span\r\n                  key=\"comment-basic-reply-to\"\r\n                  onClick={() => setOpenReply(true)}\r\n                >\r\n                  Reply{\" \"}\r\n                </span>,\r\n                comment.userId === auth.uid && <span>Delete</span>,\r\n                auth && auth.uid && <Report type=\"comment\" data={comment} />,\r\n              ]}\r\n              author={\r\n                <Link href={`/profile/${c.userId}`}>\r\n                  <a>{c.username}</a>\r\n                </Link>\r\n              }\r\n              avatar={\r\n                <Link href={`/profile/${c.userId}`}>\r\n                  <a>\r\n                    <Avatar src={c.userImage} alt={c.username} />\r\n                  </a>\r\n                </Link>\r\n              }\r\n              content={<p>{c.content}</p>}\r\n              datetime={\r\n                <Tooltip\r\n                  title={\r\n                    comment.createdAt && typeof c.createdAt === \"object\"\r\n                      ? moment\r\n                          .unix(c.createdAt.seconds)\r\n                          .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  }\r\n                >\r\n                  <span>\r\n                    {comment.createdAt && typeof c.createdAt === \"object\"\r\n                      ? moment.unix(c.createdAt.seconds).fromNow()\r\n                      : moment(c.createdAt).fromNow()}\r\n                  </span>\r\n                </Tooltip>\r\n              }\r\n            />\r\n          ))}\r\n        </Comment>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}