{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id, type) {\n  return function (dispatch) {\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        if (type === \"show\") {\n          var relatives = doc.data().relativesArr;\n          var relQueries = [];\n          relatives.forEach(function (rel) {\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\n          });\n          Promise.all(relQueries).then(function (res) {\n            return console.log(res);\n          });\n        } else {\n          dispatch({\n            type: types.GET_CHARACTER,\n            payload: {\n              character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              charaExists: true,\n              loading: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var charaId = \"\";\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(function (res) {\n      charaId = res.id;\n      var imageName = \"\".concat(res.id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"characters\").doc(charaId).update({\n            image: url\n          });\n        }).then(function () {\n          message.success(\"Character added successfully\");\n          dispatch({\n            type: types.ADD_CHARACTER,\n            payload: {\n              message: \"Character added successfully\",\n              characterId: charaId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          relativesArr: data.relatives.map(function (c) {\n            return c.character_id;\n          })\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        relativesArr: data.relatives.map(function (c) {\n          return c.character_id;\n        })\n      })).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id, firstname, lastname) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(firstname.toLowerCase()).concat(lastname && \"_\").concat(lastname && lastname.toLowerCase());\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      if (storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))) {\n        return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]();\n      }\n    }).then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              mainCharacters: story.data().mainCharacters.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryArr: story.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: story.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char) {\n              batch.update(db.collection(\"characters\").doc(_char.id), {\n                relativesArr: _char.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: _char.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n          }).then(function () {\n            db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(function (likes) {\n              likes.forEach(function (like) {\n                batch[\"delete\"](db.collection(\"charactersLikes\").doc(like.id));\n              });\n              batch.commit().then(function () {\n                dispatch({\n                  type: types.DELETE_CHARACTER,\n                  payload: {\n                    message: \"Character deleted successfully\",\n                    loading: false,\n                    deleted: true,\n                    charaExists: false\n                  }\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","batch","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","console","log","GET_CHARACTER","payload","character","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","currentUser","uid","put","child","getDownloadURL","url","update","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","c","character_id","deleteCharacter","DELETE_CHARACTER","where","docs","characters","filter","stories","story","mainCharacters","secondaryArr","secondaryCharacters","char","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","user","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => console.log(res));\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}