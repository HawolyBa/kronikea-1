{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id, type) {\n  return function (dispatch) {\n    var relArr = [];\n    var storyArr = [];\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        if (type === \"show\") {\n          var relatives = doc.data().relativesArr;\n          var relQueries = [];\n          relatives.forEach(function (rel) {\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\n          });\n          Promise.all(relQueries).then(function (res) {\n            res.forEach(function (_char) {\n              return relArr.push(_objectSpread(_objectSpread({}, _char.data()), {}, {\n                id: _char.id,\n                relation: doc.data().relatives.find(function (c) {\n                  return c.character_id === _char.id;\n                }).relation\n              }));\n            });\n            var mainQuery = db.collection(\"stories\").where(\"mainCharacters\", \"array-contains\", id).get();\n            var secondaryQuery = db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get();\n            Promise.all([mainQuery, secondaryQuery]).then(function (result) {\n              var allStory = result[0].docs.concat(result[1].docs);\n              allStory.forEach(function (story) {\n                storyArr.push({\n                  id: story.id,\n                  title: story.data().title,\n                  authorId: story.data().authorId,\n                  banner: story.data().banner\n                });\n              });\n              dispatch({\n                type: types.GET_CHARACTER,\n                payload: {\n                  character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                    id: doc.id,\n                    relatives: relArr.filter(function (r) {\n                      return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                    }),\n                    stories: storyArr.filter(function (r) {\n                      return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                    })\n                  }),\n                  charaExists: true,\n                  loading: false\n                }\n              });\n            });\n          });\n        } else {\n          dispatch({\n            type: types.GET_CHARACTER,\n            payload: {\n              character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              charaExists: true,\n              loading: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var charaId = \"\";\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(function (res) {\n      charaId = res.id;\n      var imageName = \"\".concat(res.id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"characters\").doc(charaId).update({\n            image: url\n          });\n        }).then(function () {\n          message.success(\"Character added successfully\");\n          dispatch({\n            type: types.ADD_CHARACTER,\n            payload: {\n              message: \"Character added successfully\",\n              characterId: charaId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          relativesArr: data.relatives.map(function (c) {\n            return c.character_id;\n          })\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        relativesArr: data.relatives.map(function (c) {\n          return c.character_id;\n        })\n      })).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id, firstname, lastname) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(firstname.toLowerCase()).concat(lastname && \"_\").concat(lastname && lastname.toLowerCase());\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      if (storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))) {\n        return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]();\n      }\n    }).then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              mainCharacters: story.data().mainCharacters.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryArr: story.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: story.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char2) {\n              batch.update(db.collection(\"characters\").doc(_char2.id), {\n                relativesArr: _char2.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: _char2.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n          }).then(function () {\n            db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(function (likes) {\n              likes.forEach(function (like) {\n                batch[\"delete\"](db.collection(\"charactersLikes\").doc(like.id));\n              });\n              batch.commit().then(function () {\n                dispatch({\n                  type: types.DELETE_CHARACTER,\n                  payload: {\n                    message: \"Character deleted successfully\",\n                    loading: false,\n                    deleted: true,\n                    charaExists: false\n                  }\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(id) {\n  return function (dispatch) {\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]).filter(function (c) {\n          return id ? c[\"public\"] : c;\n        });\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters(id) {\n  return function (dispatch) {\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};\nexport var submitCharaterFeedback = function submitCharaterFeedback(info, userComment) {\n  return function (dispatch) {\n    var characterName = info.characterName,\n        allInfo = _objectWithoutProperties(info, [\"characterName\"]);\n\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    if (!info.content) return message.error(\"Content must not be empty\");\n    if (userComment) return message.error(\"You have already sent feedback\");\n    db.collection(\"comments\").add(_objectSpread(_objectSpread({}, allInfo), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function () {\n      if (auth.currentUser.uid !== info.authorId) {\n        return db.collection(\"notifications\").add({\n          type: \"characterLike\",\n          read: false,\n          recipient: info.authorId,\n          sender: auth.currentUser.uid,\n          characterId: info.characterId,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          message: \"\".concat(username, \" liked your character \").concat(characterName)\n        });\n      }\n    }).then(function () {\n      dispatch({\n        type: types.SUBMIT_COMMENT,\n        message: \"Comment posted successfully\"\n      });\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};\nexport var getCharacterComments = function getCharacterComments(id) {\n  return function (dispatch) {\n    var comments = [];\n    db.collection(\"comments\").where(\"characterId\", \"==\", id).orderBy(\"createdAt\", \"asc\").get().then(function (comm) {\n      var userQueries = [];\n      comm.forEach(function (c) {\n        return comments.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n          id: c.id\n        }));\n      });\n      comments.forEach(function (comment) {\n        userQueries.push(db.collection(\"users\").doc(comment.userId).get());\n      });\n      Promise.all(userQueries).then(function (res) {\n        comments = comments.map(function (c) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            userImage: res.find(function (d) {\n              return d.id === c.userId;\n            }).data().image\n          });\n        });\n        var userComment = auth.currentUser ? comments.find(function (c) {\n          return c.userId === auth.currentUser.uid;\n        }) : null;\n        comments = auth.currentUser ? comments.filter(function (c) {\n          return c.userId !== auth.currentUser.uid;\n        }) : comments;\n        dispatch({\n          type: types.GET_COMMENTS,\n          payload: {\n            comments: comments,\n            userComment: userComment,\n            loadingComments: false\n          }\n        });\n      });\n    });\n  };\n};\nexport var deleteCharacterComment = function deleteCharacterComment(id) {\n  return function (dispatch) {\n    db.collection(\"comments\").doc(id)[\"delete\"]().then(function () {\n      dispatch({\n        type: types.SUBMIT_COMMENT,\n        message: \"Comment deleted successfully\"\n      });\n    });\n  };\n};\nexport var rateComment = function rateComment(commentId, type) {\n  return function (dispatch) {\n    dispatch({\n      type: types.RATE_COMMENT,\n      rated: true\n    });\n    db.collection(\"comments\").doc(commentId).get().then(function (doc) {\n      var isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\n      var isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\n\n      if (type === \"like\" && isLiked || type === \"dislike\" && isDisliked) {\n        return;\n      }\n\n      if (type === \"like\") {\n        db.collection(\"comments\").doc(commentId).update({\n          dislikedBy: isDisliked ? doc.data().dislikedBy.filter(function (d) {\n            return d !== auth.currentUser.uid;\n          }) : doc.data().dislikedBy,\n          likedBy: [].concat(_toConsumableArray(doc.data().likedBy), [auth.currentUser.uid])\n        }).then(function () {\n          dispatch({\n            type: types.SUBMIT_COMMENT,\n            message: \"Voilou\"\n          });\n        });\n      } else if (type === \"dislike\") {\n        db.collection(\"comments\").doc(commentId).update({\n          likedBy: isLiked ? doc.data().likedBy.filter(function (d) {\n            return d !== auth.currentUser.uid;\n          }) : doc.data().likedBy,\n          dislikedBy: [].concat(_toConsumableArray(doc.data().dislikedBy), [auth.currentUser.uid])\n        }).then(function () {\n          dispatch({\n            type: types.RATE_COMMENT,\n            rated: false\n          });\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","relArr","storyArr","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","char","relation","find","c","character_id","mainQuery","where","secondaryQuery","result","allStory","docs","concat","story","title","authorId","banner","GET_CHARACTER","payload","character","filter","r","currentUser","uid","stories","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","put","child","getDownloadURL","url","update","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","deleteCharacter","DELETE_CHARACTER","batch","characters","mainCharacters","secondaryArr","secondaryCharacters","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","user","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr","submitCharaterFeedback","info","userComment","characterName","allInfo","emailVerified","content","read","recipient","sender","username","SUBMIT_COMMENT","getCharacterComments","comments","orderBy","comm","userQueries","comment","userImage","d","GET_COMMENTS","loadingComments","deleteCharacterComment","rateComment","commentId","RATE_COMMENT","rated","isLiked","likedBy","includes","isDisliked","dislikedBy"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  let relArr = [];\r\n  let storyArr = [];\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            res.forEach((char) =>\r\n              relArr.push({\r\n                ...char.data(),\r\n                id: char.id,\r\n                relation: doc\r\n                  .data()\r\n                  .relatives.find((c) => c.character_id === char.id).relation,\r\n              })\r\n            );\r\n\r\n            const mainQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"mainCharacters\", \"array-contains\", id)\r\n              .get();\r\n\r\n            const secondaryQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n              const allStory = result[0].docs.concat(result[1].docs);\r\n              allStory.forEach((story) => {\r\n                storyArr.push({\r\n                  id: story.id,\r\n                  title: story.data().title,\r\n                  authorId: story.data().authorId,\r\n                  banner: story.data().banner,\r\n                });\r\n              });\r\n              dispatch({\r\n                type: types.GET_CHARACTER,\r\n                payload: {\r\n                  character: {\r\n                    ...doc.data(),\r\n                    id: doc.id,\r\n                    relatives: relArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                    stories: storyArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                  },\r\n                  charaExists: true,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((c) =>\r\n          id ? c.public : c\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitCharaterFeedback = (info, userComment) => (dispatch) => {\r\n  const { characterName, ...allInfo } = info;\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n  if (userComment) return message.error(\"You have already sent feedback\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...allInfo,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      if (auth.currentUser.uid !== info.authorId) {\r\n        return db.collection(\"notifications\").add({\r\n          type: \"characterLike\",\r\n          read: false,\r\n          recipient: info.authorId,\r\n          sender: auth.currentUser.uid,\r\n          characterId: info.characterId,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message: `${username} liked your character ${characterName}`,\r\n        });\r\n      }\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment posted successfully\",\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const getCharacterComments = (id) => (dispatch) => {\r\n  let comments = [];\r\n  db.collection(\"comments\")\r\n    .where(\"characterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"asc\")\r\n    .get()\r\n    .then((comm) => {\r\n      let userQueries = [];\r\n      comm.forEach((c) => comments.push({ ...c.data(), id: c.id }));\r\n      comments.forEach((comment) => {\r\n        userQueries.push(db.collection(\"users\").doc(comment.userId).get());\r\n      });\r\n\r\n      Promise.all(userQueries).then((res) => {\r\n        comments = comments.map((c) => ({\r\n          ...c,\r\n          userImage: res.find((d) => d.id === c.userId).data().image,\r\n        }));\r\n        const userComment = auth.currentUser\r\n          ? comments.find((c) => c.userId === auth.currentUser.uid)\r\n          : null;\r\n        comments = auth.currentUser\r\n          ? comments.filter((c) => c.userId !== auth.currentUser.uid)\r\n          : comments;\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            comments,\r\n            userComment,\r\n            loadingComments: false,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const deleteCharacterComment = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment deleted successfully\",\r\n      });\r\n    });\r\n};\r\n\r\nexport const rateComment = (commentId, type) => (dispatch) => {\r\n  dispatch({ type: types.RATE_COMMENT, rated: true });\r\n  db.collection(\"comments\")\r\n    .doc(commentId)\r\n    .get()\r\n    .then((doc) => {\r\n      const isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\r\n      const isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\r\n      if ((type === \"like\" && isLiked) || (type === \"dislike\" && isDisliked)) {\r\n        return;\r\n      }\r\n      if (type === \"like\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            dislikedBy: isDisliked\r\n              ? doc.data().dislikedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().dislikedBy,\r\n            likedBy: [...doc.data().likedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.SUBMIT_COMMENT, message: \"Voilou\" });\r\n          });\r\n      } else if (type === \"dislike\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            likedBy: isLiked\r\n              ? doc.data().likedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().likedBy,\r\n            dislikedBy: [...doc.data().dislikedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.RATE_COMMENT, rated: false });\r\n          });\r\n      }\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}