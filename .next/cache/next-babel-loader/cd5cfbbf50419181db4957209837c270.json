{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\pages\\\\story\\\\new.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Row, Col, Space, Divider, Form, Spin, message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { CATEGORIES, COPYRIGHTS, LANGUAGES, STATUS } from \"../../utils/constants\";\nimport { useAuth } from \"../../hooks/userHooks\";\nimport { getUserCharacters } from \"../../redux/actions/charactersActions\";\nimport { addStory } from \"../../redux/actions/storiesActions\";\nimport InputGroup from \"../../components/common/Input\";\nimport SelectGroup from \"../../components/common/Select\";\nimport Tags from \"../../components/forms/Tags\";\nimport UploadImage from \"../../components/forms/UploadImage\";\nimport Loader from \"../../components/common/Loader\";\n\nconst NewStory = () => {\n  const auth = useAuth();\n  const [form] = Form.useForm();\n  const router = useRouter();\n\n  const submit = values => {\n    console.log(values);\n  };\n\n  const onFailed = error => {\n    const errorName = error.errorFields[0].name.toString();\n    form.scrollToField(errorName); //message.error(\"There are errors\");\n  };\n\n  return __jsx(\"div\", {\n    className: \"new-story custom-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Add a new story\"), __jsx(Form, {\n    scrollToFirstError: true,\n    onFinishFailed: onFailed,\n    onFinish: submit,\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"A title is required\"\n    }],\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    id: \"title\",\n    className: \"input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    value: form.getFieldValue(\"title\"),\n    onChange: val => form.setFieldsValue({\n      title: val\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }))), __jsx(Form.Item, {\n    name: \"categories\",\n    rules: [{\n      required: true,\n      message: \"A category is required\"\n    }],\n    label: \"Categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    id: \"categories\",\n    className: \"input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    value: form.getFieldValue(\"categories\"),\n    onChange: val => form.setFieldsValue({\n      categories: val\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Create\"))));\n};\n\nconst mapStateToProps = state => ({\n  characters: state.characters.userCharacters,\n  confirmMessage: state.stories.message,\n  storyId: state.stories.storyId,\n  loading: state.stories.loadingStory\n});\n\nexport default connect(mapStateToProps, {\n  getUserCharacters,\n  addStory\n})(NewStory);","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/pages/story/new.js"],"names":["React","Row","Col","Space","Divider","Form","Spin","message","connect","useRouter","CATEGORIES","COPYRIGHTS","LANGUAGES","STATUS","useAuth","getUserCharacters","addStory","InputGroup","SelectGroup","Tags","UploadImage","Loader","NewStory","auth","form","useForm","router","submit","values","console","log","onFailed","error","errorName","errorFields","name","toString","scrollToField","required","getFieldValue","val","setFieldsValue","title","categories","mapStateToProps","state","characters","userCharacters","confirmMessage","stories","storyId","loading","loadingStory"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Space, Divider, Form, Spin, message } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport {\r\n  CATEGORIES,\r\n  COPYRIGHTS,\r\n  LANGUAGES,\r\n  STATUS,\r\n} from \"../../utils/constants\";\r\nimport { useAuth } from \"../../hooks/userHooks\";\r\nimport { getUserCharacters } from \"../../redux/actions/charactersActions\";\r\nimport { addStory } from \"../../redux/actions/storiesActions\";\r\n\r\nimport InputGroup from \"../../components/common/Input\";\r\nimport SelectGroup from \"../../components/common/Select\";\r\nimport Tags from \"../../components/forms/Tags\";\r\nimport UploadImage from \"../../components/forms/UploadImage\";\r\nimport Loader from \"../../components/common/Loader\";\r\n\r\nconst NewStory = () => {\r\n  const auth = useAuth();\r\n  const [form] = Form.useForm();\r\n  const router = useRouter();\r\n\r\n  const submit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onFailed = (error) => {\r\n    const errorName = error.errorFields[0].name.toString();\r\n    form.scrollToField(errorName);\r\n    //message.error(\"There are errors\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-story custom-form\">\r\n      <div className=\"inner\">\r\n        <h2 className=\"side-heading\">Add a new story</h2>\r\n        <Form\r\n          scrollToFirstError\r\n          onFinishFailed={onFailed}\r\n          onFinish={submit}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            name=\"title\"\r\n            rules={[{ required: true, message: \"A title is required\" }]}\r\n            label=\"Title\"\r\n          >\r\n            <div id=\"title\" className=\"input-group\">\r\n              <input\r\n                className=\"form-input\"\r\n                type=\"text\"\r\n                value={form.getFieldValue(\"title\")}\r\n                onChange={(val) => form.setFieldsValue({ title: val })}\r\n              />\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"categories\"\r\n            rules={[{ required: true, message: \"A category is required\" }]}\r\n            label=\"Categories\"\r\n          >\r\n            <div id=\"categories\" className=\"input-group\">\r\n              <input\r\n                className=\"form-input\"\r\n                type=\"text\"\r\n                value={form.getFieldValue(\"categories\")}\r\n                onChange={(val) => form.setFieldsValue({ categories: val })}\r\n              />\r\n            </div>\r\n          </Form.Item>\r\n\r\n          <Divider />\r\n          <button type=\"submit\">Create</button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  characters: state.characters.userCharacters,\r\n  confirmMessage: state.stories.message,\r\n  storyId: state.stories.storyId,\r\n  loading: state.stories.loadingStory,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getUserCharacters, addStory })(\r\n  NewStory\r\n);\r\n"]},"metadata":{},"sourceType":"module"}