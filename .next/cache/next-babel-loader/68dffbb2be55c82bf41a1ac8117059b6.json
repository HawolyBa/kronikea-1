{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\"; // STORIES\n\nexport var getStory = function getStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        var main = doc.data().mainCharacters;\n        var secondary = doc.data().secondaryCharacters;\n        var mainArr = [];\n        var secondaryArr = [];\n        var mainQuery = main.map(function (c) {\n          return db.collection(\"characters\").doc(c).get();\n        });\n        var secondaryQuery = secondary.map(function (c) {\n          return db.collection(\"characters\").doc(c.id).get();\n        });\n        var mainRes = Promise.all(mainQuery);\n        var secondaryRes = Promise.all(secondaryQuery);\n        Promise.all([mainRes, secondaryRes]).then(function (result) {\n          result[0].forEach(function (docu) {\n            mainArr = [].concat(_toConsumableArray(mainArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          result[1].forEach(function (docu) {\n            secondaryArr = [].concat(_toConsumableArray(secondaryArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          dispatch({\n            type: types.GET_STORY,\n            storyExists: true,\n            payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id,\n              secondaryCharacters: secondaryArr,\n              mainCharacters: mainArr,\n              mainArr: doc.data().mainCharacters\n            })\n          });\n        });\n      } else {\n        dispatch({\n          type: types.DISPATCH_ERROR,\n          storyExists: false\n        });\n      }\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var addStory = function addStory(data) {\n  return function (dispatch) {\n    var _objectSpread2;\n\n    dispatch({\n      type: types.ADD_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var storyId = \"\";\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, (_objectSpread2 = {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      secondaryCharacters: [],\n      secondaryArr: [],\n      featured: false,\n      note: 0\n    }, _defineProperty(_objectSpread2, \"chaptersCount\", 0), _defineProperty(_objectSpread2, \"commentsCount\", 0), _defineProperty(_objectSpread2, \"lastUpdated\", firebase.firestore.FieldValue.serverTimestamp()), _objectSpread2))).then(function (res) {\n      storyId = res.id;\n\n      if (typeof data.banner === \"object\") {\n        var imageName = \"\".concat(res.id, \"_\").concat(data.title.toLowerCase().split(\" \").join(\"_\"));\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"stories\").doc(storyId).update({\n            banner: url\n          });\n        }).then(function () {\n          dispatch({\n            type: types.ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: storyId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: storyId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editStory = function editStory(data, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_STORY,\n      payload: {\n        loadingStory: true\n      }\n    });\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n          banner: url,\n          lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n        }));\n      }).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n      })).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteStory = function deleteStory(id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var batch = db.batch();\n    batch[\"delete\"](db.collection(\"stories\").doc(id));\n    var chaptersToDelete = db.collection(\"chapters\").where(\"storyId\", \"==\", id).get();\n    var likesToDelete = db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).get();\n    var locationsToDelete = db.collection(\"locations\").where(\"storyId\", \"==\", id).get();\n    Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(function (res) {\n      res[0].forEach(function (chap) {\n        batch[\"delete\"](db.collection(\"chapters\").doc(chap.id));\n      });\n      res[1].forEach(function (like) {\n        batch[\"delete\"](db.collection(\"storiesLikes\").doc(like.id));\n      });\n      res[2].forEach(function (loc) {\n        batch[\"delete\"](db.collection(\"locations\").doc(loc.id));\n      });\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_STORY,\n          payload: {\n            message: \"Story deleted successfully\",\n            loading: true,\n            deleted: true\n          }\n        });\n      });\n    });\n  };\n};\nexport var getUserStories = function getUserStories(id, type) {\n  return function (dispatch) {\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"stories\").where(\"authorId\", \"==\", userId).orderBy(\"createdAt\", \"desc\").get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]).filter(function (s) {\n          return id ? s[\"public\"] : s;\n        });\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteStories = function getFavoriteStories(id) {\n  return function (dispatch) {\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", userId).orderBy(\"createdAt\", \"desc\").get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().storyId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"stories\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_STORIES,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var isStoryFavorite = function isStoryFavorite(storyId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs[0] ? true : false;\n        return dispatch({\n          type: types.IS_STORY_FAVORITE,\n          payload: answer,\n          loadingFav: false\n        });\n      });\n    }\n  };\n};\nexport var addStoryToFavorite = function addStoryToFavorite(id, username, storyTitle, authorId) {\n  return function (dispatch) {\n    // if (isFavorite) return message.warning(\"You've already liked this story\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"storiesLikes\").add({\n      sender: username,\n      senderId: auth.currentUser.uid,\n      storyId: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      if (authorId !== auth.currentUser.uid) {\n        return db.collection(\"notifications\").doc(\"\".concat(auth.currentUser.uid).concat(id)).set({\n          type: \"storyLike\",\n          read: false,\n          recipient: authorId,\n          sender: auth.currentUser.uid,\n          storyId: id,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          message: \"\".concat(username, \" liked your story \").concat(storyTitle)\n        });\n      }\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" added to your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};\nexport var removeStoryFromFavorite = function removeStoryFromFavorite(id, storyTitle) {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" removed from your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var getStoryCharacters = function getStoryCharacters() {\n  return function (dispatch) {};\n}; // CHAPTERs\n\nexport var addChapter = function addChapter(data, secondaryCharacters) {\n  return function (dispatch) {\n    var chapId = \"\";\n    dispatch({\n      type: types.ADD_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").where(\"storyId\", \"==\", data.storyId).get().then(function (docs) {\n      var numberUsed = [];\n      docs.forEach(function (chapter) {\n        numberUsed.push(chapter.data().number);\n      });\n\n      if (numberUsed.includes(data.number)) {\n        dispatch({\n          type: types.ADD_CHAPTER,\n          payload: {\n            loading: false\n          }\n        });\n        message.error(\"You already have a chapter numbered: \".concat(data.number));\n      } else {\n        return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n          authorId: auth.currentUser.uid,\n          commentsCount: 0,\n          note: 0,\n          voters: [],\n          votesCount: 0,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })).then(function (res) {\n          chapId = res.id;\n          db.collection(\"stories\").doc(data.storyId).get().then(function (story) {\n            db.collection(\"stories\").doc(data.storyId).update({\n              chaptersCount: story.data().chaptersCount + 1,\n              secondaryCharacters: secondaryCharacters,\n              secondaryArr: secondaryCharacters.map(function (c) {\n                return c.id;\n              })\n            }).then(function () {\n              dispatch({\n                type: types.ADD_CHAPTER,\n                payload: {\n                  message: \"Chapter added successfully\",\n                  chapId: chapId,\n                  loading: false\n                }\n              });\n            });\n          });\n        });\n      }\n    });\n  };\n};\nexport var editChapter = function editChapter(data, storyId, chapid, secondaryCharacters) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(function () {\n      db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n        db.collection(\"stories\").doc(storyId).update({\n          secondaryCharacters: secondaryCharacters,\n          secondaryArr: secondaryCharacters.map(function (c) {\n            return c.id;\n          })\n        }).then(function () {\n          dispatch({\n            type: types.EDIT_CHAPTER,\n            payload: {\n              message: \"Chapter edited successfully\",\n              loading: false\n            }\n          });\n        });\n      });\n    });\n  };\n};\nexport var deleteChapter = function deleteChapter(id, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        loadingChapter: true\n      }\n    });\n    var batch = db.batch();\n    var commentsToDelete = db.collection(\"comments\").where(\"chapterId\", \"==\", id).get();\n    var chapter = db.collection(\"chapters\").doc(id).get();\n    var story = db.collection(\"stories\").doc(storyId).get();\n    Promise.all([chapter, story, commentsToDelete]).then(function (res) {\n      var charactersFromChapter = res[0].data().characters;\n      var charactersFromStory = res[1].data().secondaryCharacters;\n      var newArr = charactersFromStory.map(function (c) {\n        if (charactersFromChapter.includes(c.id)) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            times: c.times - 1\n          });\n        } else {\n          return c;\n        }\n      }).filter(function (c) {\n        return c.times > 0;\n      });\n      batch.update(db.collection(\"stories\").doc(storyId), {\n        chaptersCount: res[1].data().chaptersCount - 1,\n        secondaryCharacters: newArr,\n        secondaryArr: newArr.map(function (c) {\n          return c.id;\n        })\n      });\n      res[2].forEach(function (comm) {\n        return batch[\"delete\"](db.collection(\"comments\").doc(comm.id));\n      });\n      batch[\"delete\"](db.collection(\"chapters\").doc(id));\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            message: \"Chapter deleted successfully\",\n            loadingChapter: false\n          }\n        });\n      });\n    });\n  };\n};\nexport var getChapter = function getChapter(storyId, id, type) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n      if (doc.exists) {\n        db.collection(\"chapters\").doc(id).get().then(function (chap) {\n          if (chap.exists) {\n            if (type === \"show\") {\n              var characters = [];\n              var locations = [];\n              var charaQuery = [];\n              var locQuery = [];\n              var charactersInChaper = chap.data().characters;\n              var locationsInChaper = chap.data().locations;\n              var chapNumber = chap.data().number;\n              var prevChap = db.collection(\"chapters\").where(\"storyId\", \"==\", storyId).where(\"number\", \"==\", chapNumber - 1).get();\n              var nextChap = db.collection(\"chapters\").where(\"storyId\", \"==\", storyId).where(\"number\", \"==\", chapNumber + 1).get();\n              charactersInChaper.forEach(function (_char) {\n                charaQuery.push(db.collection(\"characters\").doc(_char).get());\n              });\n              locationsInChaper.forEach(function (loc) {\n                locQuery.push(db.collection(\"locations\").doc(loc).get());\n              });\n              charaQuery = Promise.all(charaQuery);\n              locQuery = Promise.all(locQuery);\n              Promise.all([charaQuery, locQuery, prevChap, nextChap]).then(function (res) {\n                var prev = res[2].docs[0] ? res[2].docs[0].id : null;\n                var next = res[3].docs[0] ? res[3].docs[0].id : null;\n                res[0].forEach(function (c) {\n                  characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                    id: c.id\n                  }));\n                });\n                res[1].forEach(function (l) {\n                  locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                    id: l.id\n                  }));\n                });\n                dispatch({\n                  type: types.GET_CHAPTER,\n                  payload: {\n                    chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                      id: chap.id,\n                      prev: prev,\n                      next: next,\n                      locations: locations,\n                      characters: characters,\n                      \"public\": doc.data()[\"public\"],\n                      storyTitle: doc.data().title\n                    }),\n                    chapterExists: true\n                  }\n                });\n              });\n            } else {\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    \"public\": doc.data()[\"public\"]\n                  }),\n                  chapterExists: true\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapterExists: false\n              }\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHAPTER,\n          payload: {\n            chapterExists: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var getChapters = function getChapters(id) {\n  return function (dispatch) {\n    db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(function (docs) {\n      var arr = [];\n      docs.forEach(function (doc) {\n        arr.push({\n          authorId: doc.data().authorId,\n          id: doc.id,\n          createdAt: doc.data().createdAt,\n          number: doc.data().number,\n          title: doc.data().title,\n          commentsCount: doc.data().commentsCount,\n          status: doc.data().status\n        });\n      });\n      dispatch({\n        type: types.GET_CHAPTERS,\n        payload: arr\n      });\n    });\n  };\n}; // LOCATIONS\n\nexport var addLocation = function addLocation(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_LOCATION,\n      payload: {\n        loadingLoc: true\n      }\n    });\n    var locId = \"\";\n    db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function (res) {\n      locId = res.id;\n\n      if (typeof data.image === \"object\") {\n        var imageName = \"\".concat(locId, \"_\").concat(data.name.toLowerCase().split(\" \").join(\"_\"));\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"locations\").doc(locId).update({\n            image: url\n          });\n        }).then(function () {\n          dispatch({\n            type: types.ADD_LOCATION,\n            payload: {\n              message: \"Location added successfully\",\n              locId: res.id,\n              loadingLoc: false\n            }\n          });\n        });\n      } else {\n        dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editLocation = function editLocation(data) {\n  return function (dispatch) {};\n};\nexport var getLocation = function getLocation(id) {\n  return function (dispatch) {\n    db.collection(\"locations\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: types.GET_LOCATION,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }),\n          locationExists: true\n        });\n      } else {\n        dispatch({\n          type: types.GET_LOCATION,\n          locationExists: false\n        });\n      }\n    });\n  };\n};\nexport var deleteLocation = function deleteLocation(id, name) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    var batch = db.batch();\n    var imageName = \"\".concat(id, \"_\").concat(name.toLowerCase().split(\" \").join(\"_\"));\n    batch[\"delete\"](db.collection(\"locations\").doc(id));\n    db.collection(\"chapters\").where(\"locations\", \"array-contains\", id).get().then(function (res) {\n      res.forEach(function (chap) {\n        return batch.update(db.collection(\"chapters\").doc(chap.id), {\n          locations: chap.data().locations.filter(function (c) {\n            return c !== id;\n          })\n        });\n      });\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]().then(function () {\n        batch.commit().then(function () {\n          dispatch({\n            type: types.DELETE_CHAPTER,\n            payload: {\n              loading: false,\n              message: \"Location deleted successfully\",\n              deleted: true\n            }\n          });\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n        batch.commit().then(function () {\n          dispatch({\n            type: types.DELETE_CHAPTER,\n            payload: {\n              loading: false,\n              message: \"Location deleted successfully\",\n              deleted: true\n            }\n          });\n        });\n      });\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var getUserLocations = function getUserLocations(id) {\n  return function (dispatch) {\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"locations\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var locations = [];\n      docs.forEach(function (doc) {\n        locations = [].concat(_toConsumableArray(locations), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      dispatch({\n        type: types.GET_USER_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n};\nexport var getStoryLocations = function getStoryLocations(storyId) {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n      var locations = docs.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        });\n      });\n      dispatch({\n        type: types.GET_STORY_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n}; // COMMENTS\n\nexport var getComments = function getComments(id) {\n  return function (dispatch) {\n    db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(function (snap) {\n      var comments = snap.docs.map(function (comment) {\n        return _objectSpread(_objectSpread({}, comment.data()), {}, {\n          id: comment.id\n        });\n      });\n      var queries = [];\n      comments.forEach(function (comm) {\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\n      });\n      Promise.all(queries).then(function (res) {\n        comments = comments.map(function (comm) {\n          return _objectSpread(_objectSpread({}, comm), {}, {\n            userImage: res.find(function (d) {\n              return d.id === comm.userId;\n            }).data().image\n          });\n        });\n        dispatch({\n          type: types.GET_COMMENTS,\n          payload: {\n            loadingComments: false,\n            comments: comments\n          }\n        });\n      });\n    });\n  };\n};\nexport var submitComment = function submitComment(info) {\n  return function (dispatch) {\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    if (!info.content) return message.error(\"Content must not be empty\");\n    var batch = db.batch();\n    var story = db.collection(\"stories\").doc(info.storyId).get();\n    var chapter = db.collection(\"chapters\").doc(info.chapterId).get();\n    Promise.all([story, chapter]).then(function (res) {\n      batch.update(db.collection(\"stories\").doc(info.storyId), {\n        commentsCount: res[0].data().commentsCount + 1\n      });\n      batch.update(db.collection(\"chapters\").doc(info.chapterId), {\n        commentsCount: res[1].data().commentsCount + 1\n      });\n      batch.commit().then(function () {\n        db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n          createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })).then(function () {\n          if (auth.currentUser.uid !== info.authorId) {\n            return db.collection(\"notifications\").add({\n              type: \"comment\",\n              read: false,\n              recipient: info.authorId,\n              sender: auth.currentUser.uid,\n              chapterId: info.chapterId,\n              storyId: info.storyId,\n              createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n              message: \"\".concat(info.username, \" posted a commented on your story \").concat(info.title)\n            });\n          }\n        }).then(function () {\n          return message.success(\"Comment posted successfully\");\n        });\n      });\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};\nexport var deleteComment = function deleteComment(id, chapid, storyId) {\n  return function (dispatch) {\n    var batch = db.batch();\n    var story = db.collection(\"stories\").doc(storyId).get();\n    var chapter = db.collection(\"chapters\").doc(chapid).get();\n    Promise.all([story, chapter]).then(function (res) {\n      batch.update(db.collection(\"stories\").doc(storyId), {\n        commentsCount: res[0].data().commentsCount - 1\n      });\n      batch.update(db.collection(\"chapters\").doc(chapid), {\n        commentsCount: res[1].data().commentsCount - 1\n      });\n      batch.commit().then(function () {\n        db.collection(\"comments\").doc(id)[\"delete\"]();\n      });\n    });\n  };\n}; // ARCHIVES\n\nexport var getStoriesFromSearch = function getStoriesFromSearch(search) {\n  return function (dispatch) {\n    var result = [];\n    db.collection(\"stories\").where(\"public\", \"==\", true).get().then(function (data) {\n      data.forEach(function (doc) {\n        var title = doc.data().title.toLowerCase().split(\" \");\n        var authorName = doc.data().authorName.toLowerCase().split(\" \");\n        var searchTerm = search.split(\"-\");\n        var isIncluded = searchTerm.every(function (word) {\n          return title.includes(word);\n        });\n        var orIncluded = searchTerm.some(function (word) {\n          return doc.data().title.toLowerCase().indexOf(word) !== -1;\n        });\n        var authorIncluded = searchTerm.every(function (word) {\n          return authorName.includes(word);\n        });\n        var orAuthorIncluded = searchTerm.some(function (word) {\n          return doc.data().authorName.toLowerCase().indexOf(word) !== -1;\n        });\n\n        if (isIncluded || orIncluded || authorIncluded || orAuthorIncluded) {\n          result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }));\n        }\n      });\n      return result;\n    }).then(function () {\n      dispatch({\n        type: types.GET_STORIES_FROM_SEARCH,\n        payload: result,\n        loading: false\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","err","console","log","addStory","ADD_STORY","loading","storyId","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","imageName","title","toLowerCase","split","join","ref","put","child","getDownloadURL","url","update","error","editStory","EDIT_STORY","loadingStory","lastUpdated","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","batch","chaptersToDelete","likesToDelete","locationsToDelete","chap","like","loc","commit","deleted","getUserStories","userId","orderBy","items","filter","s","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","set","read","recipient","success","removeStoryFromFavorite","getStoryCharacters","addChapter","chapId","ADD_CHAPTER","numberUsed","chapter","push","number","includes","commentsCount","voters","votesCount","story","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","commentsToDelete","charactersFromChapter","characters","charactersFromStory","newArr","times","comm","getChapter","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","chapNumber","prevChap","nextChap","char","prev","next","l","GET_CHAPTER","chapterExists","getChapters","arr","status","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","locId","image","name","editLocation","getLocation","GET_LOCATION","locationExists","deleteLocation","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","userImage","find","d","GET_COMMENTS","loadingComments","submitComment","info","content","chapterId","deleteComment","getStoriesFromSearch","search","searchTerm","isIncluded","every","word","orIncluded","some","indexOf","authorIncluded","orAuthorIncluded","GET_STORIES_FROM_SEARCH"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n      chaptersCount: 0,\r\n      commentsCount: 0,\r\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        const imageName = `${res.id}_${data.title\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyId)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: storyId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: storyId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n            lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  batch.delete(db.collection(\"stories\").doc(id));\r\n  const chaptersToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const likesToDelete = db\r\n    .collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const locationsToDelete = db\r\n    .collection(\"locations\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(\r\n    (res) => {\r\n      res[0].forEach((chap) => {\r\n        batch.delete(db.collection(\"chapters\").doc(chap.id));\r\n      });\r\n      res[1].forEach((like) => {\r\n        batch.delete(db.collection(\"storiesLikes\").doc(like.id));\r\n      });\r\n      res[2].forEach((loc) => {\r\n        batch.delete(db.collection(\"locations\").doc(loc.id));\r\n      });\r\n      batch.commit().then(() => {\r\n        dispatch({\r\n          type: types.DELETE_STORY,\r\n          payload: {\r\n            message: \"Story deleted successfully\",\r\n            loading: true,\r\n            deleted: true,\r\n          },\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const getUserStories = (id, type) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((s) =>\r\n          id ? s.public : s\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle, authorId) => (\r\n  dispatch\r\n) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      if (authorId !== auth.currentUser.uid) {\r\n        return db\r\n          .collection(\"notifications\")\r\n          .doc(`${auth.currentUser.uid}${id}`)\r\n          .set({\r\n            type: \"storyLike\",\r\n            read: false,\r\n            recipient: authorId,\r\n            sender: auth.currentUser.uid,\r\n            storyId: id,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: `${username} liked your story ${storyTitle}`,\r\n          });\r\n      }\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  let chapId = \"\";\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", data.storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      let numberUsed = [];\r\n      docs.forEach((chapter) => {\r\n        numberUsed.push(chapter.data().number);\r\n      });\r\n      if (numberUsed.includes(data.number)) {\r\n        dispatch({ type: types.ADD_CHAPTER, payload: { loading: false } });\r\n        message.error(`You already have a chapter numbered: ${data.number}`);\r\n      } else {\r\n        return db\r\n          .collection(\"chapters\")\r\n          .add({\r\n            ...data,\r\n            authorId: auth.currentUser.uid,\r\n            commentsCount: 0,\r\n            note: 0,\r\n            voters: [],\r\n            votesCount: 0,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          })\r\n          .then((res) => {\r\n            chapId = res.id;\r\n            db.collection(\"stories\")\r\n              .doc(data.storyId)\r\n              .get()\r\n              .then((story) => {\r\n                db.collection(\"stories\")\r\n                  .doc(data.storyId)\r\n                  .update({\r\n                    chaptersCount: story.data().chaptersCount + 1,\r\n                    secondaryCharacters: secondaryCharacters,\r\n                    secondaryArr: secondaryCharacters.map((c) => c.id),\r\n                  })\r\n                  .then(() => {\r\n                    dispatch({\r\n                      type: types.ADD_CHAPTER,\r\n                      payload: {\r\n                        message: \"Chapter added successfully\",\r\n                        chapId: chapId,\r\n                        loading: false,\r\n                      },\r\n                    });\r\n                  });\r\n              });\r\n          });\r\n      }\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  const batch = db.batch();\r\n\r\n  const commentsToDelete = db\r\n    .collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .get();\r\n  const chapter = db.collection(\"chapters\").doc(id).get();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n\r\n  Promise.all([chapter, story, commentsToDelete]).then((res) => {\r\n    const charactersFromChapter = res[0].data().characters;\r\n    const charactersFromStory = res[1].data().secondaryCharacters;\r\n    let newArr = charactersFromStory\r\n      .map((c) => {\r\n        if (charactersFromChapter.includes(c.id)) {\r\n          return { ...c, times: c.times - 1 };\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n      .filter((c) => c.times > 0);\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      chaptersCount: res[1].data().chaptersCount - 1,\r\n      secondaryCharacters: newArr,\r\n      secondaryArr: newArr.map((c) => c.id),\r\n    });\r\n    res[2].forEach((comm) =>\r\n      batch.delete(db.collection(\"comments\").doc(comm.id))\r\n    );\r\n    batch.delete(db.collection(\"chapters\").doc(id));\r\n    batch.commit().then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                const chapNumber = chap.data().number;\r\n\r\n                const prevChap = db\r\n                  .collection(\"chapters\")\r\n                  .where(\"storyId\", \"==\", storyId)\r\n                  .where(\"number\", \"==\", chapNumber - 1)\r\n                  .get();\r\n                const nextChap = db\r\n                  .collection(\"chapters\")\r\n                  .where(\"storyId\", \"==\", storyId)\r\n                  .where(\"number\", \"==\", chapNumber + 1)\r\n                  .get();\r\n\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery, prevChap, nextChap]).then(\r\n                  (res) => {\r\n                    let prev = res[2].docs[0] ? res[2].docs[0].id : null;\r\n                    let next = res[3].docs[0] ? res[3].docs[0].id : null;\r\n                    res[0].forEach((c) => {\r\n                      characters.push({ ...c.data(), id: c.id });\r\n                    });\r\n                    res[1].forEach((l) => {\r\n                      locations.push({ ...l.data(), id: l.id });\r\n                    });\r\n                    dispatch({\r\n                      type: types.GET_CHAPTER,\r\n                      payload: {\r\n                        chapter: {\r\n                          ...chap.data(),\r\n                          id: chap.id,\r\n                          prev,\r\n                          next,\r\n                          locations,\r\n                          characters,\r\n                          public: doc.data().public,\r\n                          storyTitle: doc.data().title,\r\n                        },\r\n                        chapterExists: true,\r\n                      },\r\n                    });\r\n                  }\r\n                );\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n          status: doc.data().status,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n  let locId = \"\";\r\n\r\n  db.collection(\"locations\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      locId = res.id;\r\n      if (typeof data.image === \"object\") {\r\n        const imageName = `${locId}_${data.name\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db.collection(\"locations\").doc(locId).update({ image: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_LOCATION,\r\n              payload: {\r\n                message: \"Location added successfully\",\r\n                locId: res.id,\r\n                loadingLoc: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const deleteLocation = (id, name) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\r\n\r\n  batch.delete(db.collection(\"locations\").doc(id));\r\n  db.collection(\"chapters\")\r\n    .where(\"locations\", \"array-contains\", id)\r\n    .get()\r\n    .then((res) => {\r\n      res.forEach((chap) =>\r\n        batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n          locations: chap.data().locations.filter((c) => c !== id),\r\n        })\r\n      );\r\n\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .delete()\r\n        .then(() => {\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getUserLocations = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  const batch = db.batch();\r\n  const story = db.collection(\"stories\").doc(info.storyId).get();\r\n  const chapter = db.collection(\"chapters\").doc(info.chapterId).get();\r\n\r\n  Promise.all([story, chapter])\r\n    .then((res) => {\r\n      batch.update(db.collection(\"stories\").doc(info.storyId), {\r\n        commentsCount: res[0].data().commentsCount + 1,\r\n      });\r\n      batch.update(db.collection(\"chapters\").doc(info.chapterId), {\r\n        commentsCount: res[1].data().commentsCount + 1,\r\n      });\r\n      batch.commit().then(() => {\r\n        db.collection(\"comments\")\r\n          .add({\r\n            ...info,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          })\r\n          .then(() => {\r\n            if (auth.currentUser.uid !== info.authorId) {\r\n              return db.collection(\"notifications\").add({\r\n                type: \"comment\",\r\n                read: false,\r\n                recipient: info.authorId,\r\n                sender: auth.currentUser.uid,\r\n                chapterId: info.chapterId,\r\n                storyId: info.storyId,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: `${info.username} posted a commented on your story ${info.title}`,\r\n              });\r\n            }\r\n          })\r\n          .then(() => message.success(\"Comment posted successfully\"));\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id, chapid, storyId) => (dispatch) => {\r\n  const batch = db.batch();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n  const chapter = db.collection(\"chapters\").doc(chapid).get();\r\n\r\n  Promise.all([story, chapter]).then((res) => {\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      commentsCount: res[0].data().commentsCount - 1,\r\n    });\r\n    batch.update(db.collection(\"chapters\").doc(chapid), {\r\n      commentsCount: res[1].data().commentsCount - 1,\r\n    });\r\n    batch.commit().then(() => {\r\n      db.collection(\"comments\").doc(id).delete();\r\n    });\r\n  });\r\n};\r\n\r\n// ARCHIVES\r\n\r\nexport const getStoriesFromSearch = (search) => (dispatch) => {\r\n  let result = [];\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .get()\r\n    .then((data) => {\r\n      data.forEach((doc) => {\r\n        const title = doc.data().title.toLowerCase().split(\" \");\r\n        const authorName = doc.data().authorName.toLowerCase().split(\" \");\r\n        const searchTerm = search.split(\"-\");\r\n        const isIncluded = searchTerm.every((word) => title.includes(word));\r\n        const orIncluded = searchTerm.some(\r\n          (word) => doc.data().title.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        const authorIncluded = searchTerm.every((word) =>\r\n          authorName.includes(word)\r\n        );\r\n        const orAuthorIncluded = searchTerm.some(\r\n          (word) => doc.data().authorName.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        if (isIncluded || orIncluded || authorIncluded || orAuthorIncluded) {\r\n          result.push({ ...doc.data(), id: doc.id });\r\n        }\r\n      });\r\n      return result;\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.GET_STORIES_FROM_SEARCH,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}