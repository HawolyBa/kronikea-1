{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, auth } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport const log_in = (email, password) => dispatch => {\n  console.log(email, password);\n  auth.signInWithEmailAndPassword(email, password);\n};\nexport const getProfile = id => dispatch => {\n  db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(doc => {\n    return dispatch({\n      type: types.GET_PROFILE,\n      payload: _objectSpread({\n        id: doc.id\n      }, doc.data())\n    });\n  });\n};\nexport const getFavoriteAuthors = () => dispatch => {\n  let addedOn;\n  db.collection(\"usersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().recipient];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_AUTHORS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getFollowers = () => dispatch => {\n  let addedOn;\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().senderId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FOLLOWERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getIsFollowing = userId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(snapshot => {\n      console.log(snapshot.docs[0]);\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.IS_FOLLOWING,\n        payload: answer\n      });\n    });\n  }\n};\nexport const followUser = (id, isFavorite, newFollower) => dispatch => {\n  if (isFavorite) return message.warning(\"You are already following this user\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"usersLikes\").add({\n    sender: newFollower.username,\n    senderId: newFollower.id,\n    recipient: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(\"You are now following this user\")).catch(err => message.error(\"There has been a problem\"));\n};\nexport const unfollowUser = (id, isFavorite) => dispatch => {\n  if (!isFavorite) return message.warning(\"You are not following this user yet\");\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(\"User successfully unfollowed\")).catch(err => message.error(\"There has been a problem\"));\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","userId","snapshot","answer","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","success","catch","err","unfollowUser","delete"],"mappings":"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","sourcesContent":["import { db, auth } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = () => (dispatch) => {\r\n  let addedOn;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = () => (dispatch) => {\r\n  let addedOn;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        console.log(snapshot.docs[0]);\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.id,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}