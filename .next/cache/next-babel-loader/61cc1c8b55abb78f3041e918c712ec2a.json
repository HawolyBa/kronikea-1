{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Pagination.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Pagination as Paginate, Divider } from \"antd\";\nimport { CharacterGrid, LocationGrid, StoriesGrid, UserGrid } from \"./Grid\";\n\nvar Pagination = function Pagination(_ref) {\n  _s();\n\n  var data = _ref.data,\n      xs = _ref.xs,\n      sm = _ref.sm,\n      lg = _ref.lg,\n      xl = _ref.xl,\n      md = _ref.md,\n      type = _ref.type,\n      gutter = _ref.gutter,\n      columnsCountBreakPoints = _ref.columnsCountBreakPoints,\n      itemType = _ref.itemType;\n\n  var _React$useState = React.useState({\n    currentPage: 1,\n    datasPerPage: 12\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pagination = _React$useState2[0],\n      setPagination = _React$useState2[1];\n\n  var currentPage = pagination.currentPage,\n      datasPerPage = pagination.datasPerPage;\n  var indexOfLastData = currentPage * datasPerPage;\n  var indexOfFirstData = indexOfLastData - datasPerPage;\n  React.useState(function () {}, [data]);\n  var currentDatas = data.slice(indexOfFirstData, indexOfLastData);\n\n  var handleClick = function handleClick(e) {\n    window.scrollTo(0, 0);\n    setPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n      currentPage: Number(e)\n    }));\n  };\n\n  var renderDatas = itemType === \"stories\" ? __jsx(StoriesGrid, {\n    gutter: gutter,\n    type: type,\n    stories: currentDatas,\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }) : itemType === \"characters\" ? __jsx(CharacterGrid, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    gutter: gutter,\n    type: type,\n    characters: currentDatas,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }) : itemType === \"locations\" ? __jsx(LocationGrid, {\n    locations: currentDatas,\n    gutter: gutter,\n    type: type,\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }) : itemType === \"followers\" ? __jsx(UserGrid, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }) : null;\n  var pageNumbers = [];\n\n  for (var i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, renderDatas, __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    hideOnSinglePage: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: function showTotal(total) {\n      return \"Total \".concat(total, \" items\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Pagination, \"G0RfN5QGhrzDIK4Or/M77As6HwE=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Pagination.js"],"names":["React","Pagination","Paginate","Divider","CharacterGrid","LocationGrid","StoriesGrid","UserGrid","data","xs","sm","lg","xl","md","type","gutter","columnsCountBreakPoints","itemType","useState","currentPage","datasPerPage","pagination","setPagination","indexOfLastData","indexOfFirstData","currentDatas","slice","handleClick","e","window","scrollTo","Number","renderDatas","pageNumbers","i","Math","ceil","length","push","total"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Pagination as Paginate, Divider } from \"antd\";\r\n\r\nimport { CharacterGrid, LocationGrid, StoriesGrid, UserGrid } from \"./Grid\";\r\n\r\nconst Pagination = ({\r\n  data,\r\n  xs,\r\n  sm,\r\n  lg,\r\n  xl,\r\n  md,\r\n  type,\r\n  gutter,\r\n  columnsCountBreakPoints,\r\n  itemType,\r\n}) => {\r\n  const [pagination, setPagination] = React.useState({\r\n    currentPage: 1,\r\n    datasPerPage: 12,\r\n  });\r\n  const { currentPage, datasPerPage } = pagination;\r\n  const indexOfLastData = currentPage * datasPerPage;\r\n  const indexOfFirstData = indexOfLastData - datasPerPage;\r\n\r\n  React.useState(() => {}, [data]);\r\n\r\n  const currentDatas = data.slice(indexOfFirstData, indexOfLastData);\r\n\r\n  const handleClick = (e) => {\r\n    window.scrollTo(0, 0);\r\n    setPagination({ ...pagination, currentPage: Number(e) });\r\n  };\r\n\r\n  const renderDatas =\r\n    itemType === \"stories\" ? (\r\n      <StoriesGrid\r\n        gutter={gutter}\r\n        type={type}\r\n        stories={currentDatas}\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n      />\r\n    ) : itemType === \"characters\" ? (\r\n      <CharacterGrid\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n        gutter={gutter}\r\n        type={type}\r\n        characters={currentDatas}\r\n      />\r\n    ) : itemType === \"locations\" ? (\r\n      <LocationGrid\r\n        locations={currentDatas}\r\n        gutter={gutter}\r\n        type={type}\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n      />\r\n    ) : itemType === \"followers\" ? (\r\n      <UserGrid />\r\n    ) : null;\r\n\r\n  let pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {renderDatas}\r\n      <Divider />\r\n      <Paginate\r\n        size=\"small\"\r\n        showQuickJumper\r\n        hideOnSinglePage\r\n        onChange={handleClick}\r\n        total={data.length}\r\n        pageSize={datasPerPage}\r\n        showTotal={(total) => `Total ${total} items`}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}