{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = id => dispatch => {\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }),\n          charaExists: true,\n          loading: false\n        }\n      });\n    } else {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        likes: [],\n        dislikes: []\n      }));\n    }).then(res => {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: res.id,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(res => {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: res.id,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        relativesArr: data.relatives.map(c => c.character_id)\n      }));\n    }).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n      relativesArr: data.relatives.map(c => c.character_id)\n    })).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteCharacter = id => dispatch => {\n  const batch = db.batch();\n  db.collection(\"characters\").doc(id).delete().then(() => {\n    db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(docs => {\n      docs.forEach(doc => {\n        batch.update(db.collection(\"chapters\").doc(doc.id), {\n          characters: doc.data().characters.filter(c => c !== id)\n        });\n      });\n    }).then(() => {\n      db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(stories => {\n        stories.forEach(story => {\n          batch.update(db.collection(\"stories\").doc(story.id), {\n            mainCharacters: story.data().mainCharacters.filter(c => c !== id),\n            secondaryArr: story.data().secondaryArr.filter(c => c !== id),\n            secondaryCharacters: story.data().secondaryCharacters.filter(c => c.id !== id)\n          });\n        });\n      }).then(() => {\n        db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(characters => {\n          characters.forEach(char => {\n            batch.update(db.collection(\"characters\").doc(char.id), {\n              relativesArr: char.data().relativesArr.filter(c => c !== id),\n              relatives: char.data().relatives.filter(c => c.character_id !== id)\n            });\n          });\n          batch.commit().then(() => {\n            console.log(\"all good\");\n          });\n        });\n      });\n    });\n  });\n};\nexport const getUserCharacters = userId => dispatch => {\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = () => dispatch => {\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: types.GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","dispatch","collection","doc","get","then","exists","type","GET_CHARACTER","payload","character","data","charaExists","loading","addCharacter","ADD_CHARACTER","imageName","firstname","toLowerCase","lastname","image","ref","currentUser","uid","put","child","getDownloadURL","url","add","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","success","characterId","catch","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","update","relativesArr","relatives","map","c","character_id","deleteCharacter","batch","delete","where","docs","forEach","characters","filter","stories","story","mainCharacters","secondaryArr","secondaryCharacters","char","commit","console","log","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","user","Promise","all","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            character: { ...doc.data(), id: doc.id },\r\n            charaExists: true,\r\n            loading: false,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"characters\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          likes: [],\r\n          dislikes: [],\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        likes: [],\r\n        dislikes: [],\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id) => (dispatch) => {\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                  batch.commit().then(() => {\r\n                    console.log(\"all good\");\r\n                  });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}