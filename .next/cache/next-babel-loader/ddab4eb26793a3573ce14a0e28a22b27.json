{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\forms\\\\UploadImage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Upload } from \"antd\";\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener(\"load\", function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n  console.log(reader.result);\n}\n\nfunction beforeUpload(file) {\n  var isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n\n  if (!isJpgOrPng) {\n    message.error(\"You can only upload JPG/PNG file!\");\n  }\n\n  var isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    message.error(\"Image must smaller than 2MB!\");\n  }\n\n  return isJpgOrPng && isLt2M;\n}\n\nvar UploadImage = function UploadImage() {\n  _s();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      imageUrl = _React$useState4[0],\n      setImageUrl = _React$useState4[1];\n\n  var handleChange = function handleChange(info) {\n    if (info.file.status === \"uploading\") {\n      setLoading(true);\n      return;\n    }\n\n    if (info.file.status === \"done\") {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, function (imageUrl) {\n        setLoading(false);\n        setImageUrl(imageUrl);\n      });\n    }\n  };\n\n  var uploadButton = __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, loading ? __jsx(LoadingOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 18\n    }\n  }) : __jsx(PlusOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 40\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Upload\"));\n\n  return __jsx(\"div\", {\n    className: \"upload-image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(Upload, {\n    name: \"cover\",\n    listType: \"picture-card\",\n    className: \"cover-uploader\",\n    showUploadList: false,\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n    beforeUpload: beforeUpload,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, imageUrl ? __jsx(\"img\", {\n    src: imageUrl,\n    alt: \"cover\",\n    style: {\n      width: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }) : uploadButton), __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-input\",\n    placeholder: \"image copyright\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(UploadImage, \"7yQhdChm1Mdi1pob2qgJNn4VZG8=\");\n\n_c = UploadImage;\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/forms/UploadImage.js"],"names":["Upload","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","console","log","beforeUpload","file","isJpgOrPng","type","message","error","isLt2M","size","UploadImage","React","useState","loading","setLoading","imageUrl","setImageUrl","handleChange","info","status","originFileObj","uploadButton","marginTop","width"],"mappings":"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","sourcesContent":["import { Upload } from \"antd\";\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n  console.log(reader.result);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n  if (!isJpgOrPng) {\r\n    message.error(\"You can only upload JPG/PNG file!\");\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error(\"Image must smaller than 2MB!\");\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\nconst UploadImage = () => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [imageUrl, setImageUrl] = React.useState(\"\");\r\n\r\n  const handleChange = (info) => {\r\n    if (info.file.status === \"uploading\") {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, (imageUrl) => {\r\n        setLoading(false);\r\n        setImageUrl(imageUrl);\r\n      });\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"upload-image\">\r\n      <Upload\r\n        name=\"cover\"\r\n        listType=\"picture-card\"\r\n        className=\"cover-uploader\"\r\n        showUploadList={false}\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        beforeUpload={beforeUpload}\r\n        onChange={handleChange}\r\n      >\r\n        {imageUrl ? (\r\n          <img src={imageUrl} alt=\"cover\" style={{ width: \"100%\" }} />\r\n        ) : (\r\n          uploadButton\r\n        )}\r\n      </Upload>\r\n      <input type=\"text\" className=\"form-input\" placeholder=\"image copyright\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadImage;\r\n"]},"metadata":{},"sourceType":"module"}