{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Pagination.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Pagination as Paginate, Divider } from \"antd\";\nimport { CharacterGrid, StoriesGrid } from \"./Grid\";\n\nconst Pagination = ({\n  data,\n  xs,\n  sm,\n  lg,\n  xl,\n  md,\n  type,\n  gutter,\n  columnsCountBreakPoints,\n  itemType\n}) => {\n  const [pagination, setPagination] = React.useState({\n    currentPage: 1,\n    datasPerPage: 12\n  });\n  const {\n    currentPage,\n    datasPerPage\n  } = pagination;\n  const indexOfLastData = currentPage * datasPerPage;\n  const indexOfFirstData = indexOfLastData - datasPerPage;\n  React.useState(() => {}, [data]);\n  const currentDatas = data.slice(indexOfFirstData, indexOfLastData);\n\n  const handleClick = e => {\n    window.scrollTo(0, 0);\n    setPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n      currentPage: Number(e)\n    }));\n  };\n\n  const renderDatas = itemType === \"stories\" ? __jsx(StoriesGrid, {\n    gutter: gutter,\n    type: type,\n    stories: currentDatas,\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }) : itemType === \"characters\" ? __jsx(CharacterGrid, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    gutter: gutter,\n    type: type,\n    characters: currentDatas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }) : null;\n  let pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, renderDatas, __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    hideOnSinglePage: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: total => `Total ${total} items`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Pagination.js"],"names":["React","Pagination","Paginate","Divider","CharacterGrid","StoriesGrid","data","xs","sm","lg","xl","md","type","gutter","columnsCountBreakPoints","itemType","pagination","setPagination","useState","currentPage","datasPerPage","indexOfLastData","indexOfFirstData","currentDatas","slice","handleClick","e","window","scrollTo","Number","renderDatas","pageNumbers","i","Math","ceil","length","push","total"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAU,IAAIC,QAAvB,EAAiCC,OAAjC,QAAgD,MAAhD;AAEA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,QAA3C;;AAEA,MAAMJ,UAAU,GAAG,CAAC;AAClBK,EAAAA,IADkB;AAElBC,EAAAA,EAFkB;AAGlBC,EAAAA,EAHkB;AAIlBC,EAAAA,EAJkB;AAKlBC,EAAAA,EALkB;AAMlBC,EAAAA,EANkB;AAOlBC,EAAAA,IAPkB;AAQlBC,EAAAA,MARkB;AASlBC,EAAAA,uBATkB;AAUlBC,EAAAA;AAVkB,CAAD,KAWb;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,KAAK,CAACkB,QAAN,CAAe;AACjDC,IAAAA,WAAW,EAAE,CADoC;AAEjDC,IAAAA,YAAY,EAAE;AAFmC,GAAf,CAApC;AAIA,QAAM;AAAED,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAgCJ,UAAtC;AACA,QAAMK,eAAe,GAAGF,WAAW,GAAGC,YAAtC;AACA,QAAME,gBAAgB,GAAGD,eAAe,GAAGD,YAA3C;AAEApB,EAAAA,KAAK,CAACkB,QAAN,CAAe,MAAM,CAAE,CAAvB,EAAyB,CAACZ,IAAD,CAAzB;AAEA,QAAMiB,YAAY,GAAGjB,IAAI,CAACkB,KAAL,CAAWF,gBAAX,EAA6BD,eAA7B,CAArB;;AAEA,QAAMI,WAAW,GAAIC,CAAD,IAAO;AACzBC,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAX,IAAAA,aAAa,iCAAMD,UAAN;AAAkBG,MAAAA,WAAW,EAAEU,MAAM,CAACH,CAAD;AAArC,OAAb;AACD,GAHD;;AAKA,QAAMI,WAAW,GACff,QAAQ,KAAK,SAAb,GACE,MAAC,WAAD;AACE,IAAA,MAAM,EAAEF,MADV;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,OAAO,EAAEW,YAHX;AAIE,IAAA,uBAAuB,EAAET,uBAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAOIC,QAAQ,KAAK,YAAb,GACF,MAAC,aAAD;AACE,IAAA,uBAAuB,EAAED,uBAD3B;AAEE,IAAA,MAAM,EAAED,MAFV;AAGE,IAAA,IAAI,EAAED,IAHR;AAIE,IAAA,UAAU,EAAEW,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,GAOA,IAfN;AAiBA,MAAIQ,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAU5B,IAAI,CAAC6B,MAAL,GAAcf,YAAxB,CAArB,EAA4DY,CAAC,EAA7D,EAAiE;AAC/DD,IAAAA,WAAW,CAACK,IAAZ,CAAiBJ,CAAjB;AACD;;AAED,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,WADH,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,QAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,eAAe,MAFjB;AAGE,IAAA,gBAAgB,MAHlB;AAIE,IAAA,QAAQ,EAAEL,WAJZ;AAKE,IAAA,KAAK,EAAEnB,IAAI,CAAC6B,MALd;AAME,IAAA,QAAQ,EAAEf,YANZ;AAOE,IAAA,SAAS,EAAGiB,KAAD,IAAY,SAAQA,KAAM,QAPvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAeD,CAlED;;AAoEA,eAAepC,UAAf","sourcesContent":["import React from \"react\";\r\nimport { Pagination as Paginate, Divider } from \"antd\";\r\n\r\nimport { CharacterGrid, StoriesGrid } from \"./Grid\";\r\n\r\nconst Pagination = ({\r\n  data,\r\n  xs,\r\n  sm,\r\n  lg,\r\n  xl,\r\n  md,\r\n  type,\r\n  gutter,\r\n  columnsCountBreakPoints,\r\n  itemType,\r\n}) => {\r\n  const [pagination, setPagination] = React.useState({\r\n    currentPage: 1,\r\n    datasPerPage: 12,\r\n  });\r\n  const { currentPage, datasPerPage } = pagination;\r\n  const indexOfLastData = currentPage * datasPerPage;\r\n  const indexOfFirstData = indexOfLastData - datasPerPage;\r\n\r\n  React.useState(() => {}, [data]);\r\n\r\n  const currentDatas = data.slice(indexOfFirstData, indexOfLastData);\r\n\r\n  const handleClick = (e) => {\r\n    window.scrollTo(0, 0);\r\n    setPagination({ ...pagination, currentPage: Number(e) });\r\n  };\r\n\r\n  const renderDatas =\r\n    itemType === \"stories\" ? (\r\n      <StoriesGrid\r\n        gutter={gutter}\r\n        type={type}\r\n        stories={currentDatas}\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n      />\r\n    ) : itemType === \"characters\" ? (\r\n      <CharacterGrid\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n        gutter={gutter}\r\n        type={type}\r\n        characters={currentDatas}\r\n      />\r\n    ) : null;\r\n\r\n  let pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {renderDatas}\r\n      <Divider />\r\n      <Paginate\r\n        size=\"small\"\r\n        showQuickJumper\r\n        hideOnSinglePage\r\n        onChange={handleClick}\r\n        total={data.length}\r\n        pageSize={datasPerPage}\r\n        showTotal={(total) => `Total ${total} items`}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}