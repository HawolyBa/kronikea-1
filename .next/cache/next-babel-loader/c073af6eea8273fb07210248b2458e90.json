{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col, Modal } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\nconst {\n  confirm\n} = Modal;\n\nconst Comments = ({\n  comments,\n  auth,\n  commentBody,\n  setCommentBody,\n  submit,\n  responseBody,\n  setResponseBody,\n  deleteComment,\n  chapid\n}) => {\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\n  const [clickedForm, setClickedForm] = React.useState(\"\");\n  const topComments = comments.filter(comm => !comm.answer);\n  const responses = comments.filter(comm => comm.answer);\n  const allComments = topComments.map(comm => {\n    let res = [];\n    responses.forEach(response => {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n\n  const commentToggle = id => {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  const answerToggle = id => {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  const deleteFunc = id => {\n    confirm({\n      title: \"Do you want to delete this comment ?\",\n      content: \"This content will be lost forever\",\n\n      onOk() {\n        return deleteComment(id, chapid);\n      }\n\n    });\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(comment => __jsx(React.Fragment, null, __jsx(Comment, {\n    key: comment.id,\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: commentToggle.bind(null, comment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(\"span\", {\n      onClick: deleteFunc.bind(null, comment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, \"Delete\"), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, comment.responses.map(c => __jsx(React.Fragment, null, __jsx(Comment, {\n    key: c.id,\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: answerToggle.bind(null, c.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(\"span\", {\n      onClick: deleteFunc.bind(null, c.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 23\n      }\n    }, \"Delete\"), auth.user && (auth.user.uid !== comment.userId)(__jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }))],\n    author: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 23\n      }\n    }, c.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: c.userImage,\n      alt: c.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 28\n      }\n    }, c.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 23\n      }\n    }, comment.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }), clickedForm === c.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 21\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 23\n    }\n  }, __jsx(Input.TextArea, {\n    value: responseBody,\n    onChange: e => setResponseBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${c.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 25\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }))))), clickedForm === comment.id && toggleCommentForm ? __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, __jsx(Input.TextArea, {\n    value: responseBody,\n    onChange: e => setResponseBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${comment.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 19\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 19\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  })) : null)));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Modal","Link","moment","Report","confirm","Comments","comments","auth","commentBody","setCommentBody","submit","responseBody","setResponseBody","deleteComment","chapid","toggleCommentForm","setToggleCommentForm","React","useState","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","commentToggle","answerToggle","deleteFunc","title","content","onOk","user","e","target","value","minRows","marginBottom","length","comment","bind","userId","uid","username","userImage","createdAt","unix","seconds","format","fromNow","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  commentBody,\r\n  setCommentBody,\r\n  submit,\r\n  responseBody,\r\n  setResponseBody,\r\n  deleteComment,\r\n  chapid,\r\n}) => {\r\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\r\n  const [clickedForm, setClickedForm] = React.useState(\"\");\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n\r\n  const commentToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  const deleteFunc = (id) => {\r\n    confirm({\r\n      title: \"Do you want to delete this comment ?\",\r\n      content: \"This content will be lost forever\",\r\n      onOk() {\r\n        return deleteComment(id, chapid);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <>\r\n          <Comment\r\n            key={comment.id}\r\n            actions={[\r\n              auth && auth.user && (\r\n                <span\r\n                  key=\"comment-basic-reply-to\"\r\n                  onClick={commentToggle.bind(null, comment.id)}\r\n                >\r\n                  Reply{\" \"}\r\n                </span>\r\n              ),\r\n              comment.userId === auth.user.uid && (\r\n                <span onClick={deleteFunc.bind(null, comment.id)}>Delete</span>\r\n              ),\r\n              auth.user && auth.user.uid !== comment.userId && (\r\n                <Report type=\"comment\" data={comment} />\r\n              ),\r\n            ]}\r\n            author={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>{comment.username}</a>\r\n              </Link>\r\n            }\r\n            avatar={\r\n              <Link href={`/profile/${comment.userId}`}>\r\n                <a>\r\n                  <Avatar src={comment.userImage} alt={comment.username} />\r\n                </a>\r\n              </Link>\r\n            }\r\n            content={<p>{comment.content}</p>}\r\n            datetime={\r\n              <Tooltip\r\n                title={\r\n                  comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment\r\n                        .unix(comment.createdAt.seconds)\r\n                        .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                }\r\n              >\r\n                <span>\r\n                  {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                    : moment(comment.createdAt).fromNow()}\r\n                </span>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {comment.responses.map((c) => (\r\n              <>\r\n                <Comment\r\n                  key={c.id}\r\n                  actions={[\r\n                    auth && auth.user && (\r\n                      <span\r\n                        key=\"comment-basic-reply-to\"\r\n                        onClick={answerToggle.bind(null, c.id)}\r\n                      >\r\n                        Reply{\" \"}\r\n                      </span>\r\n                    ),\r\n                    comment.userId === auth.user.uid && (\r\n                      <span onClick={deleteFunc.bind(null, c.id)}>Delete</span>\r\n                    ),\r\n                    auth.user &&\r\n                      (auth.user.uid !== comment.userId)(\r\n                        <Report type=\"comment\" data={comment} />\r\n                      ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${c.userId}`}>\r\n                      <a>{c.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${c.userId}`}>\r\n                      <a>\r\n                        <Avatar src={c.userImage} alt={c.username} />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{c.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(c.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment.unix(c.createdAt.seconds).fromNow()\r\n                          : moment(c.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n                {clickedForm === c.id && toggleAnswerForm && (\r\n                  <>\r\n                    <Row>\r\n                      <Col md={24}>\r\n                        <Input.TextArea\r\n                          value={responseBody}\r\n                          onChange={(e) => setResponseBody(e.target.value)}\r\n                          autoSize={{ minRows: 5 }}\r\n                          showCount={true}\r\n                          maxLength={800}\r\n                          placeholder={`@${c.username}`}\r\n                        ></Input.TextArea>\r\n                      </Col>\r\n                      <Col md={24}>\r\n                        <Button onClick={submit} type=\"primary\">\r\n                          Comment\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                    <Divider />\r\n                  </>\r\n                )}\r\n              </>\r\n            ))}\r\n          </Comment>\r\n\r\n          {clickedForm === comment.id && toggleCommentForm ? (\r\n            <>\r\n              <Row>\r\n                <Col md={24}>\r\n                  <Input.TextArea\r\n                    value={responseBody}\r\n                    onChange={(e) => setResponseBody(e.target.value)}\r\n                    autoSize={{ minRows: 5 }}\r\n                    showCount={true}\r\n                    maxLength={800}\r\n                    placeholder={`@${comment.username}`}\r\n                  ></Input.TextArea>\r\n                </Col>\r\n                <Col md={24}>\r\n                  <Button onClick={submit} type=\"primary\">\r\n                    Comment\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Divider />\r\n            </>\r\n          ) : null}\r\n        </>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}