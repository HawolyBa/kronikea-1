{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id, type) {\n  return function (dispatch) {\n    var relArr = [];\n    var storyArr = [];\n    var comments = [];\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        if (type === \"show\") {\n          var relatives = doc.data().relativesArr;\n          var relQueries = [];\n          relatives.forEach(function (rel) {\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\n          });\n          Promise.all(relQueries).then(function (res) {\n            res.forEach(function (_char) {\n              return relArr.push(_objectSpread(_objectSpread({}, _char.data()), {}, {\n                id: _char.id,\n                relation: doc.data().relatives.find(function (c) {\n                  return c.character_id === _char.id;\n                }).relation\n              }));\n            });\n            var mainQuery = db.collection(\"stories\").where(\"mainCharacters\", \"array-contains\", id).get();\n            var secondaryQuery = db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get();\n            Promise.all([mainQuery, secondaryQuery]).then(function (result) {\n              var allStory = result[0].docs.concat(result[1].docs);\n              allStory.forEach(function (story) {\n                storyArr.push({\n                  id: story.id,\n                  title: story.data().title,\n                  authorId: story.data().authorId,\n                  banner: story.data().banner\n                });\n              });\n              db.collection(\"comments\").where(\"characterId\", \"==\", id).onSnapshot(function (comm) {\n                var userQueries = [];\n                comm.forEach(function (c) {\n                  return comments.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                    id: c.id\n                  }));\n                });\n                comments.forEach(function (comment) {\n                  userQueries.push(db.collection(\"users\").doc(comment.id).get());\n                });\n                Promise.all(userQueries).then(function (res) {\n                  comments = comments.map(function (c) {\n                    return _objectSpread(_objectSpread({}, c), {}, {\n                      userImage: res.find(function (d) {\n                        return d.id === c.userId;\n                      }) ? res.find(function (d) {\n                        return d.id === c.userId;\n                      }).data().image : \"\"\n                    });\n                  });\n                  dispatch({\n                    type: types.GET_CHARACTER,\n                    payload: {\n                      character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                        id: doc.id,\n                        relatives: relArr.filter(function (r) {\n                          return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                        }),\n                        stories: storyArr.filter(function (r) {\n                          return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                        }),\n                        comments: comments\n                      }),\n                      charaExists: true,\n                      loading: false\n                    }\n                  });\n                });\n              });\n            });\n          });\n        } else {\n          dispatch({\n            type: types.GET_CHARACTER,\n            payload: {\n              character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              charaExists: true,\n              loading: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var charaId = \"\";\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(function (res) {\n      charaId = res.id;\n      var imageName = \"\".concat(res.id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"characters\").doc(charaId).update({\n            image: url\n          });\n        }).then(function () {\n          message.success(\"Character added successfully\");\n          dispatch({\n            type: types.ADD_CHARACTER,\n            payload: {\n              message: \"Character added successfully\",\n              characterId: charaId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          relativesArr: data.relatives.map(function (c) {\n            return c.character_id;\n          })\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        relativesArr: data.relatives.map(function (c) {\n          return c.character_id;\n        })\n      })).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id, firstname, lastname) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(firstname.toLowerCase()).concat(lastname && \"_\").concat(lastname && lastname.toLowerCase());\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      if (storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))) {\n        return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]();\n      }\n    }).then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              mainCharacters: story.data().mainCharacters.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryArr: story.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: story.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char2) {\n              batch.update(db.collection(\"characters\").doc(_char2.id), {\n                relativesArr: _char2.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: _char2.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n          }).then(function () {\n            db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(function (likes) {\n              likes.forEach(function (like) {\n                batch[\"delete\"](db.collection(\"charactersLikes\").doc(like.id));\n              });\n              batch.commit().then(function () {\n                dispatch({\n                  type: types.DELETE_CHARACTER,\n                  payload: {\n                    message: \"Character deleted successfully\",\n                    loading: false,\n                    deleted: true,\n                    charaExists: false\n                  }\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};\nexport var submitCharaterFeedback = function submitCharaterFeedback(info) {\n  return function (dispatch) {\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    if (!info.content) return message.error(\"Content must not be empty\");\n    db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function () {\n      message.success(\"Comment posted successfully\");\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","relArr","storyArr","comments","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","char","relation","find","c","character_id","mainQuery","where","secondaryQuery","result","allStory","docs","concat","story","title","authorId","banner","onSnapshot","comm","userQueries","comment","map","userImage","d","userId","image","GET_CHARACTER","payload","character","filter","r","currentUser","uid","stories","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","put","child","getDownloadURL","url","update","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","deleteCharacter","DELETE_CHARACTER","batch","characters","mainCharacters","secondaryArr","secondaryCharacters","like","commit","deleted","getUserCharacters","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","user","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","GET_STORY_CHARACTERS","mainArr","submitCharaterFeedback","info","emailVerified","content"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  let relArr = [];\r\n  let storyArr = [];\r\n  let comments = [];\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            res.forEach((char) =>\r\n              relArr.push({\r\n                ...char.data(),\r\n                id: char.id,\r\n                relation: doc\r\n                  .data()\r\n                  .relatives.find((c) => c.character_id === char.id).relation,\r\n              })\r\n            );\r\n\r\n            const mainQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"mainCharacters\", \"array-contains\", id)\r\n              .get();\r\n\r\n            const secondaryQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n              const allStory = result[0].docs.concat(result[1].docs);\r\n              allStory.forEach((story) => {\r\n                storyArr.push({\r\n                  id: story.id,\r\n                  title: story.data().title,\r\n                  authorId: story.data().authorId,\r\n                  banner: story.data().banner,\r\n                });\r\n              });\r\n              db.collection(\"comments\")\r\n                .where(\"characterId\", \"==\", id)\r\n                .onSnapshot((comm) => {\r\n                  let userQueries = [];\r\n                  comm.forEach((c) => comments.push({ ...c.data(), id: c.id }));\r\n                  comments.forEach((comment) => {\r\n                    userQueries.push(\r\n                      db.collection(\"users\").doc(comment.id).get()\r\n                    );\r\n                  });\r\n                  Promise.all(userQueries).then((res) => {\r\n                    comments = comments.map((c) => ({\r\n                      ...c,\r\n                      userImage: res.find((d) => d.id === c.userId)\r\n                        ? res.find((d) => d.id === c.userId).data().image\r\n                        : \"\",\r\n                    }));\r\n                    dispatch({\r\n                      type: types.GET_CHARACTER,\r\n                      payload: {\r\n                        character: {\r\n                          ...doc.data(),\r\n                          id: doc.id,\r\n                          relatives: relArr.filter(\r\n                            (r) =>\r\n                              (auth.currentUser && auth.currentUser.uid) ===\r\n                                r.authorId || r.public\r\n                          ),\r\n                          stories: storyArr.filter(\r\n                            (r) =>\r\n                              (auth.currentUser && auth.currentUser.uid) ===\r\n                                r.authorId || r.public\r\n                          ),\r\n                          comments,\r\n                        },\r\n                        charaExists: true,\r\n                        loading: false,\r\n                      },\r\n                    });\r\n                  });\r\n                });\r\n            });\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitCharaterFeedback = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      message.success(\"Comment posted successfully\");\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}