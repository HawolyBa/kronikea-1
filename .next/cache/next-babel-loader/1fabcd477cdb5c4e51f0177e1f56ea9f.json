{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\character\\\\Comments.js\";\nvar __jsx = React.createElement;\nimport React, { createElement } from \"react\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar, Badge, Affix } from \"antd\";\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from \"@ant-design/icons\";\nimport { dummy } from \"../../utils/dummy\";\nimport LoadingScreen from \"../hoc/LoadingScreen\";\nimport Report from \"../common/Report\";\n\nconst Comments = ({\n  comments,\n  auth,\n  submit,\n  character,\n  loadingComments,\n  deleteComment,\n  userComment,\n  rateComment\n}) => {\n  const [visible, setVisible] = React.useState(false);\n  const [content, setContent] = React.useState(\"\");\n\n  const submitComment = e => {\n    e.preventDefault();\n    submit({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      content,\n      characterId: character.id,\n      authorId: character.authorId,\n      answer: false,\n      likedBy: [],\n      dislikedBy: [],\n      voters: [],\n      userImage: auth.user.image\n    }, userComment);\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const closeModal = () => {\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const like = (userId, commentId, type) => {\n    rateComment(comment.id, type);\n  };\n\n  const count = userComment ? comments.length + 1 : comments.length;\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"character-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"feedback-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, count, \" Feedback\", comment.length > 1 ? \"s\" : 0), !userComment && __jsx(\"div\", {\n    className: \"add-comment\",\n    onClick: () => setVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, __jsx(\"ion-icon\", {\n    name: \"add-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"Leave a comment\"))), __jsx(LoadingScreen, {\n    loading: loadingComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"comments-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, userComment && __jsx(Badge.Ribbon, {\n    text: \"Your feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, __jsx(Comment, {\n    className: \"author-comment\",\n    actions: [userComment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(userComment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== userComment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: userComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${userComment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }\n    }, userComment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${userComment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: userComment.userImage ? userComment.userImage : dummy.avatar,\n      alt: userComment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 28\n      }\n    }, userComment.content),\n    datetime: __jsx(Tooltip, {\n      title: userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(userComment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 23\n      }\n    }, userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).fromNow() : moment(userComment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  })), comments.length > 0 && comments.map(comment => __jsx(Comment, {\n    key: comment.id,\n    actions: [// auth && auth.user && (\n    //   <span\n    //     key=\"comment-basic-reply-to\"\n    //     onClick={commentToggle.bind(null, comment.id)}\n    //   >\n    //     Reply{\" \"}\n    //   </span>\n    // ),\n    __jsx(Tooltip, {\n      key: \"comment-basic-like\",\n      title: \"Like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      onClick: () => rateComment(comment.id, \"like\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/createElement(comment.likedBy.includes(auth.user.uid) ? LikeFilled : LikeOutlined), __jsx(\"span\", {\n      className: \"comment-action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, \" \", comment.likedBy.length))), __jsx(Tooltip, {\n      key: \"comment-basic-dislike\",\n      title: \"Dislike\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      onClick: () => rateComment(comment.id, \"dislike\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(comment.dislikedBy.includes(auth.user.uid) ? DislikeFilled : DislikeOutlined), __jsx(\"span\", {\n      className: \"comment-action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, \" \", comment.dislikedBy.length))), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 23\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 23\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage ? comment.userImage : dummy.avatar,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 28\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }))))), __jsx(Modal, {\n    title: \"Leave a new comment\",\n    visible: visible,\n    onCancel: closeModal,\n    okText: \"Submit\",\n    onOk: submitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 5,\n    value: content,\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/character/Comments.js"],"names":["React","createElement","Link","moment","Input","Modal","Comment","Tooltip","Popconfirm","Avatar","Badge","Affix","DislikeOutlined","LikeOutlined","DislikeFilled","LikeFilled","dummy","LoadingScreen","Report","Comments","comments","auth","submit","character","loadingComments","deleteComment","userComment","rateComment","visible","setVisible","useState","content","setContent","submitComment","e","preventDefault","userId","user","uid","username","characterId","id","authorId","answer","likedBy","dislikedBy","voters","userImage","image","closeModal","like","commentId","type","comment","count","length","avatar","createdAt","unix","seconds","format","fromNow","map","includes","target","value"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Modal,\r\n  Comment,\r\n  Tooltip,\r\n  Popconfirm,\r\n  Avatar,\r\n  Badge,\r\n  Affix,\r\n} from \"antd\";\r\nimport {\r\n  DislikeOutlined,\r\n  LikeOutlined,\r\n  DislikeFilled,\r\n  LikeFilled,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { dummy } from \"../../utils/dummy\";\r\nimport LoadingScreen from \"../hoc/LoadingScreen\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  submit,\r\n  character,\r\n  loadingComments,\r\n  deleteComment,\r\n  userComment,\r\n  rateComment,\r\n}) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [content, setContent] = React.useState(\"\");\r\n\r\n  const submitComment = (e) => {\r\n    e.preventDefault();\r\n    submit(\r\n      {\r\n        userId: auth.user.uid,\r\n        username: auth.user.username,\r\n        content,\r\n        characterId: character.id,\r\n        authorId: character.authorId,\r\n        answer: false,\r\n        likedBy: [],\r\n        dislikedBy: [],\r\n        voters: [],\r\n        userImage: auth.user.image,\r\n      },\r\n      userComment\r\n    );\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const like = (userId, commentId, type) => {\r\n    rateComment(comment.id, type);\r\n  };\r\n\r\n  const count = userComment ? comments.length + 1 : comments.length;\r\n\r\n  return (\r\n    <>\r\n      <section className=\"character-feedback\">\r\n        <header className=\"feedback-header\">\r\n          <h3 className=\"side-heading\">\r\n            {count} Feedback{comment.length > 1 ? \"s\" : 0}\r\n          </h3>\r\n          {!userComment && (\r\n            <div className=\"add-comment\" onClick={() => setVisible(true)}>\r\n              <ion-icon name=\"add-circle\"></ion-icon>\r\n              <span>Leave a comment</span>\r\n            </div>\r\n          )}\r\n        </header>\r\n        <LoadingScreen loading={loadingComments}>\r\n          <div className=\"comments-block\">\r\n            {userComment && (\r\n              <Badge.Ribbon text=\"Your feedback\">\r\n                <Comment\r\n                  className=\"author-comment\"\r\n                  actions={[\r\n                    userComment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(userComment.id)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user && auth.user.uid !== userComment.userId && (\r\n                      <Report type=\"comment\" data={userComment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${userComment.userId}`}>\r\n                      <a>{userComment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${userComment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            userComment.userImage\r\n                              ? userComment.userImage\r\n                              : dummy.avatar\r\n                          }\r\n                          alt={userComment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{userComment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        userComment.createdAt &&\r\n                        typeof userComment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(userComment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(userComment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {userComment.createdAt &&\r\n                        typeof userComment.createdAt === \"object\"\r\n                          ? moment.unix(userComment.createdAt.seconds).fromNow()\r\n                          : moment(userComment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Badge.Ribbon>\r\n            )}\r\n            {comments.length > 0 &&\r\n              comments.map((comment) => (\r\n                <Comment\r\n                  key={comment.id}\r\n                  actions={[\r\n                    // auth && auth.user && (\r\n                    //   <span\r\n                    //     key=\"comment-basic-reply-to\"\r\n                    //     onClick={commentToggle.bind(null, comment.id)}\r\n                    //   >\r\n                    //     Reply{\" \"}\r\n                    //   </span>\r\n                    // ),\r\n                    <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n                      <span onClick={() => rateComment(comment.id, \"like\")}>\r\n                        {createElement(\r\n                          comment.likedBy.includes(auth.user.uid)\r\n                            ? LikeFilled\r\n                            : LikeOutlined\r\n                        )}\r\n                        <span className=\"comment-action\">\r\n                          {\" \"}\r\n                          {comment.likedBy.length}\r\n                        </span>\r\n                      </span>\r\n                    </Tooltip>,\r\n                    <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n                      <span onClick={() => rateComment(comment.id, \"dislike\")}>\r\n                        {React.createElement(\r\n                          comment.dislikedBy.includes(auth.user.uid)\r\n                            ? DislikeFilled\r\n                            : DislikeOutlined\r\n                        )}\r\n                        <span className=\"comment-action\">\r\n                          {\" \"}\r\n                          {comment.dislikedBy.length}\r\n                        </span>\r\n                      </span>\r\n                    </Tooltip>,\r\n                    auth.user && auth.user.uid !== comment.userId && (\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>{comment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            comment.userImage ? comment.userImage : dummy.avatar\r\n                          }\r\n                          alt={comment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{comment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(comment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(comment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                          : moment(comment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              ))}\r\n          </div>\r\n        </LoadingScreen>\r\n      </section>\r\n      <Modal\r\n        title={\"Leave a new comment\"}\r\n        visible={visible}\r\n        onCancel={closeModal}\r\n        okText=\"Submit\"\r\n        onOk={submitComment}\r\n      >\r\n        <Input.TextArea\r\n          rows={5}\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        ></Input.TextArea>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}