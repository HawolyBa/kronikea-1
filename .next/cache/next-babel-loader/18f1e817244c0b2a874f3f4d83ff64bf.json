{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\hooks\\\\notificationsHooks.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { auth, db } from \"../redux/fbConfig\";\nconst notificationContext = /*#__PURE__*/createContext();\nexport function ProvideNotification({\n  children\n}) {\n  const notifications = useProvideNotification();\n  return __jsx(notificationContext.Provider, {\n    value: notifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport const useNotifcations = () => {\n  return useContext(notificationContext);\n};\n\nfunction useProvideNotification() {\n  const {\n    0: notifications,\n    1: setNotifications\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n\n  const markAsRead = id => db.collection(\"notifications\").doc(id).update({\n    read: true\n  });\n\n  const deleteOne = id => db.collection(\"notifications\").doc(id).delete();\n\n  const markAllAsRead = () => {\n    const batch = db.batch();\n    const userId = auth.currentUser.uid;\n    db.collection(\"notifications\").where(\"recipient\", \"==\", userId).where(\"read\", \"==\", false).get().then(data => {\n      data.forEach(doc => {\n        batch.update(db.collection(\"notifications\").doc(doc.id), {\n          read: true\n        });\n      });\n      return batch.commit();\n    });\n  };\n\n  const deleteAll = () => {\n    const batch = db.batch();\n    const userId = auth.currentUser.uid;\n    db.collection(\"notifications\").where(\"recipient\", \"==\", userId).get().then(data => {\n      data.forEach(doc => {\n        batch.delete(db.collection(\"notifications\").doc(doc.id));\n      });\n      return batch.commit();\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user && user.uid) {\n        db.collection(\"notifications\").where(\"recipient\", \"==\", user.uid).onSnapshot(async docs => {\n          let items = [];\n          items = docs.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          })).sort((a, b) => {\n            a = typeof a.createdAt !== \"object\" ? new Date(a.createdAt) : new Date(a.createdAt.seconds);\n            b = typeof b.createdAt !== \"object\" ? new Date(b.createdAt) : new Date(b.createdAt.seconds);\n            return b > a ? -1 : b < a ? 1 : 0;\n          });\n          const getUsers = await db.collection(\"users\").get();\n          const users = await getUsers.docs.map(u => _objectSpread(_objectSpread({}, u.data()), {}, {\n            id: u.id\n          }));\n          items = items.map(notif => {\n            const user = users.find(u => u.id === notif.sender);\n            return _objectSpread(_objectSpread({}, notif), {}, {\n              user: user ? user : {}\n            });\n          });\n          setNotifications(items);\n        });\n        setIsLoading(false);\n      } else return;\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, [auth]);\n  useEffect(() => {\n    setCount(notifications.filter(n => !n.read).length);\n  }, [notifications]);\n  return {\n    isLoading,\n    items: notifications,\n    markAsRead,\n    count,\n    deleteOne,\n    markAllAsRead,\n    deleteAll\n  };\n}","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/hooks/notificationsHooks.js"],"names":["React","useState","useEffect","useContext","createContext","auth","db","notificationContext","ProvideNotification","children","notifications","useProvideNotification","useNotifcations","setNotifications","isLoading","setIsLoading","count","setCount","markAsRead","id","collection","doc","update","read","deleteOne","delete","markAllAsRead","batch","userId","currentUser","uid","where","get","then","data","forEach","commit","deleteAll","unsubscribe","onAuthStateChanged","user","onSnapshot","docs","items","map","sort","a","b","createdAt","Date","seconds","getUsers","users","u","notif","find","sender","filter","n","length"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,mBAAzB;AAEA,MAAMC,mBAAmB,gBAAGH,aAAa,EAAzC;AAEA,OAAO,SAASI,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AAChD,QAAMC,aAAa,GAAGC,sBAAsB,EAA5C;AACA,SACE,MAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAED,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF;AAKD;AAED,OAAO,MAAMG,eAAe,GAAG,MAAM;AACnC,SAAOT,UAAU,CAACI,mBAAD,CAAjB;AACD,CAFM;;AAIP,SAASI,sBAAT,GAAkC;AAChC,QAAM;AAAA,OAACD,aAAD;AAAA,OAAgBG;AAAhB,MAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACe,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMiB,UAAU,GAAIC,EAAD,IACjBb,EAAE,CAACc,UAAH,CAAc,eAAd,EAA+BC,GAA/B,CAAmCF,EAAnC,EAAuCG,MAAvC,CAA8C;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA9C,CADF;;AAGA,QAAMC,SAAS,GAAIL,EAAD,IAAQb,EAAE,CAACc,UAAH,CAAc,eAAd,EAA+BC,GAA/B,CAAmCF,EAAnC,EAAuCM,MAAvC,EAA1B;;AAEA,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,KAAK,GAAGrB,EAAE,CAACqB,KAAH,EAAd;AACA,UAAMC,MAAM,GAAGvB,IAAI,CAACwB,WAAL,CAAiBC,GAAhC;AAEAxB,IAAAA,EAAE,CAACc,UAAH,CAAc,eAAd,EACGW,KADH,CACS,WADT,EACsB,IADtB,EAC4BH,MAD5B,EAEGG,KAFH,CAES,MAFT,EAEiB,IAFjB,EAEuB,KAFvB,EAGGC,GAHH,GAIGC,IAJH,CAISC,IAAD,IAAU;AACdA,MAAAA,IAAI,CAACC,OAAL,CAAcd,GAAD,IAAS;AACpBM,QAAAA,KAAK,CAACL,MAAN,CAAahB,EAAE,CAACc,UAAH,CAAc,eAAd,EAA+BC,GAA/B,CAAmCA,GAAG,CAACF,EAAvC,CAAb,EAAyD;AACvDI,UAAAA,IAAI,EAAE;AADiD,SAAzD;AAGD,OAJD;AAKA,aAAOI,KAAK,CAACS,MAAN,EAAP;AACD,KAXH;AAYD,GAhBD;;AAkBA,QAAMC,SAAS,GAAG,MAAM;AACtB,UAAMV,KAAK,GAAGrB,EAAE,CAACqB,KAAH,EAAd;AACA,UAAMC,MAAM,GAAGvB,IAAI,CAACwB,WAAL,CAAiBC,GAAhC;AAEAxB,IAAAA,EAAE,CAACc,UAAH,CAAc,eAAd,EACGW,KADH,CACS,WADT,EACsB,IADtB,EAC4BH,MAD5B,EAEGI,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACdA,MAAAA,IAAI,CAACC,OAAL,CAAcd,GAAD,IAAS;AACpBM,QAAAA,KAAK,CAACF,MAAN,CAAanB,EAAE,CAACc,UAAH,CAAc,eAAd,EAA+BC,GAA/B,CAAmCA,GAAG,CAACF,EAAvC,CAAb;AACD,OAFD;AAGA,aAAOQ,KAAK,CAACS,MAAN,EAAP;AACD,KARH;AASD,GAbD;;AAeAlC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoC,WAAW,GAAGjC,IAAI,CAACkC,kBAAL,CAAyBC,IAAD,IAAU;AACpD,UAAIA,IAAI,IAAIA,IAAI,CAACV,GAAjB,EAAsB;AACpBxB,QAAAA,EAAE,CAACc,UAAH,CAAc,eAAd,EACGW,KADH,CACS,WADT,EACsB,IADtB,EAC4BS,IAAI,CAACV,GADjC,EAEGW,UAFH,CAEc,MAAOC,IAAP,IAAgB;AAC1B,cAAIC,KAAK,GAAG,EAAZ;AACAA,UAAAA,KAAK,GAAGD,IAAI,CAACA,IAAL,CACLE,GADK,CACAvB,GAAD,oCAAeA,GAAG,CAACa,IAAJ,EAAf;AAA2Bf,YAAAA,EAAE,EAAEE,GAAG,CAACF;AAAnC,YADC,EAEL0B,IAFK,CAEA,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACdD,YAAAA,CAAC,GACC,OAAOA,CAAC,CAACE,SAAT,KAAuB,QAAvB,GACI,IAAIC,IAAJ,CAASH,CAAC,CAACE,SAAX,CADJ,GAEI,IAAIC,IAAJ,CAASH,CAAC,CAACE,SAAF,CAAYE,OAArB,CAHN;AAIAH,YAAAA,CAAC,GACC,OAAOA,CAAC,CAACC,SAAT,KAAuB,QAAvB,GACI,IAAIC,IAAJ,CAASF,CAAC,CAACC,SAAX,CADJ,GAEI,IAAIC,IAAJ,CAASF,CAAC,CAACC,SAAF,CAAYE,OAArB,CAHN;AAKA,mBAAOH,CAAC,GAAGD,CAAJ,GAAQ,CAAC,CAAT,GAAaC,CAAC,GAAGD,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,WAbK,CAAR;AAcA,gBAAMK,QAAQ,GAAG,MAAM7C,EAAE,CAACc,UAAH,CAAc,OAAd,EAAuBY,GAAvB,EAAvB;AACA,gBAAMoB,KAAK,GAAG,MAAMD,QAAQ,CAACT,IAAT,CAAcE,GAAd,CAAmBS,CAAD,oCACjCA,CAAC,CAACnB,IAAF,EADiC;AAEpCf,YAAAA,EAAE,EAAEkC,CAAC,CAAClC;AAF8B,YAAlB,CAApB;AAKAwB,UAAAA,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAWU,KAAD,IAAW;AAC3B,kBAAMd,IAAI,GAAGY,KAAK,CAACG,IAAN,CAAYF,CAAD,IAAOA,CAAC,CAAClC,EAAF,KAASmC,KAAK,CAACE,MAAjC,CAAb;AACA,mDACKF,KADL;AAEEd,cAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU;AAFtB;AAID,WANO,CAAR;AAOA3B,UAAAA,gBAAgB,CAAC8B,KAAD,CAAhB;AACD,SAhCH;AAiCA5B,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAnCD,MAmCO;AACR,KArCmB,CAApB,CADc,CAwCd;;AACA,WAAO,MAAMuB,WAAW,EAAxB;AACD,GA1CQ,EA0CN,CAACjC,IAAD,CA1CM,CAAT;AA4CAH,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACP,aAAa,CAAC+C,MAAd,CAAsBC,CAAD,IAAO,CAACA,CAAC,CAACnC,IAA/B,EAAqCoC,MAAtC,CAAR;AACD,GAFQ,EAEN,CAACjD,aAAD,CAFM,CAAT;AAIA,SAAO;AACLI,IAAAA,SADK;AAEL6B,IAAAA,KAAK,EAAEjC,aAFF;AAGLQ,IAAAA,UAHK;AAILF,IAAAA,KAJK;AAKLQ,IAAAA,SALK;AAMLE,IAAAA,aANK;AAOLW,IAAAA;AAPK,GAAP;AASD","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth, db } from \"../redux/fbConfig\";\r\n\r\nconst notificationContext = createContext();\r\n\r\nexport function ProvideNotification({ children }) {\r\n  const notifications = useProvideNotification();\r\n  return (\r\n    <notificationContext.Provider value={notifications}>\r\n      {children}\r\n    </notificationContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useNotifcations = () => {\r\n  return useContext(notificationContext);\r\n};\r\n\r\nfunction useProvideNotification() {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const markAsRead = (id) =>\r\n    db.collection(\"notifications\").doc(id).update({ read: true });\r\n\r\n  const deleteOne = (id) => db.collection(\"notifications\").doc(id).delete();\r\n\r\n  const markAllAsRead = () => {\r\n    const batch = db.batch();\r\n    const userId = auth.currentUser.uid;\r\n\r\n    db.collection(\"notifications\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"read\", \"==\", false)\r\n      .get()\r\n      .then((data) => {\r\n        data.forEach((doc) => {\r\n          batch.update(db.collection(\"notifications\").doc(doc.id), {\r\n            read: true,\r\n          });\r\n        });\r\n        return batch.commit();\r\n      });\r\n  };\r\n\r\n  const deleteAll = () => {\r\n    const batch = db.batch();\r\n    const userId = auth.currentUser.uid;\r\n\r\n    db.collection(\"notifications\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .get()\r\n      .then((data) => {\r\n        data.forEach((doc) => {\r\n          batch.delete(db.collection(\"notifications\").doc(doc.id));\r\n        });\r\n        return batch.commit();\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      if (user && user.uid) {\r\n        db.collection(\"notifications\")\r\n          .where(\"recipient\", \"==\", user.uid)\r\n          .onSnapshot(async (docs) => {\r\n            let items = [];\r\n            items = docs.docs\r\n              .map((doc) => ({ ...doc.data(), id: doc.id }))\r\n              .sort((a, b) => {\r\n                a =\r\n                  typeof a.createdAt !== \"object\"\r\n                    ? new Date(a.createdAt)\r\n                    : new Date(a.createdAt.seconds);\r\n                b =\r\n                  typeof b.createdAt !== \"object\"\r\n                    ? new Date(b.createdAt)\r\n                    : new Date(b.createdAt.seconds);\r\n\r\n                return b > a ? -1 : b < a ? 1 : 0;\r\n              });\r\n            const getUsers = await db.collection(\"users\").get();\r\n            const users = await getUsers.docs.map((u) => ({\r\n              ...u.data(),\r\n              id: u.id,\r\n            }));\r\n\r\n            items = items.map((notif) => {\r\n              const user = users.find((u) => u.id === notif.sender);\r\n              return {\r\n                ...notif,\r\n                user: user ? user : {},\r\n              };\r\n            });\r\n            setNotifications(items);\r\n          });\r\n        setIsLoading(false);\r\n      } else return;\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, [auth]);\r\n\r\n  useEffect(() => {\r\n    setCount(notifications.filter((n) => !n.read).length);\r\n  }, [notifications]);\r\n\r\n  return {\r\n    isLoading,\r\n    items: notifications,\r\n    markAsRead,\r\n    count,\r\n    deleteOne,\r\n    markAllAsRead,\r\n    deleteAll,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}