{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_USER_LOCATIONS, GET_STORY, GET_CHAPTERS, ADD_STORY, ADD_CHAPTER, EDIT_CHAPTER, GET_CHAPTER, EDIT_STORY, DISPATCH_ERROR, DELETE_CHAPTER, IS_STORY_FAVORITE } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\";\nexport var getStory = function getStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        var main = doc.data().mainCharacters;\n        var secondary = doc.data().secondaryCharacters;\n        var mainArr = [];\n        var secondaryArr = [];\n        var mainQuery = main.map(function (c) {\n          return db.collection(\"characters\").doc(c).get();\n        });\n        var secondaryQuery = secondary.map(function (c) {\n          return db.collection(\"characters\").doc(c.id).get();\n        });\n        var mainRes = Promise.all(mainQuery);\n        var secondaryRes = Promise.all(secondaryQuery);\n        Promise.all([mainRes, secondaryRes]).then(function (result) {\n          result[0].forEach(function (docu) {\n            mainArr = [].concat(_toConsumableArray(mainArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          result[1].forEach(function (docu) {\n            secondaryArr = [].concat(_toConsumableArray(secondaryArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          dispatch({\n            type: GET_STORY,\n            storyExists: true,\n            payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id,\n              secondaryCharacters: secondaryArr,\n              mainCharacters: mainArr,\n              mainArr: doc.data().mainCharacters,\n              secondaryArr: doc.data().secondaryCharacters\n            })\n          });\n        });\n      } else {\n        dispatch({\n          type: DISPATCH_ERROR,\n          storyExists: false\n        });\n      }\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var addStory = function addStory(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n    console.log(data);\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n          authorId: auth.currentUser.uid,\n          authorName: data.authorName,\n          oneShot: false,\n          banner: url,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          likesCount: 0,\n          chaptersCount: 0,\n          secondaryCharacters: [],\n          featured: false,\n          note: 0\n        }));\n      }).then(function (res) {\n        message.success(\"Story added successfully\");\n        setTimeout(function () {\n          Router.push(\"/story/\".concat(res.id));\n          dispatch({\n            type: ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: res.id,\n              loading: false\n            }\n          });\n        }, 1000);\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        featured: false,\n        secondaryCharacters: [],\n        note: 0\n      })).then(function (res) {\n        message.success(\"Story added successfully\");\n        setTimeout(function () {\n          Router.push(\"/story/\".concat(res.id));\n          dispatch({\n            type: ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: res.id,\n              loading: false\n            }\n          });\n        }, 1000);\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var editStory = function editStory(data, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: EDIT_STORY,\n      payload: {\n        loadingStory: true\n      }\n    });\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n          banner: url\n        }));\n      }).then(function () {\n        message.success(\"Story added successfully\");\n        dispatch({\n          type: EDIT_STORY,\n          payload: {\n            message: \"Story edited successfully\"\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(function () {\n        message.success(\"Story added successfully\");\n        dispatch({\n          type: EDIT_STORY,\n          payload: {\n            message: \"Story edited successfully\"\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var addChapter = function addChapter(data, secondaryCharacters) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      commentsCount: 0,\n      note: 0,\n      voters: [],\n      votesCount: 0,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function (res) {\n      db.collection(\"stories\").doc(data.storyId).get().then(function (doc) {\n        db.collection(\"stories\").doc(data.storyId).update({\n          secondaryCharacters: secondaryCharacters\n        }).then(function () {\n          dispatch({\n            type: ADD_CHAPTER,\n            payload: {\n              message: \"Chapter added successfully\",\n              chapId: res.id,\n              loading: false\n            }\n          });\n        });\n      });\n    }); // .then((res) => {\n    //   dispatch({\n    //     type: ADD_CHAPTER,\n    //     payload: {\n    //       message: \"Chapter added successfully\",\n    //       chapId: res.id,\n    //     },\n    //   });\n    // })\n    // .catch((err) =>\n    //   dispatch({\n    //     type: ADD_CHAPTER,\n    //     payload: { message: err.message, chapId: \"\" },\n    //   })\n    // );\n  };\n};\nexport var editChapter = function editChapter(data, storyId, chapid, secondaryCharacters) {\n  return function (dispatch) {\n    dispatch({\n      type: EDIT_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(function () {\n      db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n        db.collection(\"stories\").doc(storyId).update({\n          secondaryCharacters: secondaryCharacters\n        }).then(function () {\n          dispatch({\n            type: EDIT_CHAPTER,\n            payload: {\n              message: \"Chapter edited successfully\",\n              loading: false\n            }\n          });\n        });\n      });\n    });\n  };\n};\nexport var deleteChapter = function deleteChapter(id, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETE_CHAPTER,\n      payload: {\n        loadingChapter: true\n      }\n    });\n    db.collection(\"chapters\").doc(id).get().then(function (doc) {\n      var charactersFromChapter = doc.data().characters;\n      db.collection(\"stories\").doc(storyId).get().then(function (story) {\n        var charactersFromStory = story.data().secondaryCharacters;\n        var newArr = charactersFromStory.map(function (c) {\n          if (charactersFromChapter.includes(c.id)) {\n            return _objectSpread(_objectSpread({}, c), {}, {\n              times: c.times - 1\n            });\n          } else {\n            return c;\n          }\n        });\n        newArr = newArr.filter(function (c) {\n          return c.times > 0;\n        });\n        db.collection(\"stories\").doc(storyId).update({\n          secondaryCharacters: newArr\n        }).then(function () {\n          db.collection(\"chapters\").doc(id)[\"delete\"]().then(function () {\n            dispatch({\n              type: DELETE_CHAPTER,\n              payload: {\n                message: \"Chapter deleted successfully\",\n                loadingChapter: false\n              }\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getChapter = function getChapter(storyId, id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n      if (doc.exists) {\n        db.collection(\"chapters\").doc(id).get().then(function (doc) {\n          if (doc.exists) {\n            dispatch({\n              type: GET_CHAPTER,\n              payload: {\n                chapter: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id\n                }),\n                chapterExists: true\n              }\n            });\n          } else {\n            dispatch({\n              type: GET_CHAPTER,\n              payload: {\n                chapterExists: false\n              }\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: GET_CHAPTER,\n          payload: {\n            chapterExists: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var getChapters = function getChapters(id) {\n  return function (dispatch) {\n    db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(function (docs) {\n      var arr = [];\n      docs.forEach(function (doc) {\n        arr.push({\n          authorId: doc.data().authorId,\n          id: doc.id,\n          createdAt: doc.data().createdAt,\n          number: doc.data().number,\n          title: doc.data().title,\n          commentsCount: doc.data().commentsCount\n        });\n      });\n      dispatch({\n        type: GET_CHAPTERS,\n        payload: arr\n      });\n    });\n  };\n};\nexport var getStoryCharacters = function getStoryCharacters(id) {\n  return function (dispatch) {};\n};\nexport var getUserStories = function getUserStories() {\n  return function (dispatch) {\n    db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};\nexport var getUserLocations = function getUserLocations() {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var locations = [];\n      docs.forEach(function (doc) {\n        locations = [].concat(_toConsumableArray(locations), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      dispatch({\n        type: GET_USER_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n};\nexport var getFavoriteStories = function getFavoriteStories() {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().storyId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"stories\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: GET_FAVORITE_STORIES,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var isStoryFavorite = function isStoryFavorite(storyId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs[0] ? true : false;\n        return dispatch({\n          type: IS_STORY_FAVORITE,\n          payload: answer\n        });\n      });\n    }\n  };\n};\nexport var addStoryToFavorite = function addStoryToFavorite(id, isFavorite, username, storyTitle) {\n  return function (dispatch) {\n    if (isFavorite) return message.warning(\"You've already liked this story\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"storiesLikes\").add({\n      sender: username,\n      senderId: auth.currentUser.uid,\n      storyId: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" added to your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_USER_LOCATIONS","GET_STORY","GET_CHAPTERS","ADD_STORY","ADD_CHAPTER","EDIT_CHAPTER","GET_CHAPTER","EDIT_STORY","DISPATCH_ERROR","DELETE_CHAPTER","IS_STORY_FAVORITE","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","storyExists","payload","err","console","log","addStory","loading","imageName","title","toLowerCase","split","join","banner","ref","currentUser","uid","put","child","getDownloadURL","url","add","authorId","authorName","oneShot","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","success","setTimeout","push","storyId","error","editStory","loadingStory","update","addChapter","commentsCount","voters","votesCount","chapId","editChapter","chapid","deleteChapter","loadingChapter","charactersFromChapter","characters","story","charactersFromStory","newArr","includes","times","filter","getChapter","chapter","chapterExists","getChapters","where","orderBy","onSnapshot","docs","arr","number","getStoryCharacters","getUserStories","items","getUserLocations","locations","getFavoriteStories","favArr","users","user","favUsers","isStoryFavorite","snapshot","answer","addStoryToFavorite","isFavorite","username","storyTitle","warning","emailVerified","sender","senderId"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_USER_LOCATIONS,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n  ADD_CHAPTER,\r\n  EDIT_CHAPTER,\r\n  GET_CHAPTER,\r\n  EDIT_STORY,\r\n  DISPATCH_ERROR,\r\n  DELETE_CHAPTER,\r\n  IS_STORY_FAVORITE,\r\n} from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n              secondaryArr: doc.data().secondaryCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_STORY, payload: { loading: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n  console.log(data);\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          secondaryCharacters: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  dispatch({ type: ADD_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: res.id,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n  // .then((res) => {\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: {\r\n  //       message: \"Chapter added successfully\",\r\n  //       chapId: res.id,\r\n  //     },\r\n  //   });\r\n  // })\r\n  // .catch((err) =>\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: { message: err.message, chapId: \"\" },\r\n  //   })\r\n  // );\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      const charactersFromChapter = doc.data().characters;\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((story) => {\r\n          const charactersFromStory = story.data().secondaryCharacters;\r\n          let newArr = charactersFromStory.map((c) => {\r\n            if (charactersFromChapter.includes(c.id)) {\r\n              return { ...c, times: c.times - 1 };\r\n            } else {\r\n              return c;\r\n            }\r\n          });\r\n          newArr = newArr.filter((c) => c.times > 0);\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({ secondaryCharacters: newArr })\r\n            .then(() => {\r\n              db.collection(\"chapters\")\r\n                .doc(id)\r\n                .delete()\r\n                .then(() => {\r\n                  dispatch({\r\n                    type: DELETE_CHAPTER,\r\n                    payload: {\r\n                      message: \"Chapter deleted successfully\",\r\n                      loadingChapter: false,\r\n                    },\r\n                  });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getChapter = (storyId, id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((doc) => {\r\n            if (doc.exists) {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: {\r\n                  chapter: { ...doc.data(), id: doc.id },\r\n                  chapterExists: true,\r\n                },\r\n              });\r\n            } else {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({ type: IS_STORY_FAVORITE, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, isFavorite, username, storyTitle) => (\r\n  dispatch\r\n) => {\r\n  if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}