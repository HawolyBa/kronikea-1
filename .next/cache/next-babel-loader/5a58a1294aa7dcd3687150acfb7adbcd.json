{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_STORY, GET_CHAPTERS, ADD_STORY } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport var getStory = function getStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).get().then(function (doc) {\n      dispatch({\n        type: GET_STORY,\n        payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        })\n      });\n    });\n  };\n};\nexport var addStory = function addStory(data) {\n  return function (dispatch) {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      secondaryCharacters: []\n    })).then(function (res) {\n      dispatch({\n        type: ADD_STORY,\n        payload: {\n          message: \"Story added successfully\",\n          storyId: res\n        }\n      });\n    });\n  };\n};\nexport var getChapters = function getChapters(id) {\n  return function (dispatch) {\n    db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(function (docs) {\n      var arr = [];\n      docs.forEach(function (doc) {\n        arr.push({\n          authorId: doc.data().authorId,\n          id: doc.id,\n          createdAt: doc.data().createdAt,\n          number: doc.data().number,\n          title: doc.data().title,\n          commentsCount: doc.data().commentsCount\n        });\n      });\n      dispatch({\n        type: GET_CHAPTERS,\n        payload: arr\n      });\n    });\n  };\n};\nexport var getStoryCharacters = function getStoryCharacters(id) {\n  return function (dispatch) {};\n};\nexport var getUserStories = function getUserStories() {\n  return function (dispatch) {\n    db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteStories = function getFavoriteStories() {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().storyId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"stories\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: GET_FAVORITE_STORIES,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_STORY","GET_CHAPTERS","ADD_STORY","db","auth","getStory","id","dispatch","collection","doc","get","then","type","payload","data","addStory","add","secondaryCharacters","res","message","storyId","getChapters","where","orderBy","onSnapshot","docs","arr","forEach","push","authorId","createdAt","number","title","commentsCount","getStoryCharacters","getUserStories","currentUser","uid","items","getFavoriteStories","favArr","users","result","map","user","Promise","all","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n} from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      dispatch({\r\n        type: GET_STORY,\r\n        payload: { ...doc.data(), id: doc.id },\r\n      });\r\n    });\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      secondaryCharacters: [],\r\n    })\r\n    .then((res) => {\r\n      dispatch({\r\n        type: ADD_STORY,\r\n        payload: { message: \"Story added successfully\", storyId: res },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}