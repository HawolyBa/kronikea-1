{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\"; // STORIES\n\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      const secondary = doc.data().secondaryCharacters;\n      let mainArr = [];\n      let secondaryArr = [];\n      const mainQuery = main.map(c => db.collection(\"characters\").doc(c).get());\n      const secondaryQuery = secondary.map(c => db.collection(\"characters\").doc(c.id).get());\n      const mainRes = Promise.all(mainQuery);\n      const secondaryRes = Promise.all(secondaryQuery);\n      Promise.all([mainRes, secondaryRes]).then(result => {\n        result[0].forEach(docu => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        result[1].forEach(docu => {\n          secondaryArr = [...secondaryArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        dispatch({\n          type: types.types.GET_STORY,\n          storyExists: true,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id,\n            secondaryCharacters: secondaryArr,\n            mainCharacters: mainArr,\n            mainArr: doc.data().mainCharacters,\n            secondaryArr: doc.data().secondaryCharacters\n          })\n        });\n      });\n    } else {\n      dispatch({\n        type: types.types.DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: types.types.ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n  console.log(data);\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        banner: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        secondaryCharacters: [],\n        featured: false,\n        note: 0\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: types.types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: types.types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: types.types.EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url\n      }));\n    }).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: types.types.EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: types.types.EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.types.GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.types.GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const isStoryFavorite = storyId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(snapshot => {\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.types.IS_STORY_FAVORITE,\n        payload: answer,\n        loadingFav: false\n      });\n    });\n  }\n};\nexport const addStoryToFavorite = (id, username, storyTitle) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"storiesLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    storyId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(`${storyTitle} added to your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const removeStoryFromFavorite = (id, storyTitle) => dispatch => {\n  db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${storyTitle} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n}; // CHAPTERs\n\nexport const addChapter = (data, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: types.ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    commentsCount: 0,\n    note: 0,\n    voters: [],\n    votesCount: 0,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    db.collection(\"stories\").doc(data.storyId).get().then(doc => {\n      db.collection(\"stories\").doc(data.storyId).update({\n        secondaryCharacters\n      }).then(() => {\n        dispatch({\n          type: types.ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: res.id,\n            loading: false\n          }\n        });\n      });\n    });\n  }); // .then((res) => {\n  //   dispatch({\n  //     type: types.ADD_CHAPTER,\n  //     payload: {\n  //       message: \"Chapter added successfully\",\n  //       chapId: res.id,\n  //     },\n  //   });\n  // })\n  // .catch((err) =>\n  //   dispatch({\n  //     type: types.ADD_CHAPTER,\n  //     payload: { message: err.message, chapId: \"\" },\n  //   })\n  // );\n};\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    db.collection(\"stories\").doc(storyId).get().then(doc => {\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters\n      }).then(() => {\n        dispatch({\n          type: types.EDIT_CHAPTER,\n          payload: {\n            message: \"Chapter edited successfully\",\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const deleteChapter = (id, storyId) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loadingChapter: true\n    }\n  });\n  db.collection(\"chapters\").doc(id).get().then(doc => {\n    const charactersFromChapter = doc.data().characters;\n    db.collection(\"stories\").doc(storyId).get().then(story => {\n      const charactersFromStory = story.data().secondaryCharacters;\n      let newArr = charactersFromStory.map(c => {\n        if (charactersFromChapter.includes(c.id)) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            times: c.times - 1\n          });\n        } else {\n          return c;\n        }\n      });\n      newArr = newArr.filter(c => c.times > 0);\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters: newArr\n      }).then(() => {\n        db.collection(\"chapters\").doc(id).delete().then(() => {\n          dispatch({\n            type: types.DELETE_CHAPTER,\n            payload: {\n              message: \"Chapter deleted successfully\",\n              loadingChapter: false\n            }\n          });\n        });\n      });\n    });\n  });\n};\nexport const getChapter = (storyId, id) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(doc => {\n        if (doc.exists) {\n          dispatch({\n            type: types.GET_CHAPTER,\n            payload: {\n              chapter: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              chapterExists: true\n            }\n          });\n        } else {\n          dispatch({\n            type: types.GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: types.GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: types.GET_CHAPTERS,\n      payload: arr\n    });\n  });\n}; // LOCATIONS\n\nexport const addLocation = () => dispatch => {};\nexport const getUserLocations = () => dispatch => {\n  db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: types.GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","catch","err","console","log","addStory","ADD_STORY","loading","imageName","title","toLowerCase","split","join","banner","ref","currentUser","uid","put","child","getDownloadURL","url","add","authorId","authorName","oneShot","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","success","setTimeout","push","storyId","error","editStory","EDIT_STORY","loadingStory","update","getUserStories","where","docs","items","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","storyTitle","emailVerified","sender","senderId","removeStoryFromFavorite","delete","addChapter","ADD_CHAPTER","commentsCount","voters","votesCount","chapId","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","charactersFromChapter","characters","story","charactersFromStory","newArr","includes","times","filter","getChapter","GET_CHAPTER","chapter","chapterExists","getChapters","orderBy","arr","number","GET_CHAPTERS","addLocation","getUserLocations","locations","GET_USER_LOCATIONS"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n              secondaryArr: doc.data().secondaryCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.types.ADD_STORY, payload: { loading: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n  console.log(data);\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          secondaryCharacters: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: types.types.EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: types.types.EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: res.id,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n  // .then((res) => {\r\n  //   dispatch({\r\n  //     type: types.ADD_CHAPTER,\r\n  //     payload: {\r\n  //       message: \"Chapter added successfully\",\r\n  //       chapId: res.id,\r\n  //     },\r\n  //   });\r\n  // })\r\n  // .catch((err) =>\r\n  //   dispatch({\r\n  //     type: types.ADD_CHAPTER,\r\n  //     payload: { message: err.message, chapId: \"\" },\r\n  //   })\r\n  // );\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      const charactersFromChapter = doc.data().characters;\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((story) => {\r\n          const charactersFromStory = story.data().secondaryCharacters;\r\n          let newArr = charactersFromStory.map((c) => {\r\n            if (charactersFromChapter.includes(c.id)) {\r\n              return { ...c, times: c.times - 1 };\r\n            } else {\r\n              return c;\r\n            }\r\n          });\r\n          newArr = newArr.filter((c) => c.times > 0);\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({ secondaryCharacters: newArr })\r\n            .then(() => {\r\n              db.collection(\"chapters\")\r\n                .doc(id)\r\n                .delete()\r\n                .then(() => {\r\n                  dispatch({\r\n                    type: types.DELETE_CHAPTER,\r\n                    payload: {\r\n                      message: \"Chapter deleted successfully\",\r\n                      loadingChapter: false,\r\n                    },\r\n                  });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getChapter = (storyId, id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((doc) => {\r\n            if (doc.exists) {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: {\r\n                  chapter: { ...doc.data(), id: doc.id },\r\n                  chapterExists: true,\r\n                },\r\n              });\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = () => (dispatch) => {};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}