{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col, Popconfirm } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { dummy } from \"../../utils/dummy\";\nimport Report from \"../common/Report\";\n\nconst Comments = ({\n  comments,\n  auth,\n  deleteComment,\n  submitComment,\n  chapid,\n  storyId,\n  authorId,\n  title\n}) => {\n  const [commentBody, setCommentBody] = React.useState(\"\");\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\n  const [clickedForm, setClickedForm] = React.useState(\"\");\n  const topComments = comments.filter(comm => !comm.answer);\n  const responses = comments.filter(comm => comm.answer);\n  const allComments = topComments.map(comm => {\n    let res = [];\n    responses.forEach(response => {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res.sort((a, b) => a.createdAt && b.createdAt && typeof a.createdAt === \"object\" ? new Date(a.createdAt.seconds * 1000) - new Date(b.createdAt.seconds * 1000) : new Date(a.createdAt.seconds) - new Date(b.createdAt))\n    });\n  });\n\n  const commentToggle = id => {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  const answerToggle = id => {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  const count = comments.filter(c => !c.userDeleted).length;\n\n  const submit = () => {\n    submitComment({\n      content: commentBody,\n      username: auth.user.username,\n      userId: auth.user.uid,\n      answer: false,\n      chapterId: chapid,\n      storyId: storyId,\n      title,\n      authorId,\n      userImage: auth.user.image\n    });\n    setCommentBody(\"\");\n  };\n\n  const submitAnswer = (id, username, userId, e) => {\n    e.preventDefault();\n    submitComment({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      commentAnsweredId: id,\n      answeredToId: userId,\n      content: `@${username} ${commentBody}`,\n      storyId: storyId,\n      chapterId: chapid,\n      authorId: authorId,\n      title: title,\n      answeredTo: username,\n      answer: true,\n      userImage: auth.user.image\n    });\n    setCommentBody(\"\");\n    answerToggle();\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comment\", comments.length > 1 ? \"s\" : \"\"), allComments.map(comment => __jsx(React.Fragment, {\n    key: comment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(Comment, {\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: commentToggle.bind(null, comment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(comment.id, chapid, comment.storyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    })],\n    author: !comment.userDeleted ? __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }, comment.username)) : __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, \"Invite\"),\n    avatar: !comment.userDeleted ? __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage ? comment.userImage : dummy.avatar,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }))) : __jsx(Avatar, {\n      src: dummy.avatar,\n      alt: \"invite\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }),\n    content: __jsx(\"p\", {\n      className: comment.suspended ? \"comment-deleted\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, comment.suspended ? \"Comment deleted\" : comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, comment.responses.map(c => __jsx(React.Fragment, {\n    key: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, __jsx(Comment, {\n    actions: [auth && auth.user && __jsx(\"span\", {\n      key: \"comment-basic-reply-to\",\n      onClick: answerToggle.bind(null, c.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 23\n      }\n    }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(c.id, chapid, c.storyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 23\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== c.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 23\n      }\n    })],\n    author: !c.userDeleted ? __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 23\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 25\n      }\n    }, c.username)) : __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 23\n      }\n    }, \"Invite\"),\n    avatar: !c.userDeleted ? __jsx(Link, {\n      href: `/profile/${c.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 23\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }\n    }, __jsx(Avatar, {\n      src: c.userImage ? c.userImage : dummy.avatar,\n      alt: c.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 27\n      }\n    }))) : __jsx(Avatar, {\n      src: dummy.avatar,\n      alt: \"invite\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 23\n      }\n    }),\n    content: __jsx(\"p\", {\n      className: c.suspended ? \"comment-deleted\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }\n    }, c.suspended ? \"Comment deleted\" : c.content),\n    datetime: __jsx(Tooltip, {\n      title: c.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 23\n      }\n    }, c.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }), clickedForm === c.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 23\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${c.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 25\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    onClick: submitAnswer.bind(null, comment.id, c.username, c.userId),\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 25\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }))))), clickedForm === comment.id && toggleCommentForm ? __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: e => setCommentBody(e.target.value),\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    placeholder: `@${comment.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 19\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: submitAnswer.bind(null, comment.id, comment.username, comment.userId),\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 15\n    }\n  })) : null)));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["React","Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Popconfirm","Link","moment","dummy","Report","Comments","comments","auth","deleteComment","submitComment","chapid","storyId","authorId","title","commentBody","setCommentBody","useState","toggleCommentForm","setToggleCommentForm","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","sort","a","b","createdAt","Date","seconds","commentToggle","answerToggle","count","c","userDeleted","length","submit","content","username","user","userId","uid","chapterId","userImage","image","submitAnswer","e","preventDefault","answeredToId","answeredTo","target","value","minRows","marginBottom","comment","bind","avatar","suspended","unix","format","fromNow"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\n\r\nimport { dummy } from \"../../utils/dummy\";\r\n\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  deleteComment,\r\n  submitComment,\r\n  chapid,\r\n  storyId,\r\n  authorId,\r\n  title,\r\n}) => {\r\n  const [commentBody, setCommentBody] = React.useState(\"\");\r\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\r\n  const [clickedForm, setClickedForm] = React.useState(\"\");\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return {\r\n      ...comm,\r\n      responses: res.sort((a, b) =>\r\n        a.createdAt && b.createdAt && typeof a.createdAt === \"object\"\r\n          ? new Date(a.createdAt.seconds * 1000) -\r\n            new Date(b.createdAt.seconds * 1000)\r\n          : new Date(a.createdAt.seconds) - new Date(b.createdAt)\r\n      ),\r\n    };\r\n  });\r\n\r\n  const commentToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  const count = comments.filter((c) => !c.userDeleted).length;\r\n\r\n  const submit = () => {\r\n    submitComment({\r\n      content: commentBody,\r\n      username: auth.user.username,\r\n      userId: auth.user.uid,\r\n      answer: false,\r\n      chapterId: chapid,\r\n      storyId: storyId,\r\n      title,\r\n      authorId,\r\n      userImage: auth.user.image,\r\n    });\r\n    setCommentBody(\"\");\r\n  };\r\n\r\n  const submitAnswer = (id, username, userId, e) => {\r\n    e.preventDefault();\r\n    submitComment({\r\n      userId: auth.user.uid,\r\n      username: auth.user.username,\r\n      commentAnsweredId: id,\r\n      answeredToId: userId,\r\n      content: `@${username} ${commentBody}`,\r\n      storyId: storyId,\r\n      chapterId: chapid,\r\n      authorId: authorId,\r\n      title: title,\r\n      answeredTo: username,\r\n      answer: true,\r\n      userImage: auth.user.image,\r\n    });\r\n\r\n    setCommentBody(\"\");\r\n    answerToggle();\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>\r\n        {comments.length} Comment{comments.length > 1 ? \"s\" : \"\"}\r\n      </h3>\r\n      {allComments.map((comment) => (\r\n        <React.Fragment key={comment.id}>\r\n          <Comment\r\n            actions={[\r\n              auth && auth.user && (\r\n                <span\r\n                  key=\"comment-basic-reply-to\"\r\n                  onClick={commentToggle.bind(null, comment.id)}\r\n                >\r\n                  Reply{\" \"}\r\n                </span>\r\n              ),\r\n              comment.userId === auth.user.uid && (\r\n                <Popconfirm\r\n                  title=\"Do you want to delete this comment ?\"\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                  onConfirm={() =>\r\n                    deleteComment(comment.id, chapid, comment.storyId)\r\n                  }\r\n                >\r\n                  <span>Delete</span>\r\n                </Popconfirm>\r\n              ),\r\n              auth.user && auth.user.uid !== comment.userId && (\r\n                <Report type=\"comment\" data={comment} />\r\n              ),\r\n            ]}\r\n            author={\r\n              !comment.userDeleted ? (\r\n                <Link href={`/profile/${comment.userId}`}>\r\n                  <a>{comment.username}</a>\r\n                </Link>\r\n              ) : (\r\n                <span>Invite</span>\r\n              )\r\n            }\r\n            avatar={\r\n              !comment.userDeleted ? (\r\n                <Link href={`/profile/${comment.userId}`}>\r\n                  <a>\r\n                    <Avatar\r\n                      src={comment.userImage ? comment.userImage : dummy.avatar}\r\n                      alt={comment.username}\r\n                    />\r\n                  </a>\r\n                </Link>\r\n              ) : (\r\n                <Avatar src={dummy.avatar} alt={\"invite\"} />\r\n              )\r\n            }\r\n            content={\r\n              <p className={comment.suspended ? \"comment-deleted\" : \"\"}>\r\n                {comment.suspended ? \"Comment deleted\" : comment.content}\r\n              </p>\r\n            }\r\n            datetime={\r\n              <Tooltip\r\n                title={\r\n                  comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment\r\n                        .unix(comment.createdAt.seconds)\r\n                        .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                    : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                }\r\n              >\r\n                <span>\r\n                  {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                    ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                    : moment(comment.createdAt).fromNow()}\r\n                </span>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {comment.responses.map((c) => (\r\n              <React.Fragment key={c.id}>\r\n                <Comment\r\n                  actions={[\r\n                    auth && auth.user && (\r\n                      <span\r\n                        key=\"comment-basic-reply-to\"\r\n                        onClick={answerToggle.bind(null, c.id)}\r\n                      >\r\n                        Reply{\" \"}\r\n                      </span>\r\n                    ),\r\n                    comment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(c.id, chapid, c.storyId)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user && auth.user.uid !== c.userId && (\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    !c.userDeleted ? (\r\n                      <Link href={`/profile/${c.userId}`}>\r\n                        <a>{c.username}</a>\r\n                      </Link>\r\n                    ) : (\r\n                      <span>Invite</span>\r\n                    )\r\n                  }\r\n                  avatar={\r\n                    !c.userDeleted ? (\r\n                      <Link href={`/profile/${c.userId}`}>\r\n                        <a>\r\n                          <Avatar\r\n                            src={c.userImage ? c.userImage : dummy.avatar}\r\n                            alt={c.username}\r\n                          />\r\n                        </a>\r\n                      </Link>\r\n                    ) : (\r\n                      <Avatar src={dummy.avatar} alt={\"invite\"} />\r\n                    )\r\n                  }\r\n                  content={\r\n                    <p className={c.suspended ? \"comment-deleted\" : \"\"}>\r\n                      {c.suspended ? \"Comment deleted\" : c.content}\r\n                    </p>\r\n                  }\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        c.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(c.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {c.createdAt && typeof c.createdAt === \"object\"\r\n                          ? moment.unix(c.createdAt.seconds).fromNow()\r\n                          : moment(c.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n                {clickedForm === c.id && toggleAnswerForm && (\r\n                  <>\r\n                    <Row>\r\n                      <Col md={24}>\r\n                        <Input.TextArea\r\n                          value={commentBody}\r\n                          onChange={(e) => setCommentBody(e.target.value)}\r\n                          autoSize={{ minRows: 5 }}\r\n                          showCount={true}\r\n                          maxLength={800}\r\n                          placeholder={`@${c.username}`}\r\n                        ></Input.TextArea>\r\n                      </Col>\r\n                      <Col md={24}>\r\n                        <Button\r\n                          onClick={submitAnswer.bind(\r\n                            null,\r\n                            comment.id,\r\n                            c.username,\r\n                            c.userId\r\n                          )}\r\n                          type=\"primary\"\r\n                        >\r\n                          Comment\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                    <Divider />\r\n                  </>\r\n                )}\r\n              </React.Fragment>\r\n            ))}\r\n          </Comment>\r\n\r\n          {clickedForm === comment.id && toggleCommentForm ? (\r\n            <>\r\n              <Row>\r\n                <Col md={24}>\r\n                  <Input.TextArea\r\n                    value={commentBody}\r\n                    onChange={(e) => setCommentBody(e.target.value)}\r\n                    autoSize={{ minRows: 5 }}\r\n                    showCount={true}\r\n                    maxLength={800}\r\n                    placeholder={`@${comment.username}`}\r\n                  ></Input.TextArea>\r\n                </Col>\r\n                <Col md={24}>\r\n                  <Button\r\n                    onClick={submitAnswer.bind(\r\n                      null,\r\n                      comment.id,\r\n                      comment.username,\r\n                      comment.userId\r\n                    )}\r\n                    type=\"primary\"\r\n                  >\r\n                    Comment\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Divider />\r\n            </>\r\n          ) : null}\r\n        </React.Fragment>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}