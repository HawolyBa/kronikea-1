{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = (id, type) => dispatch => {\n  const batch = db.batch();\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      if (type === \"show\") {\n        const relatives = doc.data().relativesArr;\n        let relQueries = [];\n        relatives.forEach(rel => {\n          relQueries.push(db.collection(\"characters\").doc(rel).get());\n        });\n        Promise.all(relQueries).then(res => {\n          let relArr = [];\n          res.forEach(char => relArr.push(_objectSpread(_objectSpread({}, char.data()), {}, {\n            id: char.id\n          })));\n          db.collection(\"stories\").where(\"seondaryArr\", \"array-contains\", id).get().then(() => {});\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      }\n    } else {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  let charaId = \"\";\n  db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    likes: [],\n    dislikes: []\n  })).then(res => {\n    charaId = res.id;\n    const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n    if (typeof data.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"characters\").doc(charaId).update({\n          image: url\n        });\n      }).then(() => {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: charaId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        relativesArr: data.relatives.map(c => c.character_id)\n      }));\n    }).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n      relativesArr: data.relatives.map(c => c.character_id)\n    })).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteCharacter = (id, firstname, lastname) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${lastname && lastname.toLowerCase()}`;\n  const batch = db.batch();\n  db.collection(\"characters\").doc(id).delete().then(() => {\n    if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\n      return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\n    }\n  }).then(() => {\n    db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(docs => {\n      docs.forEach(doc => {\n        batch.update(db.collection(\"chapters\").doc(doc.id), {\n          characters: doc.data().characters.filter(c => c !== id)\n        });\n      });\n    }).then(() => {\n      db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(stories => {\n        stories.forEach(story => {\n          batch.update(db.collection(\"stories\").doc(story.id), {\n            mainCharacters: story.data().mainCharacters.filter(c => c !== id),\n            secondaryArr: story.data().secondaryArr.filter(c => c !== id),\n            secondaryCharacters: story.data().secondaryCharacters.filter(c => c.id !== id)\n          });\n        });\n      }).then(() => {\n        db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(characters => {\n          characters.forEach(char => {\n            batch.update(db.collection(\"characters\").doc(char.id), {\n              relativesArr: char.data().relativesArr.filter(c => c !== id),\n              relatives: char.data().relatives.filter(c => c.character_id !== id)\n            });\n          });\n        }).then(() => {\n          db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(likes => {\n            likes.forEach(like => {\n              batch.delete(db.collection(\"charactersLikes\").doc(like.id));\n            });\n            batch.commit().then(() => {\n              dispatch({\n                type: types.DELETE_CHARACTER,\n                payload: {\n                  message: \"Character deleted successfully\",\n                  loading: false,\n                  deleted: true,\n                  charaExists: false\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};\nexport const getUserCharacters = userId => dispatch => {\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = () => dispatch => {\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: types.GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","batch","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","relArr","char","where","GET_CHARACTER","payload","character","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","currentUser","uid","put","child","getDownloadURL","url","update","success","characterId","catch","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","c","character_id","deleteCharacter","DELETE_CHARACTER","delete","docs","characters","filter","stories","story","mainCharacters","secondaryArr","secondaryCharacters","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","user","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            let relArr = [];\r\n            res.forEach((char) => relArr.push({ ...char.data(), id: char.id }));\r\n\r\n            db.collection(\"stories\")\r\n              .where(\"seondaryArr\", \"array-contains\", id)\r\n              .get()\r\n              .then(() => {});\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}