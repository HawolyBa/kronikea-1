{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\forms\\\\Relatives.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, Select, Input, Divider } from \"antd\";\nimport CharacterCard, { CharacterGrid } from \"../common/CharacterCard\";\n\nconst Relatives = ({\n  characters,\n  form\n}) => {\n  const [relations, setRelations] = React.useState([]);\n  const [currentChar, setCurrentChar] = React.useState(\"\");\n  const [currentRel, setCurrentRel] = React.useState(\"\");\n  const [selectedCharacters, setSelectedCharacters] = React.useState([]);\n  const [selectedArr, setSelectedArr] = React.useState([]);\n\n  const addRelation = () => {\n    let newRelations = [...relations];\n\n    if (currentChar && currentRel) {\n      newRelations = [...newRelations, {\n        character: currentChar,\n        relation: currentRel\n      }];\n      setSelectedCharacters([...selectedCharacters, _objectSpread(_objectSpread({}, characters.find(c => c.id === currentChar)), {}, {\n        relation: currentRel\n      })]);\n      setSelectedArr([...selectedArr, currentChar]);\n    }\n\n    form.setFieldsValue({\n      relations: newRelations\n    });\n    setRelations(newRelations);\n    setCurrentChar(\"\");\n    setCurrentRel(\"\");\n  };\n\n  console.log(relations);\n  return __jsx(Form.Item, {\n    name: \"relations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Relationships\"), __jsx(Row, {\n    gutter: [24, 24],\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: 11,\n    sm: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    label: \"Select a character\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    value: currentChar,\n    onChange: val => setCurrentChar(val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, __jsx(Option, {\n    value: \"none\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, \"Select a character\"), characters === null || characters === void 0 ? void 0 : characters.filter(c => !selectedArr.includes(c.id)).map(c => __jsx(Option, {\n    key: c.id,\n    value: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, `${c.firstname} ${c.lastname}`))))), __jsx(Col, {\n    md: 11,\n    sm: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    label: \"Type of relationship\",\n    rules: [{\n      required: \"true\",\n      message: \"You must define a type of relationship\"\n    }, () => ({\n      validator(_, value) {\n        if (currentChar) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error(\"You must define a type of relationship\"));\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    value: currentRel,\n    placeholder: \"Type of relationship\",\n    onChange: e => setCurrentRel(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }))), __jsx(Col, {\n    md: 2,\n    sm: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"select-add-input-iconbox\",\n    onClick: addRelation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"+\")))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), __jsx(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, selectedCharacters === null || selectedCharacters === void 0 ? void 0 : selectedCharacters.map(rel => __jsx(Col, {\n    lg: 4,\n    md: 8,\n    sm: 12,\n    xs: 24,\n    key: rel.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, __jsx(CharacterCard, {\n    type: \"add\",\n    character: rel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Relatives;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/forms/Relatives.js"],"names":["Row","Col","Form","Select","Input","Divider","CharacterCard","CharacterGrid","Relatives","characters","form","relations","setRelations","React","useState","currentChar","setCurrentChar","currentRel","setCurrentRel","selectedCharacters","setSelectedCharacters","selectedArr","setSelectedArr","addRelation","newRelations","character","relation","find","c","id","setFieldsValue","console","log","val","filter","includes","map","firstname","lastname","required","message","validator","_","value","Promise","resolve","reject","Error","e","target","rel"],"mappings":"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","sourcesContent":["import { Row, Col, Form, Select, Input, Divider } from \"antd\";\r\n\r\nimport CharacterCard, { CharacterGrid } from \"../common/CharacterCard\";\r\n\r\nconst Relatives = ({ characters, form }) => {\r\n  const [relations, setRelations] = React.useState([]);\r\n  const [currentChar, setCurrentChar] = React.useState(\"\");\r\n  const [currentRel, setCurrentRel] = React.useState(\"\");\r\n  const [selectedCharacters, setSelectedCharacters] = React.useState([]);\r\n  const [selectedArr, setSelectedArr] = React.useState([]);\r\n\r\n  const addRelation = () => {\r\n    let newRelations = [...relations];\r\n    if (currentChar && currentRel) {\r\n      newRelations = [\r\n        ...newRelations,\r\n        { character: currentChar, relation: currentRel },\r\n      ];\r\n      setSelectedCharacters([\r\n        ...selectedCharacters,\r\n        {\r\n          ...characters.find((c) => c.id === currentChar),\r\n          relation: currentRel,\r\n        },\r\n      ]);\r\n      setSelectedArr([...selectedArr, currentChar]);\r\n    }\r\n    form.setFieldsValue({ relations: newRelations });\r\n    setRelations(newRelations);\r\n    setCurrentChar(\"\");\r\n    setCurrentRel(\"\");\r\n  };\r\n\r\n  console.log(relations);\r\n\r\n  return (\r\n    <Form.Item name=\"relations\">\r\n      <h3>Relationships</h3>\r\n      <Row gutter={[24, 24]} align=\"center\">\r\n        <Col md={11} sm={24}>\r\n          <Form.Item label=\"Select a character\">\r\n            <Select value={currentChar} onChange={(val) => setCurrentChar(val)}>\r\n              <Option value=\"none\" disabled>\r\n                Select a character\r\n              </Option>\r\n              {characters\r\n                ?.filter((c) => !selectedArr.includes(c.id))\r\n                .map((c) => (\r\n                  <Option\r\n                    key={c.id}\r\n                    value={c.id}\r\n                  >{`${c.firstname} ${c.lastname}`}</Option>\r\n                ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={11} sm={24}>\r\n          <Form.Item\r\n            label=\"Type of relationship\"\r\n            rules={[\r\n              {\r\n                required: \"true\",\r\n                message: \"You must define a type of relationship\",\r\n              },\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (currentChar) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject(\r\n                    new Error(\"You must define a type of relationship\")\r\n                  );\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              value={currentRel}\r\n              placeholder=\"Type of relationship\"\r\n              onChange={(e) => setCurrentRel(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={2} sm={24}>\r\n          <div className=\"select-add-input-iconbox\" onClick={addRelation}>\r\n            <span>+</span>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n      <Row gutter={[16, 16]}>\r\n        {selectedCharacters?.map((rel) => (\r\n          <Col lg={4} md={8} sm={12} xs={24} key={rel.id}>\r\n            <CharacterCard type=\"add\" character={rel} />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default Relatives;\r\n"]},"metadata":{},"sourceType":"module"}