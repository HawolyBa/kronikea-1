{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, auth, storage } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport const log_in = (email, password) => dispatch => {\n  console.log(email, password);\n  auth.signInWithEmailAndPassword(email, password);\n};\nexport const getProfile = id => dispatch => {\n  db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(doc => {\n    return dispatch({\n      type: types.GET_PROFILE,\n      payload: _objectSpread({\n        id: doc.id\n      }, doc.data())\n    });\n  });\n};\nexport const getFavoriteAuthors = id => dispatch => {\n  let addedOn;\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"usersLikes\").where(\"senderId\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().recipient];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_AUTHORS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getFollowers = id => dispatch => {\n  let addedOn;\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      addedOn = doc.data().createdAt;\n      favArr = [...favArr, doc.data().senderId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FOLLOWERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getIsFollowing = userId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(snapshot => {\n      const answer = snapshot.docs.length > 0 ? true : false;\n      return dispatch({\n        type: types.IS_FOLLOWING,\n        payload: answer\n      });\n    });\n  }\n};\nexport const followUser = (id, isFavorite, newFollower) => dispatch => {\n  if (isFavorite) return message.warning(\"You are already following this user\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"usersLikes\").add({\n    sender: newFollower.username,\n    senderId: newFollower.uid,\n    recipient: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => {\n    return db.collection(\"notifications\").doc(`${auth.currentUser.uid}${id}`).set({\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      recipient: id,\n      sender: newFollower.uid,\n      read: false,\n      type: \"follow\",\n      message: `${newFollower.username} started following you`\n    });\n  }).then(() => message.success(\"You are now following this user\")).catch(err => message.error(\"There has been a problem\"));\n};\nexport const unfollowUser = (id, isFavorite) => dispatch => {\n  if (!isFavorite) return message.warning(\"You are not following this user yet\");\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(\"User successfully unfollowed\")).catch(err => message.error(\"There has been a problem\"));\n};\nexport const changeProfile = (data, setOpen, username, userImage) => dispatch => {\n  const {\n    newPassword,\n    actualPassword\n  } = data,\n        newInfo = _objectWithoutProperties(data, [\"newPassword\", \"actualPassword\"]);\n\n  const imageName = `${auth.currentUser.uid}_${newInfo.username}`; // // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\n  // const userStoriesQuery = db\n  //   .collection(\"stories\")\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n  //   .get();\n  // const userChaptersQuery = db\n  //   .collection(\"chapters\")\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n  //   .get();\n  // const userCharactersQuery = db\n  //   .collection(\"characters\")\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\n  //   .get();\n  // const userCommentsQuery = db\n  //   .collection(\"comments\")\n  //   .where(\"userId\", \"==\", auth.currentUser.uid)\n  //   .get();\n  // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\n  // const batchUpdateAll = async (queries, url) => {\n  //   await Promise.all(queries).then((res) => {\n  //     res[0].forEach((story) => {\n  //       db.collection(\"stories\")\n  //         .doc(story.id)\n  //         .update({\n  //           userImage: url ? url : newInfo.image,\n  //           authorName: data.username,\n  //         });\n  //     });\n  //     res[1].forEach((chap) => {\n  //       db.collection(\"chapters\")\n  //         .doc(chap.id)\n  //         .update({\n  //           userImage: url ? url : newInfo.image,\n  //           authorName: data.username,\n  //         });\n  //     });\n  //     res[2].forEach((char) => {\n  //       db.collection(\"characters\")\n  //         .doc(char.id)\n  //         .update({\n  //           userImage: url ? url : newInfo.image,\n  //           authorName: data.username,\n  //         });\n  //     });\n  //     res[3].forEach((comm) => {\n  //       db.collection(\"comments\")\n  //         .doc(comm.id)\n  //         .update({\n  //           userImage: url ? url : newInfo.image,\n  //           authorName: data.username,\n  //         });\n  //     });\n  //   });\n  // };\n\n  if (newPassword) {\n    auth.currentUser.reauthenticateWithCredential(firebase.auth.EmailAuthProvider.credential(auth.currentUser.email, actualPassword)).then(() => {\n      return auth.currentUser.updatePassword(newPassword);\n    }).then(async () => {\n      if (typeof newInfo.image === \"object\") {\n        storage.ref(`${auth.currentUser.uid}/${imageName}`).put(newInfo.image).then(() => {\n          return storage.ref(`${auth.currentUser.uid}/${imageName}`).getDownloadURL();\n        }).then(async url => {\n          return db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n            image: url\n          })).then(() => {\n            setOpen(false);\n            message.success(\"Profile updated successfully\"); // return batchUpdateAll(\n            //   [\n            //     userStoriesQuery,\n            //     userChaptersQuery,\n            //     userCharactersQuery,\n            //     userCommentsQuery,\n            //   ],\n            //   url\n            // );\n          }); // .then(() => {\n          //   setOpen(false);\n          //   message.success(\"Profile updated successfully\");\n          // });\n        });\n      } else {\n        return db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo)).then(() => {\n          setOpen(false);\n          message.success(\"Profile updated successfully\"); // return batchUpdateAll([\n          //   userStoriesQuery,\n          //   userChaptersQuery,\n          //   userCharactersQuery,\n          //   userCommentsQuery,\n          // ]);\n        }); // .then(() => {\n        //   setOpen(false);\n        //   message.success(\"Profile updated successfully\");\n        // });\n      }\n    }).catch(err => message.error(err.message));\n  } else {\n    if (typeof newInfo.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(newInfo.image).then(() => {\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).getDownloadURL();\n      }).then(async url => {\n        return db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n          image: url\n        })).then(() => {\n          setOpen(false);\n          message.success(\"Profile updated successfully\"); // return batchUpdateAll(\n          //   [\n          //     userStoriesQuery,\n          //     userChaptersQuery,\n          //     userCharactersQuery,\n          //     userCommentsQuery,\n          //   ],\n          //   url\n          // );\n        });\n      }); // .then(() => {\n      //   setOpen(false);\n      //   message.success(\"Profile updated successfully\");\n      // });\n    } else {\n      console.log(\"mdp pas changé et image pas changé\");\n      db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo)).then(() => {\n        return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]);\n      }).then(() => {\n        setOpen(false);\n        message.success(\"Profile updated successfully\");\n      });\n    }\n  }\n};\nexport const getUsersFromSearch = search => dispatch => {\n  let result = [];\n  db.collection(\"users\").get().then(data => {\n    data.forEach(doc => {\n      const username = doc.data().username.toLowerCase().split(\" \");\n      const searchTerm = search.split(\"-\");\n      const isIncluded = searchTerm.every(word => username.includes(word));\n      const orIncluded = searchTerm.some(word => doc.data().username.toLowerCase().indexOf(word) !== -1);\n\n      if (isIncluded || orIncluded) {\n        result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }));\n      }\n    });\n    return dispatch({\n      type: types.GET_USERS_FROM_SEARCH,\n      payload: result,\n      loading: false\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","storage","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","userId","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","snapshot","answer","length","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","set","read","success","catch","err","unfollowUser","delete","changeProfile","setOpen","userImage","newPassword","actualPassword","newInfo","imageName","reauthenticateWithCredential","EmailAuthProvider","credential","updatePassword","image","ref","put","getDownloadURL","url","update","batchUpdateAll","userStoriesQuery","userChaptersQuery","userCharactersQuery","userCommentsQuery","getUsersFromSearch","search","toLowerCase","split","searchTerm","isIncluded","every","word","includes","orIncluded","some","indexOf","push","GET_USERS_FROM_SEARCH","loading"],"mappings":"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","sourcesContent":["import { db, auth, storage } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs.length > 0 ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.uid,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      return db\r\n        .collection(\"notifications\")\r\n        .doc(`${auth.currentUser.uid}${id}`)\r\n        .set({\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          recipient: id,\r\n          sender: newFollower.uid,\r\n          read: false,\r\n          type: \"follow\",\r\n          message: `${newFollower.username} started following you`,\r\n        });\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const changeProfile = (data, setOpen, username, userImage) => (\r\n  dispatch\r\n) => {\r\n  const { newPassword, actualPassword, ...newInfo } = data;\r\n  const imageName = `${auth.currentUser.uid}_${newInfo.username}`;\r\n\r\n  // // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\r\n  // const userStoriesQuery = db\r\n  //   .collection(\"stories\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userChaptersQuery = db\r\n  //   .collection(\"chapters\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userCharactersQuery = db\r\n  //   .collection(\"characters\")\r\n  //   .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n  // const userCommentsQuery = db\r\n  //   .collection(\"comments\")\r\n  //   .where(\"userId\", \"==\", auth.currentUser.uid)\r\n  //   .get();\r\n\r\n  // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\r\n  // const batchUpdateAll = async (queries, url) => {\r\n  //   await Promise.all(queries).then((res) => {\r\n  //     res[0].forEach((story) => {\r\n  //       db.collection(\"stories\")\r\n  //         .doc(story.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[1].forEach((chap) => {\r\n  //       db.collection(\"chapters\")\r\n  //         .doc(chap.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[2].forEach((char) => {\r\n  //       db.collection(\"characters\")\r\n  //         .doc(char.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //     res[3].forEach((comm) => {\r\n  //       db.collection(\"comments\")\r\n  //         .doc(comm.id)\r\n  //         .update({\r\n  //           userImage: url ? url : newInfo.image,\r\n  //           authorName: data.username,\r\n  //         });\r\n  //     });\r\n  //   });\r\n  // };\r\n\r\n  if (newPassword) {\r\n    auth.currentUser\r\n      .reauthenticateWithCredential(\r\n        firebase.auth.EmailAuthProvider.credential(\r\n          auth.currentUser.email,\r\n          actualPassword\r\n        )\r\n      )\r\n      .then(() => {\r\n        return auth.currentUser.updatePassword(newPassword);\r\n      })\r\n      .then(async () => {\r\n        if (typeof newInfo.image === \"object\") {\r\n          storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .put(newInfo.image)\r\n            .then(() => {\r\n              return storage\r\n                .ref(`${auth.currentUser.uid}/${imageName}`)\r\n                .getDownloadURL();\r\n            })\r\n            .then(async (url) => {\r\n              return db\r\n                .collection(\"users\")\r\n                .doc(auth.currentUser.uid)\r\n                .update({\r\n                  ...newInfo,\r\n                  image: url,\r\n                })\r\n                .then(() => {\r\n                  setOpen(false);\r\n                  message.success(\"Profile updated successfully\");\r\n                  // return batchUpdateAll(\r\n                  //   [\r\n                  //     userStoriesQuery,\r\n                  //     userChaptersQuery,\r\n                  //     userCharactersQuery,\r\n                  //     userCommentsQuery,\r\n                  //   ],\r\n                  //   url\r\n                  // );\r\n                });\r\n              // .then(() => {\r\n              //   setOpen(false);\r\n              //   message.success(\"Profile updated successfully\");\r\n              // });\r\n            });\r\n        } else {\r\n          return db\r\n            .collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n            })\r\n            .then(() => {\r\n              setOpen(false);\r\n              message.success(\"Profile updated successfully\");\r\n              // return batchUpdateAll([\r\n              //   userStoriesQuery,\r\n              //   userChaptersQuery,\r\n              //   userCharactersQuery,\r\n              //   userCommentsQuery,\r\n              // ]);\r\n            });\r\n          // .then(() => {\r\n          //   setOpen(false);\r\n          //   message.success(\"Profile updated successfully\");\r\n          // });\r\n        }\r\n      })\r\n      .catch((err) => message.error(err.message));\r\n  } else {\r\n    if (typeof newInfo.image === \"object\") {\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .put(newInfo.image)\r\n        .then(() => {\r\n          return storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .getDownloadURL();\r\n        })\r\n        .then(async (url) => {\r\n          return db\r\n            .collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n              image: url,\r\n            })\r\n            .then(() => {\r\n              setOpen(false);\r\n              message.success(\"Profile updated successfully\");\r\n              // return batchUpdateAll(\r\n              //   [\r\n              //     userStoriesQuery,\r\n              //     userChaptersQuery,\r\n              //     userCharactersQuery,\r\n              //     userCommentsQuery,\r\n              //   ],\r\n              //   url\r\n              // );\r\n            });\r\n        });\r\n      // .then(() => {\r\n      //   setOpen(false);\r\n      //   message.success(\"Profile updated successfully\");\r\n      // });\r\n    } else {\r\n      console.log(\"mdp pas changé et image pas changé\");\r\n      db.collection(\"users\")\r\n        .doc(auth.currentUser.uid)\r\n        .update({\r\n          ...newInfo,\r\n        })\r\n        .then(() => {\r\n          return batchUpdateAll([\r\n            userStoriesQuery,\r\n            userChaptersQuery,\r\n            userCharactersQuery,\r\n            userCommentsQuery,\r\n          ]);\r\n        })\r\n        .then(() => {\r\n          setOpen(false);\r\n          message.success(\"Profile updated successfully\");\r\n        });\r\n    }\r\n  }\r\n};\r\n\r\nexport const getUsersFromSearch = (search) => (dispatch) => {\r\n  let result = [];\r\n  db.collection(\"users\")\r\n    .get()\r\n    .then((data) => {\r\n      data.forEach((doc) => {\r\n        const username = doc.data().username.toLowerCase().split(\" \");\r\n        const searchTerm = search.split(\"-\");\r\n        const isIncluded = searchTerm.every((word) => username.includes(word));\r\n        const orIncluded = searchTerm.some(\r\n          (word) => doc.data().username.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        if (isIncluded || orIncluded) {\r\n          result.push({ ...doc.data(), id: doc.id });\r\n        }\r\n      });\r\n      return dispatch({\r\n        type: types.GET_USERS_FROM_SEARCH,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}