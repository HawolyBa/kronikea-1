{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Grid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Empty } from \"antd\";\nimport Link from \"next/link\";\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport Card from \"../common/Card\";\nimport UserCard from \"../common/UserCard\";\nimport CharacterCard from \"../common/CharacterCard\";\nimport LocationCard from \"../common/LocationCard\";\nimport { dummy } from \"../../utils/dummy\";\n\nconst StoriesGrid = ({\n  stories,\n  type,\n  gutter,\n  columnsCountBreakPoints\n}) => {\n  return stories.length > 0 ? __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, stories.map(story => __jsx(Link, {\n    key: story.id,\n    href: `/story/${story.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, __jsx(Card, {\n    story: story,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  })))))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No stories yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n};\n\nconst MiniGrid = ({\n  stories,\n  type,\n  gutter,\n  columnsCountBreakPoints\n}) => {\n  return stories.length > 0 ? stories.map(story => __jsx(\"figure\", {\n    key: story.id,\n    className: \"mini-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: story.banner ? story.banner : dummy.cover,\n    alt: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No stories yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  });\n};\n\nconst UserGrid = ({\n  users,\n  xl,\n  lg,\n  xs,\n  sm,\n  md,\n  gutter\n}) => {\n  return users.length > 0 ? __jsx(Row, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, users.map(u => __jsx(Col, {\n    key: u.id,\n    xl: xl,\n    lg: lg,\n    md: md,\n    sm: sm,\n    xs: xs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(UserCard, {\n    user: u,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No followers yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\n\nconst LocationGrid = ({\n  locations,\n  gutter,\n  xl,\n  xxl,\n  lg,\n  md,\n  sm,\n  xs,\n  type,\n  columnsCountBreakPoints\n}) => {\n  return locations.length > 0 ? __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, locations.map(c => __jsx(LocationCard, {\n    key: c.id,\n    location: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No locations yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  });\n};\n\nconst CharacterGrid = ({\n  gutter,\n  xxl,\n  xl,\n  lg,\n  md,\n  sm,\n  xs,\n  characters,\n  type,\n  columnsCountBreakPoints\n}) => {\n  return characters.length > 0 ? __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, characters.map(c => __jsx(Link, {\n    key: c.id,\n    href: `/character/${c.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(CharacterCard, {\n    character: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  })))))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No characters yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Grid.js"],"names":["Row","Col","Empty","Link","Masonry","ResponsiveMasonry","Card","UserCard","CharacterCard","LocationCard","dummy","StoriesGrid","stories","type","gutter","columnsCountBreakPoints","length","map","story","id","PRESENTED_IMAGE_SIMPLE","MiniGrid","banner","cover","UserGrid","users","xl","lg","xs","sm","md","u","LocationGrid","locations","xxl","c","CharacterGrid","characters"],"mappings":"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","sourcesContent":["import { Row, Col, Empty } from \"antd\";\r\nimport Link from \"next/link\";\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\r\n\r\nimport Card from \"../common/Card\";\r\nimport UserCard from \"../common/UserCard\";\r\nimport CharacterCard from \"../common/CharacterCard\";\r\nimport LocationCard from \"../common/LocationCard\";\r\nimport { dummy } from \"../../utils/dummy\";\r\n\r\nconst StoriesGrid = ({ stories, type, gutter, columnsCountBreakPoints }) => {\r\n  return stories.length > 0 ? (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {stories.map((story) => (\r\n          <Link key={story.id} href={`/story/${story.id}`}>\r\n            <a>\r\n              <Card story={story} type={type} />\r\n            </a>\r\n          </Link>\r\n        ))}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  ) : (\r\n    <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"No stories yet\" />\r\n  );\r\n};\r\n\r\nconst MiniGrid = ({ stories, type, gutter, columnsCountBreakPoints }) => {\r\n  return stories.length > 0 ? (\r\n    stories.map((story) => (\r\n      <figure key={story.id} className=\"mini-card\">\r\n        <img src={story.banner ? story.banner : dummy.cover} alt=\"image\" />\r\n      </figure>\r\n    ))\r\n  ) : (\r\n    <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"No stories yet\" />\r\n  );\r\n};\r\n\r\nconst UserGrid = ({ users, xl, lg, xs, sm, md, gutter }) => {\r\n  return users.length > 0 ? (\r\n    <Row gutter={gutter}>\r\n      {users.map((u) => (\r\n        <Col key={u.id} xl={xl} lg={lg} md={md} sm={sm} xs={xs}>\r\n          <UserCard user={u} />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  ) : (\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No followers yet\"\r\n    />\r\n  );\r\n};\r\n\r\nconst LocationGrid = ({\r\n  locations,\r\n  gutter,\r\n  xl,\r\n  xxl,\r\n  lg,\r\n  md,\r\n  sm,\r\n  xs,\r\n  type,\r\n  columnsCountBreakPoints,\r\n}) => {\r\n  return locations.length > 0 ? (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {locations.map((c) => (\r\n          <LocationCard key={c.id} location={c} type={type} />\r\n        ))}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  ) : (\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No locations yet\"\r\n    />\r\n  );\r\n};\r\n\r\nconst CharacterGrid = ({\r\n  gutter,\r\n  xxl,\r\n  xl,\r\n  lg,\r\n  md,\r\n  sm,\r\n  xs,\r\n  characters,\r\n  type,\r\n  columnsCountBreakPoints,\r\n}) => {\r\n  return characters.length > 0 ? (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {characters.map((c) => (\r\n          <Link key={c.id} href={`/character/${c.id}`}>\r\n            <a>\r\n              <CharacterCard character={c} type={type} />\r\n            </a>\r\n          </Link>\r\n        ))}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  ) : (\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No characters yet\"\r\n    />\r\n  );\r\n};\r\n\r\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };\r\n"]},"metadata":{},"sourceType":"module"}