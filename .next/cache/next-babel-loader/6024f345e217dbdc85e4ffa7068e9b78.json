{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\character\\\\Comments.js\";\nvar __jsx = React.createElement;\nimport React, { createElement } from \"react\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar, Badge, Affix } from \"antd\";\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from \"@ant-design/icons\";\nimport { dummy } from \"../../utils/dummy\";\nimport LoadingScreen from \"../hoc/LoadingScreen\";\nimport Report from \"../common/Report\";\n\nconst Comments = ({\n  comments,\n  auth,\n  submit,\n  character,\n  loadingComments,\n  deleteComment,\n  alreadyPosted,\n  userComment,\n  rateComment\n}) => {\n  const [visible, setVisible] = React.useState(false);\n  const [content, setContent] = React.useState(\"\");\n\n  const submitComment = e => {\n    e.preventDefault();\n    submit({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      content,\n      characterId: character.id,\n      authorId: character.authorId,\n      answer: false,\n      likedBy: [],\n      dislikedBy,\n      voters: []\n    }, alreadyPosted);\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const closeModal = () => {\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const like = (userId, commentId, type) => {\n    rateComment(comment.id, type);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"character-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"feedback-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Feedback\"), !alreadyPosted && __jsx(\"div\", {\n    className: \"add-comment\",\n    onClick: () => setVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(\"ion-icon\", {\n    name: \"add-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Leave a comment\"))), __jsx(LoadingScreen, {\n    loading: loadingComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"comments-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, userComment && __jsx(Badge.Ribbon, {\n    text: \"Your feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, __jsx(Comment, {\n    actions: [userComment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(userComment.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== userComment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: userComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 23\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${userComment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }, userComment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${userComment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: userComment.userImage ? userComment.userImage : dummy.avatar,\n      alt: userComment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 28\n      }\n    }, userComment.content),\n    datetime: __jsx(Tooltip, {\n      title: userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(userComment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }, userComment.createdAt && typeof userComment.createdAt === \"object\" ? moment.unix(userComment.createdAt.seconds).fromNow() : moment(userComment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })), comments && comments.map(comment => __jsx(Comment, {\n    key: comment.id,\n    actions: [// auth && auth.user && (\n    //   <span\n    //     key=\"comment-basic-reply-to\"\n    //     onClick={commentToggle.bind(null, comment.id)}\n    //   >\n    //     Reply{\" \"}\n    //   </span>\n    // ),\n    __jsx(Tooltip, {\n      key: \"comment-basic-like\",\n      title: \"Like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      onClick: () => rateComment(comment.id, \"like\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/createElement(LikeOutlined), __jsx(\"span\", {\n      className: \"comment-action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, \" \", comment.likedBy.length))), __jsx(Tooltip, {\n      key: \"comment-basic-dislike\",\n      title: \"Dislike\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      onClick: () => rateComment(comment.id, \"dislike\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(DislikeOutlined), __jsx(\"span\", {\n      className: \"comment-action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, \" \", comment.dislikedBy.length))), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 23\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage ? comment.userImage : dummy.avatar,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 28\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }))))), __jsx(Modal, {\n    title: \"Leave a new comment\",\n    visible: visible,\n    onCancel: closeModal,\n    okText: \"Submit\",\n    onOk: submitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 5,\n    value: content,\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/character/Comments.js"],"names":["React","createElement","Link","moment","Input","Modal","Comment","Tooltip","Popconfirm","Avatar","Badge","Affix","DislikeOutlined","LikeOutlined","DislikeFilled","LikeFilled","dummy","LoadingScreen","Report","Comments","comments","auth","submit","character","loadingComments","deleteComment","alreadyPosted","userComment","rateComment","visible","setVisible","useState","content","setContent","submitComment","e","preventDefault","userId","user","uid","username","characterId","id","authorId","answer","likedBy","dislikedBy","voters","closeModal","like","commentId","type","comment","userImage","avatar","createdAt","unix","seconds","format","fromNow","map","length","target","value"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Modal,\r\n  Comment,\r\n  Tooltip,\r\n  Popconfirm,\r\n  Avatar,\r\n  Badge,\r\n  Affix,\r\n} from \"antd\";\r\nimport {\r\n  DislikeOutlined,\r\n  LikeOutlined,\r\n  DislikeFilled,\r\n  LikeFilled,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { dummy } from \"../../utils/dummy\";\r\nimport LoadingScreen from \"../hoc/LoadingScreen\";\r\nimport Report from \"../common/Report\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  submit,\r\n  character,\r\n  loadingComments,\r\n  deleteComment,\r\n  alreadyPosted,\r\n  userComment,\r\n  rateComment,\r\n}) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [content, setContent] = React.useState(\"\");\r\n\r\n  const submitComment = (e) => {\r\n    e.preventDefault();\r\n    submit(\r\n      {\r\n        userId: auth.user.uid,\r\n        username: auth.user.username,\r\n        content,\r\n        characterId: character.id,\r\n        authorId: character.authorId,\r\n        answer: false,\r\n        likedBy: [],\r\n        dislikedBy,\r\n        voters: [],\r\n      },\r\n      alreadyPosted\r\n    );\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const like = (userId, commentId, type) => {\r\n    rateComment(comment.id, type);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"character-feedback\">\r\n        <header className=\"feedback-header\">\r\n          <h3 className=\"side-heading\">Feedback</h3>\r\n          {!alreadyPosted && (\r\n            <div className=\"add-comment\" onClick={() => setVisible(true)}>\r\n              <ion-icon name=\"add-circle\"></ion-icon>\r\n              <span>Leave a comment</span>\r\n            </div>\r\n          )}\r\n        </header>\r\n        <LoadingScreen loading={loadingComments}>\r\n          <div className=\"comments-block\">\r\n            {userComment && (\r\n              <Badge.Ribbon text=\"Your feedback\">\r\n                <Comment\r\n                  actions={[\r\n                    userComment.userId === auth.user.uid && (\r\n                      <Popconfirm\r\n                        title=\"Do you want to delete this comment ?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={() => deleteComment(userComment.id)}\r\n                      >\r\n                        <span>Delete</span>\r\n                      </Popconfirm>\r\n                    ),\r\n                    auth.user && auth.user.uid !== userComment.userId && (\r\n                      <Report type=\"comment\" data={userComment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${userComment.userId}`}>\r\n                      <a>{userComment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${userComment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            userComment.userImage\r\n                              ? userComment.userImage\r\n                              : dummy.avatar\r\n                          }\r\n                          alt={userComment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{userComment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        userComment.createdAt &&\r\n                        typeof userComment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(userComment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(userComment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {userComment.createdAt &&\r\n                        typeof userComment.createdAt === \"object\"\r\n                          ? moment.unix(userComment.createdAt.seconds).fromNow()\r\n                          : moment(userComment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              </Badge.Ribbon>\r\n            )}\r\n            {comments &&\r\n              comments.map((comment) => (\r\n                <Comment\r\n                  key={comment.id}\r\n                  actions={[\r\n                    // auth && auth.user && (\r\n                    //   <span\r\n                    //     key=\"comment-basic-reply-to\"\r\n                    //     onClick={commentToggle.bind(null, comment.id)}\r\n                    //   >\r\n                    //     Reply{\" \"}\r\n                    //   </span>\r\n                    // ),\r\n                    <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n                      <span onClick={() => rateComment(comment.id, \"like\")}>\r\n                        {createElement(LikeOutlined)}\r\n                        <span className=\"comment-action\">\r\n                          {\" \"}\r\n                          {comment.likedBy.length}\r\n                        </span>\r\n                      </span>\r\n                    </Tooltip>,\r\n                    <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n                      <span onClick={() => rateComment(comment.id, \"dislike\")}>\r\n                        {React.createElement(DislikeOutlined)}\r\n                        <span className=\"comment-action\">\r\n                          {\" \"}\r\n                          {comment.dislikedBy.length}\r\n                        </span>\r\n                      </span>\r\n                    </Tooltip>,\r\n                    auth.user && auth.user.uid !== comment.userId && (\r\n                      <Report type=\"comment\" data={comment} />\r\n                    ),\r\n                  ]}\r\n                  author={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>{comment.username}</a>\r\n                    </Link>\r\n                  }\r\n                  avatar={\r\n                    <Link href={`/profile/${comment.userId}`}>\r\n                      <a>\r\n                        <Avatar\r\n                          src={\r\n                            comment.userImage ? comment.userImage : dummy.avatar\r\n                          }\r\n                          alt={comment.username}\r\n                        />\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={<p>{comment.content}</p>}\r\n                  datetime={\r\n                    <Tooltip\r\n                      title={\r\n                        comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment\r\n                              .unix(comment.createdAt.seconds)\r\n                              .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                          : moment(comment.createdAt).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )\r\n                      }\r\n                    >\r\n                      <span>\r\n                        {comment.createdAt &&\r\n                        typeof comment.createdAt === \"object\"\r\n                          ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                          : moment(comment.createdAt).fromNow()}\r\n                      </span>\r\n                    </Tooltip>\r\n                  }\r\n                />\r\n              ))}\r\n          </div>\r\n        </LoadingScreen>\r\n      </section>\r\n      <Modal\r\n        title={\"Leave a new comment\"}\r\n        visible={visible}\r\n        onCancel={closeModal}\r\n        okText=\"Submit\"\r\n        onOk={submitComment}\r\n      >\r\n        <Input.TextArea\r\n          rows={5}\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        ></Input.TextArea>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}