{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Comment, Tooltip, Avatar } from \"antd\";\nimport moment from \"moment\";\n\nvar Comments = function Comments(_ref) {\n  var comments = _ref.comments;\n  var topComments = comments.filter(function (comm) {\n    return !comm.answer;\n  });\n  var responses = comments.filter(function (comm) {\n    return comm.answer;\n  });\n  var allComments = topComments.map(function (comm) {\n    var res = [];\n    responses.forEach(function (response) {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n  console.log(allComments);\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), comments.map(function (comment) {\n    var _comment$responses;\n\n    return __jsx(Comment, {\n      actions: [__jsx(\"span\", {\n        key: \"comment-basic-reply-to\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }, \"Reply \")],\n      author: __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 19\n        }\n      }, comment.username),\n      avatar: __jsx(Avatar, {\n        src: comment.userImage,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 19\n        }\n      }),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 20\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }\n      }, typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, (_comment$responses = comment.responses) === null || _comment$responses === void 0 ? void 0 : _comment$responses.map(function (c) {\n      return __jsx(Comment, {\n        actions: [__jsx(\"span\", {\n          key: \"comment-basic-reply-to\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }\n        }, \"Reply \")],\n        author: __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 23\n          }\n        }, comment.username),\n        avatar: __jsx(Avatar, {\n          src: comment.userImage,\n          alt: comment.username,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 23\n          }\n        }),\n        content: __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 24\n          }\n        }, comment.content),\n        datetime: __jsx(Tooltip, {\n          title: typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }\n        }, typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      });\n    }));\n  }));\n};\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","moment","Comments","comments","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","console","log","length","comment","username","userImage","content","createdAt","unix","seconds","format","fromNow","c"],"mappings":"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","sourcesContent":["import { Comment, Tooltip, Avatar } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nconst Comments = ({ comments }) => {\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n  console.log(allComments);\r\n  return (\r\n    <section className=\"comments\">\r\n      <h3>{comments.length} Comments</h3>\r\n      {comments.map((comment) => (\r\n        <Comment\r\n          actions={[<span key=\"comment-basic-reply-to\">Reply </span>]}\r\n          author={<a>{comment.username}</a>}\r\n          avatar={<Avatar src={comment.userImage} alt={comment.username} />}\r\n          content={<p>{comment.content}</p>}\r\n          datetime={\r\n            <Tooltip\r\n              title={\r\n                typeof comment.createdAt === \"object\"\r\n                  ? moment\r\n                      .unix(comment.createdAt.seconds)\r\n                      .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n              }\r\n            >\r\n              <span>\r\n                {typeof comment.createdAt === \"object\"\r\n                  ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                  : moment(comment.createdAt).fromNow()}\r\n              </span>\r\n            </Tooltip>\r\n          }\r\n        >\r\n          {comment.responses?.map((c) => (\r\n            <Comment\r\n              actions={[<span key=\"comment-basic-reply-to\">Reply </span>]}\r\n              author={<a>{comment.username}</a>}\r\n              avatar={<Avatar src={comment.userImage} alt={comment.username} />}\r\n              content={<p>{comment.content}</p>}\r\n              datetime={\r\n                <Tooltip\r\n                  title={\r\n                    typeof comment.createdAt === \"object\"\r\n                      ? moment\r\n                          .unix(comment.createdAt.seconds)\r\n                          .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  }\r\n                >\r\n                  <span>\r\n                    {typeof comment.createdAt === \"object\"\r\n                      ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                      : moment(comment.createdAt).fromNow()}\r\n                  </span>\r\n                </Tooltip>\r\n              }\r\n            />\r\n          ))}\r\n        </Comment>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}