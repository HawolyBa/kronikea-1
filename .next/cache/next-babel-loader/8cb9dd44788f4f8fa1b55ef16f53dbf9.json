{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_USER_LOCATIONS, GET_STORY, GET_CHAPTERS, ADD_STORY, ADD_CHAPTER, EDIT_CHAPTER, GET_CHAPTER, EDIT_STORY, DISPATCH_ERROR } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\";\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      let mainArr = [];\n      main.forEach(c => {\n        db.collection(\"characters\").doc(c).get().then(character => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, character.data()), {}, {\n            id: character.id\n          })];\n        });\n      });\n      dispatch({\n        type: GET_STORY,\n        storyExists: true,\n        payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id,\n          mainCharacters: mainArr\n        })\n      });\n    } else {\n      dispatch({\n        type: DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n  console.log(data);\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        banner: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        locationsCount: 0,\n        secondaryCharacters: [],\n        featured: false,\n        note: 0\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      locationsCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url\n      }));\n    }).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const addChapter = data => dispatch => {\n  dispatch({\n    type: ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    commentsCount: 0,\n    note: 0,\n    voters: [],\n    votesCount: 0,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    db.collection(\"stories\").doc(data.storyId).get().then(doc => {\n      const characters = doc.data().secondaryCharacters;\n      const main = doc.data().mainCharacters;\n      db.collection(\"stories\").doc(data.storyId).update({\n        secondaryCharacters: [...new Set([...characters, ...data.characters.filter(c => !main.includes(c))])]\n      }).then(() => {\n        dispatch({\n          type: ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: res.id,\n            loading: false\n          }\n        });\n      });\n    });\n  }); // .then((res) => {\n  //   dispatch({\n  //     type: ADD_CHAPTER,\n  //     payload: {\n  //       message: \"Chapter added successfully\",\n  //       chapId: res.id,\n  //     },\n  //   });\n  // })\n  // .catch((err) =>\n  //   dispatch({\n  //     type: ADD_CHAPTER,\n  //     payload: { message: err.message, chapId: \"\" },\n  //   })\n  // );\n};\nexport const getChapter = (storyId, id) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(doc => {\n        if (doc.exists) {\n          dispatch({\n            type: GET_CHAPTER,\n            payload: {\n              chapter: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              chapterExists: true\n            }\n          });\n        } else {\n          dispatch({\n            type: GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const editChapter = (data, storyId, chapid) => dispatch => {\n  dispatch({\n    type: EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    db.collection(\"stories\").doc(storyId).get().then(doc => {\n      const characters = doc.data().secondaryCharacters;\n      const main = doc.data().mainCharacters;\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters: data.characters ? [...new Set([...characters, ...data.characters.filter(c => !main.includes(c))])] : characters\n      }).then(() => {\n        dispatch({\n          type: EDIT_CHAPTER,\n          payload: {\n            message: \"Chapter edited successfully\",\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: GET_CHAPTERS,\n      payload: arr\n    });\n  });\n};\nexport const getStoryCharacters = id => dispatch => {};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getUserLocations = () => dispatch => {\n  db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_USER_LOCATIONS","GET_STORY","GET_CHAPTERS","ADD_STORY","ADD_CHAPTER","EDIT_CHAPTER","GET_CHAPTER","EDIT_STORY","DISPATCH_ERROR","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","mainArr","forEach","c","character","type","storyExists","payload","catch","err","console","log","addStory","loading","imageName","title","toLowerCase","split","join","banner","ref","currentUser","uid","put","child","getDownloadURL","url","add","authorId","authorName","oneShot","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","locationsCount","secondaryCharacters","featured","note","res","success","setTimeout","push","storyId","error","editStory","loadingStory","update","addChapter","commentsCount","voters","votesCount","characters","Set","filter","includes","chapId","getChapter","chapter","chapterExists","editChapter","chapid","getChapters","where","orderBy","onSnapshot","docs","arr","number","getStoryCharacters","getUserStories","items","getUserLocations","locations","getFavoriteStories","favArr","users","result","map","user","Promise","all","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_USER_LOCATIONS,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n  ADD_CHAPTER,\r\n  EDIT_CHAPTER,\r\n  GET_CHAPTER,\r\n  EDIT_STORY,\r\n  DISPATCH_ERROR,\r\n} from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        let mainArr = [];\r\n        main.forEach((c) => {\r\n          db.collection(\"characters\")\r\n            .doc(c)\r\n            .get()\r\n            .then((character) => {\r\n              mainArr = [...mainArr, { ...character.data(), id: character.id }];\r\n            });\r\n        });\r\n        dispatch({\r\n          type: GET_STORY,\r\n          storyExists: true,\r\n          payload: { ...doc.data(), id: doc.id, mainCharacters: mainArr },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_STORY, payload: { loading: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n  console.log(data);\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          locationsCount: 0,\r\n          secondaryCharacters: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        locationsCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const addChapter = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          const characters = doc.data().secondaryCharacters;\r\n          const main = doc.data().mainCharacters;\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              secondaryCharacters: [\r\n                ...new Set([\r\n                  ...characters,\r\n                  ...data.characters.filter((c) => !main.includes(c)),\r\n                ]),\r\n              ],\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: res.id,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n  // .then((res) => {\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: {\r\n  //       message: \"Chapter added successfully\",\r\n  //       chapId: res.id,\r\n  //     },\r\n  //   });\r\n  // })\r\n  // .catch((err) =>\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: { message: err.message, chapId: \"\" },\r\n  //   })\r\n  // );\r\n};\r\n\r\nexport const getChapter = (storyId, id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((doc) => {\r\n            if (doc.exists) {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: {\r\n                  chapter: { ...doc.data(), id: doc.id },\r\n                  chapterExists: true,\r\n                },\r\n              });\r\n            } else {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid) => (dispatch) => {\r\n  dispatch({ type: EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          const characters = doc.data().secondaryCharacters;\r\n          const main = doc.data().mainCharacters;\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters: data.characters\r\n                ? [\r\n                    ...new Set([\r\n                      ...characters,\r\n                      ...data.characters.filter((c) => !main.includes(c)),\r\n                    ]),\r\n                  ]\r\n                : characters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}