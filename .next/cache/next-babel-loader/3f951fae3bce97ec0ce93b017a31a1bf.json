{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\hooks\\\\userHooks.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport { auth, db } from \"../redux/fbConfig\";\nimport { message } from \"antd\";\nvar authContext = /*#__PURE__*/createContext();\nexport function ProvideAuth(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }\n  }, children);\n}\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport var useAuth = function useAuth() {\n  _s2();\n\n  return useContext(authContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState({\n    password: \"\",\n    email: \"\",\n    username: \"\"\n  }),\n      errors = _useState3[0],\n      setErrors = _useState3[1]; // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n\n  var signin = function signin(email, password) {\n    return auth.signInWithEmailAndPassword(email, password).then(function (response) {\n      setErrors({\n        password: \"\",\n        email: \"\"\n      });\n      setUser(response.user);\n      return response.user;\n    })[\"catch\"](function (err) {\n      if (err.code === \"auth/wrong-password\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          password: err.message\n        }));\n      } else if (err.code === \"auth/user-not-found\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          email: err.message\n        }));\n      }\n    });\n  };\n\n  var signup = function signup(email, password, username) {\n    auth.createUserWithEmailAndPassword(email, password).then( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors({\n                  password: \"\",\n                  email: \"\",\n                  username: \"\"\n                });\n                setUser(_objectSpread(_objectSpread({}, response.user), {}, {\n                  username: username\n                }));\n                _context.next = 4;\n                return db.collection(\"users\").doc(response.user.uid).set({\n                  username: username,\n                  likesCount: 0,\n                  twitter: \"\",\n                  facebook: \"\",\n                  instagram: \"\",\n                  deviantart: \"\",\n                  biography: \"\",\n                  badges: [],\n                  createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n                  image: \"\",\n                  suspended: false\n                });\n\n              case 4:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).then(function () {\n      return auth.currentUser.sendEmailVerification();\n    })[\"catch\"](function (err) {\n      if (err.code === \"auth/email-already-in-use\" || err.code === \"auth/invalid-email\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          email: err.message\n        }));\n      } else if (err.code === \"auth/weak-password\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          password: err.message\n        }));\n      }\n    });\n  };\n\n  var signout = function signout() {\n    return auth.signOut().then(function () {\n      setUser(false);\n    });\n  };\n\n  var sendPasswordResetEmail = function sendPasswordResetEmail(email) {\n    return auth.sendPasswordResetEmail(email).then(function () {\n      return true;\n    });\n  };\n\n  var confirmPasswordReset = function confirmPasswordReset(code, password) {\n    return auth.confirmPasswordReset(code, password).then(function () {\n      return true;\n    });\n  };\n\n  var verifyEmail = function verifyEmail() {\n    auth.currentUser.sendEmailVerification().then(function () {\n      message.info(\"Verification Email sent. Check your inbox !\");\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n\n  var deleteAccount = function deleteAccount() {\n    var batch = db.batch();\n    var userId = auth.currentUser.uid;\n    var allStories = db.collection(\"stories\").where(\"authorId\", \"==\", userId).get();\n    var allCharacters = db.collection(\"characters\").where(\"authorId\", \"==\", userId).get();\n    var allNotifications = db.collection(\"characters\").where(\"recipient\", \"==\", userId).get();\n    Promise.all([allStories, allCharacters, allNotifications]).then(function (res) {\n      res[0].forEach(function (story) {\n        return batch[\"delete\"](db.collection(\"stories\").doc(story.id));\n      });\n    });\n    auth.currentUser[\"delete\"]().then(function () {\n      db.collection(\"users\").doc(userId)[\"delete\"]();\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n\n  useEffect(function () {\n    var unsubscribe = auth.onAuthStateChanged(function (user) {\n      if (user) {\n        setUser(user);\n\n        if (user.uid) {\n          var username = \"\";\n          setIsLoading(false);\n          db.collection(\"users\").doc(user.uid).onSnapshot(function (doc) {\n            if (doc.exists) {\n              username = doc.data().username;\n              setUser(_objectSpread(_objectSpread({}, user), {}, {\n                username: username,\n                image: doc.data().image\n              }));\n            }\n          });\n        }\n      } else {\n        setUser(false);\n        setIsLoading(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return function () {\n      return unsubscribe();\n    };\n  }, []); // Return the user object and auth methods\n\n  return {\n    deleteAccount: deleteAccount,\n    isLoading: isLoading,\n    errors: errors,\n    user: user,\n    signin: signin,\n    signup: signup,\n    signout: signout,\n    sendPasswordResetEmail: sendPasswordResetEmail,\n    confirmPasswordReset: confirmPasswordReset,\n    verifyEmail: verifyEmail\n  };\n}\n\n_s3(useProvideAuth, \"cEDdLuBwHnm3Hq/0+d+TrCNOg2c=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/hooks/userHooks.js"],"names":["React","useState","useEffect","useContext","createContext","firebase","auth","db","message","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","isLoading","setIsLoading","password","email","username","errors","setErrors","signin","signInWithEmailAndPassword","then","response","err","code","signup","createUserWithEmailAndPassword","collection","doc","uid","set","likesCount","twitter","facebook","instagram","deviantart","biography","badges","createdAt","firestore","FieldValue","serverTimestamp","image","suspended","currentUser","sendEmailVerification","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","verifyEmail","info","error","deleteAccount","batch","userId","allStories","where","get","allCharacters","allNotifications","Promise","all","res","forEach","story","id","console","log","unsubscribe","onAuthStateChanged","onSnapshot","exists","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport { auth, db } from \"../redux/fbConfig\";\r\nimport { message } from \"antd\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [errors, setErrors] = useState({\r\n    password: \"\",\r\n    email: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n  const signin = (email, password) => {\r\n    return auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        setErrors({ password: \"\", email: \"\" });\r\n        setUser(response.user);\r\n        return response.user;\r\n      })\r\n      .catch((err) => {\r\n        if (err.code === \"auth/wrong-password\") {\r\n          setErrors({ ...errors, password: err.message });\r\n        } else if (err.code === \"auth/user-not-found\") {\r\n          setErrors({ ...errors, email: err.message });\r\n        }\r\n      });\r\n  };\r\n\r\n  const signup = (email, password, username) => {\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async (response) => {\r\n        setErrors({\r\n          password: \"\",\r\n          email: \"\",\r\n          username: \"\",\r\n        });\r\n        setUser({ ...response.user, username: username });\r\n        return await db.collection(\"users\").doc(response.user.uid).set({\r\n          username,\r\n          likesCount: 0,\r\n          twitter: \"\",\r\n          facebook: \"\",\r\n          instagram: \"\",\r\n          deviantart: \"\",\r\n          biography: \"\",\r\n          badges: [],\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          image: \"\",\r\n          suspended: false,\r\n        });\r\n      })\r\n      .then(() => {\r\n        return auth.currentUser.sendEmailVerification();\r\n      })\r\n      .catch((err) => {\r\n        if (\r\n          err.code === \"auth/email-already-in-use\" ||\r\n          err.code === \"auth/invalid-email\"\r\n        ) {\r\n          setErrors({ ...errors, email: err.message });\r\n        } else if (err.code === \"auth/weak-password\") {\r\n          setErrors({ ...errors, password: err.message });\r\n        }\r\n      });\r\n  };\r\n\r\n  const signout = () => {\r\n    return auth.signOut().then(() => {\r\n      setUser(false);\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetEmail = (email) => {\r\n    return auth.sendPasswordResetEmail(email).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const confirmPasswordReset = (code, password) => {\r\n    return auth.confirmPasswordReset(code, password).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const verifyEmail = () => {\r\n    auth.currentUser\r\n      .sendEmailVerification()\r\n      .then(() => {\r\n        message.info(\"Verification Email sent. Check your inbox !\");\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  };\r\n\r\n  const deleteAccount = () => {\r\n    const batch = db.batch();\r\n    const userId = auth.currentUser.uid;\r\n    const allStories = db\r\n      .collection(\"stories\")\r\n      .where(\"authorId\", \"==\", userId)\r\n      .get();\r\n    const allCharacters = db\r\n      .collection(\"characters\")\r\n      .where(\"authorId\", \"==\", userId)\r\n      .get();\r\n    const allNotifications = db\r\n      .collection(\"characters\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .get();\r\n\r\n    Promise.all([allStories, allCharacters, allNotifications]).then((res) => {\r\n      res[0].forEach((story) =>\r\n        batch.delete(db.collection(\"stories\").doc(story.id))\r\n      );\r\n    });\r\n\r\n    auth.currentUser\r\n      .delete()\r\n      .then(() => {\r\n        db.collection(\"users\").doc(userId).delete();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        setUser(user);\r\n        if (user.uid) {\r\n          let username = \"\";\r\n          setIsLoading(false);\r\n          db.collection(\"users\")\r\n            .doc(user.uid)\r\n            .onSnapshot((doc) => {\r\n              if (doc.exists) {\r\n                username = doc.data().username;\r\n                setUser({ ...user, username, image: doc.data().image });\r\n              }\r\n            });\r\n        }\r\n      } else {\r\n        setUser(false);\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    deleteAccount,\r\n    isLoading,\r\n    errors,\r\n    user,\r\n    signin,\r\n    signup,\r\n    signout,\r\n    sendPasswordResetEmail,\r\n    confirmPasswordReset,\r\n    verifyEmail,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}