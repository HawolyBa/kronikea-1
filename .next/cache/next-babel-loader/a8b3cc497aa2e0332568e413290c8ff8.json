{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_STORY, GET_CHAPTERS, ADD_STORY } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\";\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    dispatch({\n      type: GET_STORY,\n      payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      })\n    });\n  });\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n  console.log(data);\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        banner: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        locationsCount: 0,\n        secondaryCharacters: [],\n        featured: false,\n        note: 0\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      locationsCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: GET_CHAPTERS,\n      payload: arr\n    });\n  });\n};\nexport const getStoryCharacters = id => dispatch => {};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_STORY","GET_CHAPTERS","ADD_STORY","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","type","payload","data","addStory","loading","imageName","title","toLowerCase","split","join","console","log","banner","ref","currentUser","uid","put","child","getDownloadURL","url","add","authorId","authorName","oneShot","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","locationsCount","secondaryCharacters","featured","note","res","success","setTimeout","push","storyId","catch","err","error","getChapters","where","orderBy","onSnapshot","docs","arr","forEach","number","commentsCount","getStoryCharacters","getUserStories","items","getFavoriteStories","favArr","users","result","map","user","Promise","all","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n} from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      dispatch({\r\n        type: GET_STORY,\r\n        payload: { ...doc.data(), id: doc.id },\r\n      });\r\n    });\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_STORY, payload: { loading: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n  console.log(data);\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          locationsCount: 0,\r\n          secondaryCharacters: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        locationsCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}