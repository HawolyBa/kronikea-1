{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\pages\\\\story\\\\[id]\\\\edit.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Row, Col, Divider, Form, Spin, message, Input, Select } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport isImageUrl from \"is-image-url\";\nimport { CATEGORIES, COPYRIGHTS, LANGUAGES, STATUS } from \"../../../utils/constants\";\nimport { useAuth } from \"../../../hooks/userHooks\";\nimport { getUserCharacters } from \"../../../redux/actions/charactersActions\";\nimport { getStory, editStory } from \"../../../redux/actions/storiesActions\";\nimport Loader from \"../../../components/common/Loader\";\n\nconst EditStory = props => {\n  const auth = useAuth();\n  const router = useRouter();\n  const {\n    story,\n    loading\n  } = props;\n  const [form] = Form.useForm(); // React.useEffect(() => {\n  //   if (auth.user) {\n  //     // props.getUserCharacters();\n  //   }\n  // }, [auth]);\n\n  React.useEffect(() => {\n    if (router.query.id) {\n      props.getStory(router.query.id);\n    }\n  }, [router.query.id]);\n\n  const submit = values => {\n    console.log(values);\n  };\n\n  const onFailed = () => {};\n\n  console.log(story.title);\n\n  const filterSort = (a, b) => {\n    const keyA = a.name,\n          keyB = b.name;\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  };\n\n  return !loading && story.title ? __jsx(\"div\", {\n    className: \"new-story custom-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Edit story: \", story.title), __jsx(Form, {\n    layout: \"vertical\",\n    scrollToFirstError: true,\n    onFinishFailed: onFailed,\n    onFinish: submit,\n    form: form,\n    initialValues: _objectSpread({}, story),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [24, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    sm: 24,\n    xs: 24,\n    md: 18,\n    lg: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    colon: false,\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"A title is required\"\n    }, {\n      max: 65\n    }],\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }))), __jsx(Col, {\n    sm: 24,\n    xs: 24,\n    lg: 6,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    name: \"categories\",\n    label: \"Categories\",\n    rules: [{\n      required: true,\n      message: \"At least 1 category is required\"\n    }, {\n      max: 2,\n      type: \"array\",\n      message: \"You can only select up to 2 categories\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    mode: \"multiple\",\n    allowClear: true,\n    maxTagCount: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, CATEGORIES === null || CATEGORIES === void 0 ? void 0 : CATEGORIES.sort((a, b) => {\n    const keyA = a.name,\n          keyB = b.name; // Compare the 2 dates\n\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  }).map(cat => __jsx(Option, {\n    value: cat.value,\n    key: cat.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, cat.name)))))), __jsx(Row, {\n    gutter: [24, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 8,\n    sm: 24,\n    xs: 24,\n    lg: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    name: \"language\",\n    label: \"Language\",\n    rules: [{\n      required: true,\n      message: \"A language is required\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    filterSort: filterSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, LANGUAGES === null || LANGUAGES === void 0 ? void 0 : LANGUAGES.map(lang => __jsx(Option, {\n    value: lang.value,\n    key: lang.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, lang.name))))), __jsx(Col, {\n    md: 8,\n    sm: 24,\n    xs: 24,\n    lg: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    name: \"status\",\n    label: \"Status\",\n    rules: [{\n      required: true,\n      message: \"A status is required\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, STATUS.map(stat => __jsx(Option, {\n    value: stat.value,\n    key: stat.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, stat.name))))))))) : __jsx(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  characters: state.characters.userCharacters,\n  confirmMessage: state.stories.message,\n  storyId: state.stories.storyId,\n  loading: state.stories.loadingStory,\n  story: state.stories.story\n});\n\nexport default connect(mapStateToProps, {\n  getUserCharacters,\n  editStory,\n  getStory\n})(EditStory);","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/pages/story/[id]/edit.js"],"names":["React","Row","Col","Divider","Form","Spin","message","Input","Select","connect","useRouter","isImageUrl","CATEGORIES","COPYRIGHTS","LANGUAGES","STATUS","useAuth","getUserCharacters","getStory","editStory","Loader","EditStory","props","auth","router","story","loading","form","useForm","useEffect","query","id","submit","values","console","log","onFailed","title","filterSort","a","b","keyA","name","keyB","required","max","type","sort","map","cat","value","lang","stat","mapStateToProps","state","characters","userCharacters","confirmMessage","stories","storyId","loadingStory"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Divider, Form, Spin, message, Input, Select } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport isImageUrl from \"is-image-url\";\r\n\r\nimport {\r\n  CATEGORIES,\r\n  COPYRIGHTS,\r\n  LANGUAGES,\r\n  STATUS,\r\n} from \"../../../utils/constants\";\r\nimport { useAuth } from \"../../../hooks/userHooks\";\r\nimport { getUserCharacters } from \"../../../redux/actions/charactersActions\";\r\nimport { getStory, editStory } from \"../../../redux/actions/storiesActions\";\r\nimport Loader from \"../../../components/common/Loader\";\r\n\r\nconst EditStory = (props) => {\r\n  const auth = useAuth();\r\n  const router = useRouter();\r\n  const { story, loading } = props;\r\n  const [form] = Form.useForm();\r\n\r\n  // React.useEffect(() => {\r\n  //   if (auth.user) {\r\n  //     // props.getUserCharacters();\r\n  //   }\r\n  // }, [auth]);\r\n\r\n  React.useEffect(() => {\r\n    if (router.query.id) {\r\n      props.getStory(router.query.id);\r\n    }\r\n  }, [router.query.id]);\r\n\r\n  const submit = (values) => {\r\n    console.log(values);\r\n  };\r\n  const onFailed = () => {};\r\n\r\n  console.log(story.title);\r\n\r\n  const filterSort = (a, b) => {\r\n    const keyA = a.name,\r\n      keyB = b.name;\r\n    if (keyA < keyB) return -1;\r\n    if (keyA > keyB) return 1;\r\n    return 0;\r\n  };\r\n\r\n  return !loading && story.title ? (\r\n    <div className=\"new-story custom-form\">\r\n      <div className=\"inner\">\r\n        <h2 className=\"side-heading\">Edit story: {story.title}</h2>\r\n        <Form\r\n          layout=\"vertical\"\r\n          scrollToFirstError\r\n          onFinishFailed={onFailed}\r\n          onFinish={submit}\r\n          form={form}\r\n          initialValues={{ ...story }}\r\n        >\r\n          <Row gutter={[24, 24]}>\r\n            <Col sm={24} xs={24} md={18} lg={18}>\r\n              <Form.Item\r\n                colon={false}\r\n                name=\"title\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"A title is required\",\r\n                  },\r\n                  { max: 65 },\r\n                ]}\r\n                label=\"Title\"\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col sm={24} xs={24} lg={6} md={6}>\r\n              <Form.Item\r\n                name=\"categories\"\r\n                label=\"Categories\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"At least 1 category is required\",\r\n                  },\r\n                  {\r\n                    max: 2,\r\n                    type: \"array\",\r\n                    message: \"You can only select up to 2 categories\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select mode=\"multiple\" allowClear maxTagCount={2}>\r\n                  {CATEGORIES?.sort((a, b) => {\r\n                    const keyA = a.name,\r\n                      keyB = b.name;\r\n                    // Compare the 2 dates\r\n                    if (keyA < keyB) return -1;\r\n                    if (keyA > keyB) return 1;\r\n                    return 0;\r\n                  }).map((cat) => (\r\n                    <Option value={cat.value} key={cat.value}>\r\n                      {cat.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={[24, 24]}>\r\n            <Col md={8} sm={24} xs={24} lg={8}>\r\n              <Form.Item\r\n                name=\"language\"\r\n                label=\"Language\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"A language is required\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select filterSort={filterSort}>\r\n                  {LANGUAGES?.map((lang) => (\r\n                    <Option value={lang.value} key={lang.value}>\r\n                      {lang.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={8} sm={24} xs={24} lg={8}>\r\n              <Form.Item\r\n                name=\"status\"\r\n                label=\"Status\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"A status is required\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select>\r\n                  {STATUS.map((stat) => (\r\n                    <Option value={stat.value} key={stat.value}>\r\n                      {stat.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Loader />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  characters: state.characters.userCharacters,\r\n  confirmMessage: state.stories.message,\r\n  storyId: state.stories.storyId,\r\n  loading: state.stories.loadingStory,\r\n  story: state.stories.story,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getUserCharacters,\r\n  editStory,\r\n  getStory,\r\n})(EditStory);\r\n"]},"metadata":{},"sourceType":"module"}