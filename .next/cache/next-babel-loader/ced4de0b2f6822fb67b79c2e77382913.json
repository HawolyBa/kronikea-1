{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db, auth, storage } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport var log_in = function log_in(email, password) {\n  return function (dispatch) {\n    console.log(email, password);\n    auth.signInWithEmailAndPassword(email, password);\n  };\n};\nexport var getProfile = function getProfile(id) {\n  return function (dispatch) {\n    db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(function (doc) {\n      return dispatch({\n        type: types.GET_PROFILE,\n        payload: _objectSpread({\n          id: doc.id\n        }, doc.data())\n      });\n    });\n  };\n};\nexport var getFavoriteAuthors = function getFavoriteAuthors(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"senderId\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().recipient]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_AUTHORS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getFollowers = function getFollowers(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().senderId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FOLLOWERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getIsFollowing = function getIsFollowing(userId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs.length > 0 ? true : false;\n        return dispatch({\n          type: types.IS_FOLLOWING,\n          payload: answer\n        });\n      });\n    }\n  };\n};\nexport var followUser = function followUser(id, isFavorite, newFollower) {\n  return function (dispatch) {\n    if (isFavorite) return message.warning(\"You are already following this user\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"usersLikes\").add({\n      sender: newFollower.username,\n      senderId: newFollower.uid,\n      recipient: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return message.success(\"You are now following this user\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var unfollowUser = function unfollowUser(id, isFavorite) {\n  return function (dispatch) {\n    if (!isFavorite) return message.warning(\"You are not following this user yet\");\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"usersLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"User successfully unfollowed\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var changeProfile = function changeProfile(data, setOpen, username, userImage) {\n  return function (dispatch) {\n    var batch = db.batch();\n\n    var newPassword = data.newPassword,\n        actualPassword = data.actualPassword,\n        newInfo = _objectWithoutProperties(data, [\"newPassword\", \"actualPassword\"]);\n\n    var imageName = \"\".concat(auth.currentUser.uid, \"_\").concat(data.username);\n\n    var reauthenticate = function reauthenticate(currentPassword) {\n      var user = auth.currentUser;\n      var cred = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);\n      return user.reauthenticateWithCredential(cred);\n    };\n\n    if (newPassword) {\n      reauthenticate(actualPassword).then(function () {\n        var user = auth.currentUser;\n        user.updatePassword(newPassword).then(function () {\n          if (typeof data.image === \"object\") {\n            storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n              return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n            }).then(function (url) {\n              if (data.username !== username || data.image !== userImage) {\n                var userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n                var userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n                var userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n                var userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get();\n                Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(function (res) {\n                  res[0].forEach(function (story) {\n                    batch.update(db.collection(\"stories\").doc(story.id), {\n                      userImage: url,\n                      authorName: data.username\n                    });\n                  });\n                  res[0].forEach(function (chap) {\n                    batch.update(db.collection(\"chapters\").doc(chap.id), {\n                      userImage: url,\n                      authorName: data.username\n                    });\n                  });\n                  res[0].forEach(function (_char) {\n                    batch.update(db.collection(\"characters\").doc(_char.id), {\n                      userImage: url,\n                      authorName: data.username\n                    });\n                  });\n                  res[0].forEach(function (_char2) {\n                    batch.update(db.collection(\"comments\").doc(_char2.id), {\n                      userImage: url,\n                      username: data.username\n                    });\n                  });\n                });\n              }\n\n              batch.update(db.collection(\"users\").doc(auth.currentUser.uid, _objectSpread({\n                image: url\n              }, newInfo)));\n              return batch.commit();\n            }).then(function () {\n              setOpen(false);\n              message.success(\"Your profile has been successfully updated\");\n            })[\"catch\"](function (error) {\n              message.error(error.message);\n            });\n          } else {\n            if (data.username !== username || data.image !== userImage) {\n              var userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n              var userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n              var userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n              var userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get();\n              Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(function (res) {\n                res[0].forEach(function (story) {\n                  batch.update(db.collection(\"stories\").doc(story.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(function (chap) {\n                  batch.update(db.collection(\"chapters\").doc(chap.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(function (_char3) {\n                  batch.update(db.collection(\"characters\").doc(_char3.id), {\n                    userImage: url,\n                    authorName: data.username\n                  });\n                });\n                res[0].forEach(function (_char4) {\n                  batch.update(db.collection(\"comments\").doc(_char4.id), {\n                    userImage: url,\n                    username: data.username\n                  });\n                });\n              });\n            }\n\n            batch.update(db.collection(\"users\").doc(auth.currentUser.uid, _objectSpread({}, newInfo)));\n            batch.commit().then(function () {\n              setOpen(false);\n              message.success(\"Your profile has been successfully updated\");\n            })[\"catch\"](function (error) {\n              message.error(error.message);\n            });\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          if (data.username !== username || data.image !== userImage) {\n            var userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n            var userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n            var userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n            var userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get();\n            Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(function (res) {\n              res[0].forEach(function (story) {\n                batch.update(db.collection(\"stories\").doc(story.id), {\n                  userImage: url,\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(function (chap) {\n                batch.update(db.collection(\"chapters\").doc(chap.id), {\n                  userImage: url,\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(function (_char5) {\n                batch.update(db.collection(\"characters\").doc(_char5.id), {\n                  userImage: url,\n                  authorName: data.username\n                });\n              });\n              res[0].forEach(function (_char6) {\n                batch.update(db.collection(\"comments\").doc(_char6.id), {\n                  userImage: url,\n                  username: data.username\n                });\n              });\n            });\n          }\n\n          batch.update(db.collection(\"users\").doc(auth.currentUser.uid, _objectSpread({}, newInfo)));\n          return batch.commit();\n        }).then(function () {\n          setOpen(false);\n          message.success(\"Your profile has been successfully updated\");\n        })[\"catch\"](function (error) {\n          message.error(error.message);\n        });\n      } else {\n        if (data.username !== username || data.image !== userImage) {\n          var userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n          var userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n          var userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n          var userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get();\n          Promise.all([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]).then(function (res) {\n            res[0].forEach(function (story) {\n              batch.update(db.collection(\"stories\").doc(story.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(function (chap) {\n              batch.update(db.collection(\"chapters\").doc(chap.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(function (_char7) {\n              batch.update(db.collection(\"characters\").doc(_char7.id), {\n                userImage: url,\n                authorName: data.username\n              });\n            });\n            res[0].forEach(function (_char8) {\n              batch.update(db.collection(\"comments\").doc(_char8.id), {\n                userImage: url,\n                username: data.username\n              });\n            });\n          });\n        }\n\n        batch.update(db.collection(\"users\").doc(auth.currentUser.uid, _objectSpread({}, newInfo)));\n        batch.commit().then(function () {\n          setOpen(false);\n          message.success(\"Your profile has been successfully updated\");\n        })[\"catch\"](function (error) {\n          message.error(error.message);\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","storage","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","userId","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","snapshot","answer","length","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","success","err","unfollowUser","changeProfile","setOpen","userImage","batch","newPassword","actualPassword","newInfo","imageName","reauthenticate","currentPassword","cred","EmailAuthProvider","credential","reauthenticateWithCredential","updatePassword","image","ref","put","child","getDownloadURL","url","userStoriesQuery","userChaptersQuery","userCharactersQuery","userCommentsQuery","story","update","authorName","chap","char","commit"],"mappings":"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","sourcesContent":["import { db, auth, storage } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs.length > 0 ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.uid,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const changeProfile = (data, setOpen, username, userImage) => (\r\n  dispatch\r\n) => {\r\n  const batch = db.batch();\r\n  const { newPassword, actualPassword, ...newInfo } = data;\r\n  const imageName = `${auth.currentUser.uid}_${data.username}`;\r\n\r\n  const reauthenticate = (currentPassword) => {\r\n    const user = auth.currentUser;\r\n    const cred = firebase.auth.EmailAuthProvider.credential(\r\n      user.email,\r\n      currentPassword\r\n    );\r\n    return user.reauthenticateWithCredential(cred);\r\n  };\r\n\r\n  if (newPassword) {\r\n    reauthenticate(actualPassword)\r\n      .then(() => {\r\n        const user = auth.currentUser;\r\n        user.updatePassword(newPassword).then(() => {\r\n          if (typeof data.image === \"object\") {\r\n            storage\r\n              .ref(`${auth.currentUser.uid}/${imageName}`)\r\n              .put(data.image)\r\n              .then(() => {\r\n                return storage\r\n                  .ref(auth.currentUser.uid)\r\n                  .child(imageName)\r\n                  .getDownloadURL();\r\n              })\r\n              .then((url) => {\r\n                if (data.username !== username || data.image !== userImage) {\r\n                  const userStoriesQuery = db\r\n                    .collection(\"stories\")\r\n                    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                    .get();\r\n                  const userChaptersQuery = db\r\n                    .collection(\"chapters\")\r\n                    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                    .get();\r\n                  const userCharactersQuery = db\r\n                    .collection(\"characters\")\r\n                    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                    .get();\r\n                  const userCommentsQuery = db\r\n                    .collection(\"comments\")\r\n                    .where(\"userId\", \"==\", auth.currentUser.uid)\r\n                    .get();\r\n\r\n                  Promise.all([\r\n                    userStoriesQuery,\r\n                    userChaptersQuery,\r\n                    userCharactersQuery,\r\n                    userCommentsQuery,\r\n                  ]).then((res) => {\r\n                    res[0].forEach((story) => {\r\n                      batch.update(db.collection(\"stories\").doc(story.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((chap) => {\r\n                      batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((char) => {\r\n                      batch.update(db.collection(\"characters\").doc(char.id), {\r\n                        userImage: url,\r\n                        authorName: data.username,\r\n                      });\r\n                    });\r\n                    res[0].forEach((char) => {\r\n                      batch.update(db.collection(\"comments\").doc(char.id), {\r\n                        userImage: url,\r\n                        username: data.username,\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n                batch.update(\r\n                  db\r\n                    .collection(\"users\")\r\n                    .doc(auth.currentUser.uid, { image: url, ...newInfo })\r\n                );\r\n                return batch.commit();\r\n              })\r\n              .then(() => {\r\n                setOpen(false);\r\n                message.success(\"Your profile has been successfully updated\");\r\n              })\r\n              .catch((error) => {\r\n                message.error(error.message);\r\n              });\r\n          } else {\r\n            if (data.username !== username || data.image !== userImage) {\r\n              const userStoriesQuery = db\r\n                .collection(\"stories\")\r\n                .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                .get();\r\n              const userChaptersQuery = db\r\n                .collection(\"chapters\")\r\n                .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                .get();\r\n              const userCharactersQuery = db\r\n                .collection(\"characters\")\r\n                .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n                .get();\r\n              const userCommentsQuery = db\r\n                .collection(\"comments\")\r\n                .where(\"userId\", \"==\", auth.currentUser.uid)\r\n                .get();\r\n\r\n              Promise.all([\r\n                userStoriesQuery,\r\n                userChaptersQuery,\r\n                userCharactersQuery,\r\n                userCommentsQuery,\r\n              ]).then((res) => {\r\n                res[0].forEach((story) => {\r\n                  batch.update(db.collection(\"stories\").doc(story.id), {\r\n                    userImage: url,\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((chap) => {\r\n                  batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                    userImage: url,\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((char) => {\r\n                  batch.update(db.collection(\"characters\").doc(char.id), {\r\n                    userImage: url,\r\n                    authorName: data.username,\r\n                  });\r\n                });\r\n                res[0].forEach((char) => {\r\n                  batch.update(db.collection(\"comments\").doc(char.id), {\r\n                    userImage: url,\r\n                    username: data.username,\r\n                  });\r\n                });\r\n              });\r\n            }\r\n            batch.update(\r\n              db.collection(\"users\").doc(auth.currentUser.uid, { ...newInfo })\r\n            );\r\n            batch\r\n              .commit()\r\n              .then(() => {\r\n                setOpen(false);\r\n                message.success(\"Your profile has been successfully updated\");\r\n              })\r\n              .catch((error) => {\r\n                message.error(error.message);\r\n              });\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    if (typeof data.image === \"object\") {\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .put(data.image)\r\n        .then(() => {\r\n          return storage\r\n            .ref(auth.currentUser.uid)\r\n            .child(imageName)\r\n            .getDownloadURL();\r\n        })\r\n        .then((url) => {\r\n          if (data.username !== username || data.image !== userImage) {\r\n            const userStoriesQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n              .get();\r\n            const userChaptersQuery = db\r\n              .collection(\"chapters\")\r\n              .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n              .get();\r\n            const userCharactersQuery = db\r\n              .collection(\"characters\")\r\n              .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n              .get();\r\n            const userCommentsQuery = db\r\n              .collection(\"comments\")\r\n              .where(\"userId\", \"==\", auth.currentUser.uid)\r\n              .get();\r\n\r\n            Promise.all([\r\n              userStoriesQuery,\r\n              userChaptersQuery,\r\n              userCharactersQuery,\r\n              userCommentsQuery,\r\n            ]).then((res) => {\r\n              res[0].forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((chap) => {\r\n                batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((char) => {\r\n                batch.update(db.collection(\"characters\").doc(char.id), {\r\n                  userImage: url,\r\n                  authorName: data.username,\r\n                });\r\n              });\r\n              res[0].forEach((char) => {\r\n                batch.update(db.collection(\"comments\").doc(char.id), {\r\n                  userImage: url,\r\n                  username: data.username,\r\n                });\r\n              });\r\n            });\r\n          }\r\n          batch.update(\r\n            db.collection(\"users\").doc(auth.currentUser.uid, { ...newInfo })\r\n          );\r\n          return batch.commit();\r\n        })\r\n        .then(() => {\r\n          setOpen(false);\r\n          message.success(\"Your profile has been successfully updated\");\r\n        })\r\n        .catch((error) => {\r\n          message.error(error.message);\r\n        });\r\n    } else {\r\n      if (data.username !== username || data.image !== userImage) {\r\n        const userStoriesQuery = db\r\n          .collection(\"stories\")\r\n          .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n          .get();\r\n        const userChaptersQuery = db\r\n          .collection(\"chapters\")\r\n          .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n          .get();\r\n        const userCharactersQuery = db\r\n          .collection(\"characters\")\r\n          .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n          .get();\r\n        const userCommentsQuery = db\r\n          .collection(\"comments\")\r\n          .where(\"userId\", \"==\", auth.currentUser.uid)\r\n          .get();\r\n\r\n        Promise.all([\r\n          userStoriesQuery,\r\n          userChaptersQuery,\r\n          userCharactersQuery,\r\n          userCommentsQuery,\r\n        ]).then((res) => {\r\n          res[0].forEach((story) => {\r\n            batch.update(db.collection(\"stories\").doc(story.id), {\r\n              userImage: url,\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((chap) => {\r\n            batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n              userImage: url,\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((char) => {\r\n            batch.update(db.collection(\"characters\").doc(char.id), {\r\n              userImage: url,\r\n              authorName: data.username,\r\n            });\r\n          });\r\n          res[0].forEach((char) => {\r\n            batch.update(db.collection(\"comments\").doc(char.id), {\r\n              userImage: url,\r\n              username: data.username,\r\n            });\r\n          });\r\n        });\r\n      }\r\n      batch.update(\r\n        db.collection(\"users\").doc(auth.currentUser.uid, { ...newInfo })\r\n      );\r\n      batch\r\n        .commit()\r\n        .then(() => {\r\n          setOpen(false);\r\n          message.success(\"Your profile has been successfully updated\");\r\n        })\r\n        .catch((error) => {\r\n          message.error(error.message);\r\n        });\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}