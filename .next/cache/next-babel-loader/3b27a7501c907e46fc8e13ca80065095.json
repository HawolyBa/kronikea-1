{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Grid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Empty } from \"antd\";\nimport Link from \"next/link\";\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport Card from \"../common/Card\";\nimport UserCard from \"../common/UserCard\";\nimport CharacterCard from \"../common/CharacterCard\";\nimport LocationCard from \"../common/LocationCard\";\n\nconst StoriesGrid = ({\n  stories,\n  type,\n  gutter,\n  columnsCountBreakPoints\n}) => {\n  return __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, stories.length > 0 ? stories.map(story => __jsx(Link, {\n    key: story.id,\n    href: `/story/${story.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 15\n    }\n  }, __jsx(Card, {\n    story: story,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No stories yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst UserGrid = ({\n  users,\n  lg,\n  xs,\n  sm,\n  md,\n  gutter\n}) => {\n  return __jsx(Row, {\n    gutter: gutter,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, users.length > 0 ? users.map(u => __jsx(Col, {\n    key: u.id,\n    lg: lg,\n    md: md,\n    sm: sm,\n    xs: xs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(UserCard, {\n    user: u,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No followers yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst LocationGrid = ({\n  locations,\n  gutter,\n  xl,\n  xxl,\n  lg,\n  md,\n  sm,\n  xs,\n  type,\n  columnsCountBreakPoints\n}) => {\n  return locations.length > 0 ? __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, locations.length > 0 ? locations.map(c => __jsx(LocationCard, {\n    location: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 32\n    }\n  })) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No characters yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))) : //   <Row gutter={gutter}>\n  //     {locations.map((loc) => (\n  //       <Col xl={xl} xxl={xxl} xs={xs} sm={sm} md={md} lg={lg} key={loc.id}>\n  //         <LocationCard type={type} location={loc} />\n  //       </Col>\n  //     ))}\n  //   </Row>\n  __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No locations yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  });\n};\n\nconst CharacterGrid = ({\n  gutter,\n  xxl,\n  xl,\n  lg,\n  md,\n  sm,\n  xs,\n  characters,\n  type,\n  columnsCountBreakPoints\n}) => {\n  return characters.length > 0 ? __jsx(ResponsiveMasonry, {\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, __jsx(Masonry, {\n    gutter: gutter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, characters.length > 0 ? characters.map(c => __jsx(Link, {\n    key: c.id,\n    href: `/character/${c.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, __jsx(CharacterCard, {\n    character: c,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  })))) : __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No characters yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }))) : // <Row gutter={gutter}>\n  //   {characters?.map((c) => (\n  //     <Col key={c.id} xxl={xxl} xl={xl} lg={lg} md={md} sm={sm} xs={xs}>\n  //       {type === \"show\" ? (\n  //         <Link href={`/character/${c.id}`}>\n  //           <a>\n  //             <CharacterCard character={c} type={type} />\n  //           </a>\n  //         </Link>\n  //       ) : (\n  //         <CharacterCard character={c} type={type} />\n  //       )}\n  //     </Col>\n  //   ))}\n  // </Row>\n  __jsx(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE,\n    description: \"No characters yet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Grid.js"],"names":["Row","Col","Empty","Link","Masonry","ResponsiveMasonry","Card","UserCard","CharacterCard","LocationCard","StoriesGrid","stories","type","gutter","columnsCountBreakPoints","length","map","story","id","PRESENTED_IMAGE_SIMPLE","UserGrid","users","lg","xs","sm","md","u","LocationGrid","locations","xl","xxl","c","CharacterGrid","characters"],"mappings":"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","sourcesContent":["import { Row, Col, Empty } from \"antd\";\r\nimport Link from \"next/link\";\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\r\n\r\nimport Card from \"../common/Card\";\r\nimport UserCard from \"../common/UserCard\";\r\nimport CharacterCard from \"../common/CharacterCard\";\r\nimport LocationCard from \"../common/LocationCard\";\r\n\r\nconst StoriesGrid = ({ stories, type, gutter, columnsCountBreakPoints }) => {\r\n  return (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {stories.length > 0 ? (\r\n          stories.map((story) => (\r\n            <Link key={story.id} href={`/story/${story.id}`}>\r\n              <a>\r\n                <Card story={story} type={type} />\r\n              </a>\r\n            </Link>\r\n          ))\r\n        ) : (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description=\"No stories yet\"\r\n          />\r\n        )}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  );\r\n};\r\n\r\nconst UserGrid = ({ users, lg, xs, sm, md, gutter }) => {\r\n  return (\r\n    <Row gutter={gutter} align=\"center\">\r\n      {users.length > 0 ? (\r\n        users.map((u) => (\r\n          <Col key={u.id} lg={lg} md={md} sm={sm} xs={xs}>\r\n            <UserCard user={u} />\r\n          </Col>\r\n        ))\r\n      ) : (\r\n        <Empty\r\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n          description=\"No followers yet\"\r\n        />\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst LocationGrid = ({\r\n  locations,\r\n  gutter,\r\n  xl,\r\n  xxl,\r\n  lg,\r\n  md,\r\n  sm,\r\n  xs,\r\n  type,\r\n  columnsCountBreakPoints,\r\n}) => {\r\n  return locations.length > 0 ? (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {locations.length > 0 ? (\r\n          locations.map((c) => <LocationCard location={c} type={type} />)\r\n        ) : (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description=\"No characters yet\"\r\n          />\r\n        )}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  ) : (\r\n    //   <Row gutter={gutter}>\r\n    //     {locations.map((loc) => (\r\n    //       <Col xl={xl} xxl={xxl} xs={xs} sm={sm} md={md} lg={lg} key={loc.id}>\r\n    //         <LocationCard type={type} location={loc} />\r\n    //       </Col>\r\n    //     ))}\r\n    //   </Row>\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No locations yet\"\r\n    />\r\n  );\r\n};\r\n\r\nconst CharacterGrid = ({\r\n  gutter,\r\n  xxl,\r\n  xl,\r\n  lg,\r\n  md,\r\n  sm,\r\n  xs,\r\n  characters,\r\n  type,\r\n  columnsCountBreakPoints,\r\n}) => {\r\n  return characters.length > 0 ? (\r\n    <ResponsiveMasonry columnsCountBreakPoints={columnsCountBreakPoints}>\r\n      <Masonry gutter={gutter}>\r\n        {characters.length > 0 ? (\r\n          characters.map((c) => (\r\n            <Link key={c.id} href={`/character/${c.id}`}>\r\n              <a>\r\n                <CharacterCard character={c} type={type} />\r\n              </a>\r\n            </Link>\r\n          ))\r\n        ) : (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description=\"No characters yet\"\r\n          />\r\n        )}\r\n      </Masonry>\r\n    </ResponsiveMasonry>\r\n  ) : (\r\n    // <Row gutter={gutter}>\r\n    //   {characters?.map((c) => (\r\n    //     <Col key={c.id} xxl={xxl} xl={xl} lg={lg} md={md} sm={sm} xs={xs}>\r\n    //       {type === \"show\" ? (\r\n    //         <Link href={`/character/${c.id}`}>\r\n    //           <a>\r\n    //             <CharacterCard character={c} type={type} />\r\n    //           </a>\r\n    //         </Link>\r\n    //       ) : (\r\n    //         <CharacterCard character={c} type={type} />\r\n    //       )}\r\n    //     </Col>\r\n    //   ))}\r\n    // </Row>\r\n    <Empty\r\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n      description=\"No characters yet\"\r\n    />\r\n  );\r\n};\r\n\r\nexport { StoriesGrid, CharacterGrid, UserGrid, LocationGrid };\r\n"]},"metadata":{},"sourceType":"module"}