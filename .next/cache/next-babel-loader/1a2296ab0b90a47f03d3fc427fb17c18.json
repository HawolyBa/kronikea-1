{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\hooks\\\\userHooks.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { auth } from \"../redux/fbConfig\";\nconst authContext = /*#__PURE__*/createContext();\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true); // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n  const signin = (email, password) => {\n    return auth.signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signup = (email, password) => {\n    return auth.createUserWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signout = () => {\n    return auth.signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return auth.sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return auth.confirmPasswordReset(code, password).then(() => {\n      return true;\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      console.log(user);\n\n      if (user) {\n        setUser(user);\n        setIsLoading(false);\n      } else {\n        setUser(false);\n        setIsLoading(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    loading,\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/hooks/userHooks.js"],"names":["React","useState","useEffect","useContext","createContext","auth","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","isLoading","setIsLoading","signin","email","password","signInWithEmailAndPassword","then","response","signup","createUserWithEmailAndPassword","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","unsubscribe","onAuthStateChanged","console","log","loading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth } from \"../redux/fbConfig\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n  const signin = (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password).then((response) => {\r\n      setUser(response.user);\r\n      return response.user;\r\n    });\r\n  };\r\n\r\n  const signup = (email, password) => {\r\n    return auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        setUser(response.user);\r\n        return response.user;\r\n      });\r\n  };\r\n\r\n  const signout = () => {\r\n    return auth.signOut().then(() => {\r\n      setUser(false);\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetEmail = (email) => {\r\n    return auth.sendPasswordResetEmail(email).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const confirmPasswordReset = (code, password) => {\r\n    return auth.confirmPasswordReset(code, password).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      console.log(user);\r\n      if (user) {\r\n        setUser(user);\r\n        setIsLoading(false);\r\n      } else {\r\n        setUser(false);\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    loading,\r\n    user,\r\n    signin,\r\n    signup,\r\n    signout,\r\n    sendPasswordResetEmail,\r\n    confirmPasswordReset,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}