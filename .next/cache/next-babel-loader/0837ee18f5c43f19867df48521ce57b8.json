{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\common\\\\Pagination.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Pagination as Paginate, Divider, Form } from \"antd\";\nimport { StoriesGrid } from \"./Grid\";\nimport SortInput from \"../profile/SortInput\";\n\nconst Pagination = ({\n  data,\n  xs,\n  sm,\n  lg,\n  xl,\n  md,\n  type,\n  gutter,\n  columnsCountBreakPoints,\n  itemType\n}) => {\n  const [pagination, setPagination] = React.useState({\n    currentPage: 1,\n    datasPerPage: 12\n  });\n  const {\n    currentPage,\n    datasPerPage\n  } = pagination;\n  const indexOfLastData = currentPage * datasPerPage;\n  const indexOfFirstData = indexOfLastData - datasPerPage;\n  const [currentDatas, setCurrentDatas] = React.useState(data.slice(indexOfFirstData, indexOfLastData));\n  const [form] = Form.useForm();\n  React.useEffect(() => {\n    // if (form.getFieldValue(\"sort\") === \"date-asc\") {\n    //   setCurrentDatas(\n    //     currentDatas.sort((a, b) => {\n    //       return typeof a.createdAt === \"object\"\n    //         ? new Date(a.createdAt.seconds * 1000) -\n    //             new Date(b.createdAt.seconds * 1000)\n    //         : new Date(a.createdAt) - new Date(b.createdAt);\n    //     })\n    //   );\n    // } else if (form.getFieldValue(\"sort\") === \"date-desc\") {\n    //   setCurrentDatas(\n    //     currentDatas.sort((a, b) => {\n    //       return typeof a.createdAt === \"object\"\n    //         ? new Date(b.createdAt.seconds * 1000) -\n    //             new Date(a.createdAt.seconds * 1000)\n    //         : new Date(b.createdAt) - new Date(a.createdAt);\n    //     })\n    //   );\n    // } else if (form.getFieldValue(\"sort\") === \"name-desc\") {\n    //   setCurrentDatas(\n    //     currentDatas.sort((a, b) => {\n    //       const keyA = a.title,\n    //         keyB = b.title;\n    //       if (keyA < keyB) return -1;\n    //       if (keyA > keyB) return 1;\n    //       return 0;\n    //     })\n    //   );\n    // } else if (form.getFieldValue(\"sort\") === \"name-asc\") {\n    //   setCurrentDatas(\n    //     currentDatas.sort((a, b) => {\n    //       const keyA = a.title,\n    //         keyB = b.title;\n    //       if (keyA > keyB) return -1;\n    //       if (keyA < keyB) return 1;\n    //       return 0;\n    //     })\n    //   );\n    // }\n    console.log(\"coucou\");\n  }, [form.getFieldValue(\"sort\")]);\n\n  const handleClick = e => setPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n    currentPage: Number(e)\n  }));\n\n  const renderDatas = itemType === \"stories\" ? __jsx(StoriesGrid, {\n    gutter: gutter,\n    type: type,\n    stories: currentDatas,\n    columnsCountBreakPoints: columnsCountBreakPoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }) : null;\n  let pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"ctrl-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), __jsx(SortInput, {\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), renderDatas, __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), __jsx(Paginate, {\n    size: \"small\",\n    showQuickJumper: true,\n    onChange: handleClick,\n    total: data.length,\n    pageSize: datasPerPage,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/common/Pagination.js"],"names":["React","Pagination","Paginate","Divider","Form","StoriesGrid","SortInput","data","xs","sm","lg","xl","md","type","gutter","columnsCountBreakPoints","itemType","pagination","setPagination","useState","currentPage","datasPerPage","indexOfLastData","indexOfFirstData","currentDatas","setCurrentDatas","slice","form","useForm","useEffect","console","log","getFieldValue","handleClick","e","Number","renderDatas","pageNumbers","i","Math","ceil","length","push","total","range"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Pagination as Paginate, Divider, Form } from \"antd\";\r\n\r\nimport { StoriesGrid } from \"./Grid\";\r\nimport SortInput from \"../profile/SortInput\";\r\n\r\nconst Pagination = ({\r\n  data,\r\n  xs,\r\n  sm,\r\n  lg,\r\n  xl,\r\n  md,\r\n  type,\r\n  gutter,\r\n  columnsCountBreakPoints,\r\n  itemType,\r\n}) => {\r\n  const [pagination, setPagination] = React.useState({\r\n    currentPage: 1,\r\n    datasPerPage: 12,\r\n  });\r\n  const { currentPage, datasPerPage } = pagination;\r\n  const indexOfLastData = currentPage * datasPerPage;\r\n  const indexOfFirstData = indexOfLastData - datasPerPage;\r\n  const [currentDatas, setCurrentDatas] = React.useState(\r\n    data.slice(indexOfFirstData, indexOfLastData)\r\n  );\r\n  const [form] = Form.useForm();\r\n\r\n  React.useEffect(() => {\r\n    // if (form.getFieldValue(\"sort\") === \"date-asc\") {\r\n    //   setCurrentDatas(\r\n    //     currentDatas.sort((a, b) => {\r\n    //       return typeof a.createdAt === \"object\"\r\n    //         ? new Date(a.createdAt.seconds * 1000) -\r\n    //             new Date(b.createdAt.seconds * 1000)\r\n    //         : new Date(a.createdAt) - new Date(b.createdAt);\r\n    //     })\r\n    //   );\r\n    // } else if (form.getFieldValue(\"sort\") === \"date-desc\") {\r\n    //   setCurrentDatas(\r\n    //     currentDatas.sort((a, b) => {\r\n    //       return typeof a.createdAt === \"object\"\r\n    //         ? new Date(b.createdAt.seconds * 1000) -\r\n    //             new Date(a.createdAt.seconds * 1000)\r\n    //         : new Date(b.createdAt) - new Date(a.createdAt);\r\n    //     })\r\n    //   );\r\n    // } else if (form.getFieldValue(\"sort\") === \"name-desc\") {\r\n    //   setCurrentDatas(\r\n    //     currentDatas.sort((a, b) => {\r\n    //       const keyA = a.title,\r\n    //         keyB = b.title;\r\n    //       if (keyA < keyB) return -1;\r\n    //       if (keyA > keyB) return 1;\r\n    //       return 0;\r\n    //     })\r\n    //   );\r\n    // } else if (form.getFieldValue(\"sort\") === \"name-asc\") {\r\n    //   setCurrentDatas(\r\n    //     currentDatas.sort((a, b) => {\r\n    //       const keyA = a.title,\r\n    //         keyB = b.title;\r\n    //       if (keyA > keyB) return -1;\r\n    //       if (keyA < keyB) return 1;\r\n    //       return 0;\r\n    //     })\r\n    //   );\r\n    // }\r\n    console.log(\"coucou\");\r\n  }, [form.getFieldValue(\"sort\")]);\r\n\r\n  const handleClick = (e) =>\r\n    setPagination({ ...pagination, currentPage: Number(e) });\r\n\r\n  const renderDatas =\r\n    itemType === \"stories\" ? (\r\n      <StoriesGrid\r\n        gutter={gutter}\r\n        type={type}\r\n        stories={currentDatas}\r\n        columnsCountBreakPoints={columnsCountBreakPoints}\r\n      />\r\n    ) : null;\r\n\r\n  let pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / datasPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"ctrl-section\">\r\n        <Paginate\r\n          size=\"small\"\r\n          showQuickJumper\r\n          onChange={handleClick}\r\n          total={data.length}\r\n          pageSize={datasPerPage}\r\n          showTotal={(total, range) =>\r\n            `${range[0]}-${range[1]} of ${total} items`\r\n          }\r\n        />\r\n        <SortInput form={form} />\r\n      </div>\r\n      <div></div>\r\n      <Divider />\r\n      {renderDatas}\r\n      <Divider />\r\n      <Paginate\r\n        size=\"small\"\r\n        showQuickJumper\r\n        onChange={handleClick}\r\n        total={data.length}\r\n        pageSize={datasPerPage}\r\n        showTotal={(total, range) =>\r\n          `${range[0]}-${range[1]} of ${total} items`\r\n        }\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}