{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id, type) {\n  return function (dispatch) {\n    var relArr = [];\n    var storyArr = [];\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        if (type === \"show\") {\n          var relatives = doc.data().relativesArr;\n          var relQueries = [];\n          relatives.forEach(function (rel) {\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\n          });\n          Promise.all(relQueries).then(function (res) {\n            res.forEach(function (_char) {\n              return relArr.push(_objectSpread(_objectSpread({}, _char.data()), {}, {\n                id: _char.id,\n                relation: doc.data().relatives.find(function (c) {\n                  return c.character_id === _char.id;\n                }).relation\n              }));\n            });\n            var mainQuery = db.collection(\"stories\").where(\"mainArr\", \"array-contains\", id).get();\n            var secondaryQuery = db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).where(\"mainArr\", \"array-contains\", id).get();\n            Promise.all([mainQuery, secondaryQuery]).then(function (result) {\n              console.log(_.concat(result[0], result[1]));\n            });\n            db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (docs) {\n              docs.forEach(function (story) {\n                storyArr.push({\n                  id: story.id,\n                  title: story.data().title\n                });\n              });\n              dispatch({\n                type: types.GET_CHARACTER,\n                payload: {\n                  character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                    id: doc.id,\n                    relatives: relArr.filter(function (r) {\n                      return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                    }),\n                    stories: storyArr.filter(function (r) {\n                      return (auth.currentUser && auth.currentUser.uid) === r.authorId || r[\"public\"];\n                    })\n                  }),\n                  charaExists: true,\n                  loading: false\n                }\n              });\n            });\n          });\n        } else {\n          dispatch({\n            type: types.GET_CHARACTER,\n            payload: {\n              character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              charaExists: true,\n              loading: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var charaId = \"\";\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      image: typeof data.image === \"string\" ? data.image : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(function (res) {\n      charaId = res.id;\n      var imageName = \"\".concat(res.id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n      if (typeof data.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"characters\").doc(charaId).update({\n            image: url\n          });\n        }).then(function () {\n          message.success(\"Character added successfully\");\n          dispatch({\n            type: types.ADD_CHARACTER,\n            payload: {\n              message: \"Character added successfully\",\n              characterId: charaId,\n              loading: false\n            }\n          });\n        });\n      } else {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          relativesArr: data.relatives.map(function (c) {\n            return c.character_id;\n          })\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        relativesArr: data.relatives.map(function (c) {\n          return c.character_id;\n        })\n      })).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id, firstname, lastname) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(id, \"_\").concat(firstname.toLowerCase()).concat(lastname && \"_\").concat(lastname && lastname.toLowerCase());\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      if (storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))) {\n        return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName))[\"delete\"]();\n      }\n    }).then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              mainCharacters: story.data().mainCharacters.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryArr: story.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: story.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char2) {\n              batch.update(db.collection(\"characters\").doc(_char2.id), {\n                relativesArr: _char2.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: _char2.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n          }).then(function () {\n            db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(function (likes) {\n              likes.forEach(function (like) {\n                batch[\"delete\"](db.collection(\"charactersLikes\").doc(like.id));\n              });\n              batch.commit().then(function () {\n                dispatch({\n                  type: types.DELETE_CHARACTER,\n                  payload: {\n                    message: \"Character deleted successfully\",\n                    loading: false,\n                    deleted: true,\n                    charaExists: false\n                  }\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","relArr","storyArr","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","char","relation","find","c","character_id","mainQuery","where","secondaryQuery","result","console","log","_","concat","docs","story","title","GET_CHARACTER","payload","character","filter","r","currentUser","uid","authorId","stories","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","put","child","getDownloadURL","url","update","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","deleteCharacter","DELETE_CHARACTER","batch","characters","mainCharacters","secondaryArr","secondaryCharacters","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","user","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":";;;;;;;AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,OAAnB,QAAkC,aAAlC;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAKC,IAAL;AAAA,SAAc,UAACC,QAAD,EAAc;AACtD,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,QAAQ,GAAG,EAAf;AACAT,IAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACF,GAAD,EAAS;AACb,UAAIA,GAAG,CAACG,MAAR,EAAgB;AACd,YAAIR,IAAI,KAAK,MAAb,EAAqB;AACnB,cAAMS,SAAS,GAAGJ,GAAG,CAACK,IAAJ,GAAWC,YAA7B;AACA,cAAIC,UAAU,GAAG,EAAjB;AACAH,UAAAA,SAAS,CAACI,OAAV,CAAkB,UAACC,GAAD,EAAS;AACzBF,YAAAA,UAAU,CAACG,IAAX,CAAgBrB,EAAE,CAACU,UAAH,CAAc,YAAd,EAA4BC,GAA5B,CAAgCS,GAAhC,EAAqCR,GAArC,EAAhB;AACD,WAFD;AAGAU,UAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAAwBL,IAAxB,CAA6B,UAACW,GAAD,EAAS;AACpCA,YAAAA,GAAG,CAACL,OAAJ,CAAY,UAACM,KAAD;AAAA,qBACVjB,MAAM,CAACa,IAAP,iCACKI,KAAI,CAACT,IAAL,EADL;AAEEX,gBAAAA,EAAE,EAAEoB,KAAI,CAACpB,EAFX;AAGEqB,gBAAAA,QAAQ,EAAEf,GAAG,CACVK,IADO,GAEPD,SAFO,CAEGY,IAFH,CAEQ,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACC,YAAF,KAAmBJ,KAAI,CAACpB,EAA/B;AAAA,iBAFR,EAE2CqB;AALvD,iBADU;AAAA,aAAZ;AAUA,gBAAMI,SAAS,GAAG9B,EAAE,CACjBU,UADe,CACJ,SADI,EAEfqB,KAFe,CAET,SAFS,EAEE,gBAFF,EAEoB1B,EAFpB,EAGfO,GAHe,EAAlB;AAKA,gBAAMoB,cAAc,GAAGhC,EAAE,CACtBU,UADoB,CACT,SADS,EAEpBqB,KAFoB,CAEd,cAFc,EAEE,gBAFF,EAEoB1B,EAFpB,EAGpB0B,KAHoB,CAGd,SAHc,EAGH,gBAHG,EAGe1B,EAHf,EAIpBO,GAJoB,EAAvB;AAMAU,YAAAA,OAAO,CAACC,GAAR,CAAY,CAACO,SAAD,EAAYE,cAAZ,CAAZ,EAAyCnB,IAAzC,CAA8C,UAACoB,MAAD,EAAY;AACxDC,cAAAA,OAAO,CAACC,GAAR,CAAYC,CAAC,CAACC,MAAF,CAASJ,MAAM,CAAC,CAAD,CAAf,EAAoBA,MAAM,CAAC,CAAD,CAA1B,CAAZ;AACD,aAFD;AAIAjC,YAAAA,EAAE,CAACU,UAAH,CAAc,SAAd,EACGqB,KADH,CACS,cADT,EACyB,gBADzB,EAC2C1B,EAD3C,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACyB,IAAD,EAAU;AACdA,cAAAA,IAAI,CAACnB,OAAL,CAAa,UAACoB,KAAD,EAAW;AACtB9B,gBAAAA,QAAQ,CAACY,IAAT,CAAc;AAAEhB,kBAAAA,EAAE,EAAEkC,KAAK,CAAClC,EAAZ;AAAgBmC,kBAAAA,KAAK,EAAED,KAAK,CAACvB,IAAN,GAAawB;AAApC,iBAAd;AACD,eAFD;AAGAjC,cAAAA,QAAQ,CAAC;AACPD,gBAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,SAAS,kCACJhC,GAAG,CAACK,IAAJ,EADI;AAEPX,oBAAAA,EAAE,EAAEM,GAAG,CAACN,EAFD;AAGPU,oBAAAA,SAAS,EAAEP,MAAM,CAACoC,MAAP,CACT,UAACC,CAAD;AAAA,6BACE,CAAC5C,IAAI,CAAC6C,WAAL,IAAoB7C,IAAI,CAAC6C,WAAL,CAAiBC,GAAtC,MACEF,CAAC,CAACG,QADJ,IACgBH,CAAC,UAFnB;AAAA,qBADS,CAHJ;AAQPI,oBAAAA,OAAO,EAAExC,QAAQ,CAACmC,MAAT,CACP,UAACC,CAAD;AAAA,6BACE,CAAC5C,IAAI,CAAC6C,WAAL,IAAoB7C,IAAI,CAAC6C,WAAL,CAAiBC,GAAtC,MACEF,CAAC,CAACG,QADJ,IACgBH,CAAC,UAFnB;AAAA,qBADO;AARF,oBADF;AAePK,kBAAAA,WAAW,EAAE,IAfN;AAgBPC,kBAAAA,OAAO,EAAE;AAhBF;AAFF,eAAD,CAAR;AAqBD,aA5BH;AA6BD,WAvDD;AAwDD,SA9DD,MA8DO;AACL5C,UAAAA,QAAQ,CAAC;AACPD,YAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,YAAAA,OAAO,EAAE;AACPC,cAAAA,SAAS,kCAAOhC,GAAG,CAACK,IAAJ,EAAP;AAAmBX,gBAAAA,EAAE,EAAEM,GAAG,CAACN;AAA3B,gBADF;AAEP6C,cAAAA,WAAW,EAAE,IAFN;AAGPC,cAAAA,OAAO,EAAE;AAHF;AAFF,WAAD,CAAR;AAQD;AACF,OAzED,MAyEO;AACL5C,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAAC2C,aADL;AAEPC,UAAAA,OAAO,EAAE;AACPQ,YAAAA,WAAW,EAAE,KADN;AAEPC,YAAAA,OAAO,EAAE;AAFF;AAFF,SAAD,CAAR;AAOD;AACF,KAtFH;AAuFD,GA1F2B;AAAA,CAArB;AA4FP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACpC,IAAD;AAAA,SAAU,UAACT,QAAD,EAAc;AAClDA,IAAAA,QAAQ,CAAC;AAAED,MAAAA,IAAI,EAAER,KAAK,CAACuD,aAAd;AAA6BX,MAAAA,OAAO,EAAE;AAAES,QAAAA,OAAO,EAAE;AAAX;AAAtC,KAAD,CAAR;AAEA,QAAIG,OAAO,GAAG,EAAd;AACAtD,IAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACG6C,GADH,iCAEOvC,IAFP;AAGIwC,MAAAA,KAAK,EAAE,OAAOxC,IAAI,CAACwC,KAAZ,KAAsB,QAAtB,GAAiCxC,IAAI,CAACwC,KAAtC,GAA8C,EAHzD;AAIIC,MAAAA,SAAS,EAAEtD,QAAQ,CAACuD,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAJf;AAKIC,MAAAA,UAAU,EAAE,CALhB;AAMIC,MAAAA,KAAK,EAAE,EANX;AAOIC,MAAAA,QAAQ,EAAE;AAPd,QASGlD,IATH,CASQ,UAACW,GAAD,EAAS;AACb8B,MAAAA,OAAO,GAAG9B,GAAG,CAACnB,EAAd;AACA,UAAM2D,SAAS,aAAMxC,GAAG,CAACnB,EAAV,EAAe,GAAf,SAAqBW,IAAI,CAACiD,SAAL,CAAeC,WAAf,EAArB,SACblD,IAAI,CAACmD,QAAL,IAAiB,GADJ,SAEZnD,IAAI,CAACmD,QAAL,IAAiBnD,IAAI,CAACmD,QAAL,CAAcD,WAAd,EAFL,CAAf;;AAIA,UAAI,OAAOlD,IAAI,CAACwC,KAAZ,KAAsB,QAA1B,EAAoC;AAClCtD,QAAAA,OAAO,CACJkE,GADH,WACUnE,IAAI,CAAC6C,WAAL,CAAiBC,GAD3B,cACkCiB,SADlC,GAEGK,GAFH,CAEOrD,IAAI,CAACwC,KAFZ,EAGG3C,IAHH,CAGQ,YAAM;AACV,iBAAOX,OAAO,CACXkE,GADI,CACAnE,IAAI,CAAC6C,WAAL,CAAiBC,GADjB,EAEJuB,KAFI,CAEEN,SAFF,EAGJO,cAHI,EAAP;AAID,SARH,EASG1D,IATH,CASQ,UAAC2D,GAAD,EAAS;AACb,iBAAOxE,EAAE,CACNU,UADI,CACO,YADP,EAEJC,GAFI,CAEA2C,OAFA,EAGJmB,MAHI,CAGG;AAAEjB,YAAAA,KAAK,EAAEgB;AAAT,WAHH,CAAP;AAID,SAdH,EAeG3D,IAfH,CAeQ,YAAM;AACVd,UAAAA,OAAO,CAAC2E,OAAR,CAAgB,8BAAhB;AACAnE,UAAAA,QAAQ,CAAC;AACPD,YAAAA,IAAI,EAAER,KAAK,CAACuD,aADL;AAEPX,YAAAA,OAAO,EAAE;AACP3C,cAAAA,OAAO,EAAE,8BADF;AAEP4E,cAAAA,WAAW,EAAErB,OAFN;AAGPH,cAAAA,OAAO,EAAE;AAHF;AAFF,WAAD,CAAR;AAQD,SAzBH;AA0BD,OA3BD,MA2BO;AACLpD,QAAAA,OAAO,CAAC2E,OAAR,CAAgB,8BAAhB;AACAnE,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACuD,aADL;AAEPX,UAAAA,OAAO,EAAE;AACP3C,YAAAA,OAAO,EAAE,8BADF;AAEP4E,YAAAA,WAAW,EAAErB,OAFN;AAGPH,YAAAA,OAAO,EAAE;AAHF;AAFF,SAAD,CAAR;AAQD;AACF,KArDH,WAsDS,UAACyB,GAAD,EAAS;AACd7E,MAAAA,OAAO,CAAC8E,KAAR,CAAcD,GAAG,CAAC7E,OAAlB;AACD,KAxDH;AAyDD,GA7D2B;AAAA,CAArB;AA+DP,OAAO,IAAM+E,aAAa,GAAG,SAAhBA,aAAgB,CAAC9D,IAAD,EAAOX,EAAP;AAAA,SAAc,UAACE,QAAD,EAAc;AACvDA,IAAAA,QAAQ,CAAC;AAAED,MAAAA,IAAI,EAAER,KAAK,CAACiF,cAAd;AAA8BrC,MAAAA,OAAO,EAAE;AAAEsC,QAAAA,gBAAgB,EAAE;AAApB;AAAvC,KAAD,CAAR;AAEA,QAAMhB,SAAS,aAAM3D,EAAN,EAAW,GAAX,SAAiBW,IAAI,CAACiD,SAAL,CAAeC,WAAf,EAAjB,SACblD,IAAI,CAACmD,QAAL,IAAiB,GADJ,SAEZnD,IAAI,CAACmD,QAAL,IAAiBnD,IAAI,CAACmD,QAAL,CAAcD,WAAd,EAFL,CAAf;;AAIA,QAAIlD,IAAI,CAACwC,KAAL,IAAc,OAAOxC,IAAI,CAACwC,KAAZ,KAAsB,QAAxC,EAAkD;AAChDtD,MAAAA,OAAO,CACJkE,GADH,WACUnE,IAAI,CAAC6C,WAAL,CAAiBC,GAD3B,cACkCiB,SADlC,GAEGK,GAFH,CAEOrD,IAAI,CAACwC,KAFZ,EAGG3C,IAHH,CAGQ,YAAM;AACV,eAAOX,OAAO,CACXkE,GADI,CACAnE,IAAI,CAAC6C,WAAL,CAAiBC,GADjB,EAEJuB,KAFI,CAEEN,SAFF,EAGJO,cAHI,EAAP;AAID,OARH,EASG1D,IATH,CASQ,UAAC2D,GAAD,EAAS;AACb,eAAOxE,EAAE,CACNU,UADI,CACO,YADP,EAEJC,GAFI,CAEAN,EAFA,EAGJoE,MAHI,iCAIAzD,IAJA;AAKHwC,UAAAA,KAAK,EAAEgB,GALJ;AAMHvD,UAAAA,YAAY,EAAED,IAAI,CAACD,SAAL,CAAekE,GAAf,CAAmB,UAACrD,CAAD;AAAA,mBAAOA,CAAC,CAACC,YAAT;AAAA,WAAnB;AANX,WAAP;AAQD,OAlBH,EAmBGhB,IAnBH,CAmBQ,YAAM;AACVN,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACiF,cADL;AAEPrC,UAAAA,OAAO,EAAE;AACP3C,YAAAA,OAAO,EAAE,+BADF;AAEPiF,YAAAA,gBAAgB,EAAE;AAFX;AAFF,SAAD,CAAR;AAOD,OA3BH,WA4BS,UAACJ,GAAD,EAAS;AACd7E,QAAAA,OAAO,CAAC8E,KAAR,CAAcD,GAAG,CAAC7E,OAAlB;AACD,OA9BH;AA+BD,KAhCD,MAgCO;AACLC,MAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,EAEGoE,MAFH,iCAGOzD,IAHP;AAIIC,QAAAA,YAAY,EAAED,IAAI,CAACD,SAAL,CAAekE,GAAf,CAAmB,UAACrD,CAAD;AAAA,iBAAOA,CAAC,CAACC,YAAT;AAAA,SAAnB;AAJlB,UAMGhB,IANH,CAMQ,YAAM;AACVN,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACiF,cADL;AAEPrC,UAAAA,OAAO,EAAE;AACP3C,YAAAA,OAAO,EAAE,+BADF;AAEPiF,YAAAA,gBAAgB,EAAE;AAFX;AAFF,SAAD,CAAR;AAOD,OAdH,WAeS,UAACJ,GAAD,EAAS;AACd7E,QAAAA,OAAO,CAAC8E,KAAR,CAAcD,GAAG,CAAC7E,OAAlB;AACD,OAjBH;AAkBD;AACF,GA3D4B;AAAA,CAAtB;AA6DP,OAAO,IAAMmF,eAAe,GAAG,SAAlBA,eAAkB,CAAC7E,EAAD,EAAK4D,SAAL,EAAgBE,QAAhB;AAAA,SAA6B,UAAC5D,QAAD,EAAc;AACxEA,IAAAA,QAAQ,CAAC;AAAED,MAAAA,IAAI,EAAER,KAAK,CAACqF,gBAAd;AAAgCzC,MAAAA,OAAO,EAAE;AAAES,QAAAA,OAAO,EAAE;AAAX;AAAzC,KAAD,CAAR;AACA,QAAMa,SAAS,aAAM3D,EAAN,EAAW,GAAX,SAAiB4D,SAAS,CAACC,WAAV,EAAjB,SAA2CC,QAAQ,IAAI,GAAvD,SACbA,QAAQ,IAAIA,QAAQ,CAACD,WAAT,EADC,CAAf;AAGA,QAAMkB,KAAK,GAAGpF,EAAE,CAACoF,KAAH,EAAd;AACApF,IAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGC,GADH,CACON,EADP,cAGGQ,IAHH,CAGQ,YAAM;AACV,UAAIX,OAAO,CAACkE,GAAR,WAAenE,IAAI,CAAC6C,WAAL,CAAiBC,GAAhC,cAAuCiB,SAAvC,EAAJ,EAAyD;AACvD,eAAO9D,OAAO,CAACkE,GAAR,WAAenE,IAAI,CAAC6C,WAAL,CAAiBC,GAAhC,cAAuCiB,SAAvC,cAAP;AACD;AACF,KAPH,EAQGnD,IARH,CAQQ,YAAM;AACVb,MAAAA,EAAE,CAACU,UAAH,CAAc,UAAd,EACGqB,KADH,CACS,YADT,EACuB,gBADvB,EACyC1B,EADzC,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACyB,IAAD,EAAU;AACdA,QAAAA,IAAI,CAACnB,OAAL,CAAa,UAACR,GAAD,EAAS;AACpByE,UAAAA,KAAK,CAACX,MAAN,CAAazE,EAAE,CAACU,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BA,GAAG,CAACN,EAAlC,CAAb,EAAoD;AAClDgF,YAAAA,UAAU,EAAE1E,GAAG,CAACK,IAAJ,GAAWqE,UAAX,CAAsBzC,MAAtB,CAA6B,UAAChB,CAAD;AAAA,qBAAOA,CAAC,KAAKvB,EAAb;AAAA,aAA7B;AADsC,WAApD;AAGD,SAJD;AAKD,OATH,EAUGQ,IAVH,CAUQ,YAAM;AACVb,QAAAA,EAAE,CAACU,UAAH,CAAc,SAAd,EACGqB,KADH,CACS,cADT,EACyB,gBADzB,EAC2C1B,EAD3C,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACoC,OAAD,EAAa;AACjBA,UAAAA,OAAO,CAAC9B,OAAR,CAAgB,UAACoB,KAAD,EAAW;AACzB6C,YAAAA,KAAK,CAACX,MAAN,CAAazE,EAAE,CAACU,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6B4B,KAAK,CAAClC,EAAnC,CAAb,EAAqD;AACnDiF,cAAAA,cAAc,EAAE/C,KAAK,CAClBvB,IADa,GAEbsE,cAFa,CAEE1C,MAFF,CAES,UAAChB,CAAD;AAAA,uBAAOA,CAAC,KAAKvB,EAAb;AAAA,eAFT,CADmC;AAInDkF,cAAAA,YAAY,EAAEhD,KAAK,CAChBvB,IADW,GAEXuE,YAFW,CAEE3C,MAFF,CAES,UAAChB,CAAD;AAAA,uBAAOA,CAAC,KAAKvB,EAAb;AAAA,eAFT,CAJqC;AAOnDmF,cAAAA,mBAAmB,EAAEjD,KAAK,CACvBvB,IADkB,GAElBwE,mBAFkB,CAEE5C,MAFF,CAES,UAAChB,CAAD;AAAA,uBAAOA,CAAC,CAACvB,EAAF,KAASA,EAAhB;AAAA,eAFT;AAP8B,aAArD;AAWD,WAZD;AAaD,SAjBH,EAkBGQ,IAlBH,CAkBQ,YAAM;AACVb,UAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGqB,KADH,CACS,cADT,EACyB,gBADzB,EAC2C1B,EAD3C,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACwE,UAAD,EAAgB;AACpBA,YAAAA,UAAU,CAAClE,OAAX,CAAmB,UAACM,MAAD,EAAU;AAC3B2D,cAAAA,KAAK,CAACX,MAAN,CAAazE,EAAE,CAACU,UAAH,CAAc,YAAd,EAA4BC,GAA5B,CAAgCc,MAAI,CAACpB,EAArC,CAAb,EAAuD;AACrDY,gBAAAA,YAAY,EAAEQ,MAAI,CACfT,IADW,GAEXC,YAFW,CAEE2B,MAFF,CAES,UAAChB,CAAD;AAAA,yBAAOA,CAAC,KAAKvB,EAAb;AAAA,iBAFT,CADuC;AAIrDU,gBAAAA,SAAS,EAAEU,MAAI,CACZT,IADQ,GAERD,SAFQ,CAEE6B,MAFF,CAES,UAAChB,CAAD;AAAA,yBAAOA,CAAC,CAACC,YAAF,KAAmBxB,EAA1B;AAAA,iBAFT;AAJ0C,eAAvD;AAQD,aATD;AAUD,WAdH,EAeGQ,IAfH,CAeQ,YAAM;AACVb,YAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACGqB,KADH,CACS,aADT,EACwB,IADxB,EAC8B1B,EAD9B,EAEGO,GAFH,GAGGC,IAHH,CAGQ,UAACiD,KAAD,EAAW;AACfA,cAAAA,KAAK,CAAC3C,OAAN,CAAc,UAACsE,IAAD,EAAU;AACtBL,gBAAAA,KAAK,UAAL,CACEpF,EAAE,CAACU,UAAH,CAAc,iBAAd,EAAiCC,GAAjC,CAAqC8E,IAAI,CAACpF,EAA1C,CADF;AAGD,eAJD;AAKA+E,cAAAA,KAAK,CAACM,MAAN,GAAe7E,IAAf,CAAoB,YAAM;AACxBN,gBAAAA,QAAQ,CAAC;AACPD,kBAAAA,IAAI,EAAER,KAAK,CAACqF,gBADL;AAEPzC,kBAAAA,OAAO,EAAE;AACP3C,oBAAAA,OAAO,EAAE,gCADF;AAEPoD,oBAAAA,OAAO,EAAE,KAFF;AAGPwC,oBAAAA,OAAO,EAAE,IAHF;AAIPzC,oBAAAA,WAAW,EAAE;AAJN;AAFF,iBAAD,CAAR;AASD,eAVD;AAWD,aApBH;AAqBD,WArCH;AAsCD,SAzDH;AA0DD,OArEH;AAsED,KA/EH;AAgFD,GAtF8B;AAAA,CAAxB;AAwFP,OAAO,IAAM0C,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD;AAAA,SAAY,UAACtF,QAAD,EAAc;AACzDP,IAAAA,EAAE,CAACU,UAAH,CAAc,YAAd,EACGqB,KADH,CACS,UADT,EACqB,IADrB,EAC2B8D,MAD3B,EAEGjF,GAFH,GAGGC,IAHH,CAGQ,UAACyB,IAAD,EAAU;AACd,UAAIwD,KAAK,GAAG,EAAZ;AACAxD,MAAAA,IAAI,CAACnB,OAAL,CAAa,UAACR,GAAD,EAAS;AACpBmF,QAAAA,KAAK,gCAAOA,KAAP;AAAgBzF,UAAAA,EAAE,EAAEM,GAAG,CAACN;AAAxB,WAA+BM,GAAG,CAACK,IAAJ,EAA/B,GAAL;AACD,OAFD;AAGA,aAAO8E,KAAP;AACD,KATH,EAUGjF,IAVH,CAUQ,UAACiF,KAAD,EAAW;AACfvF,MAAAA,QAAQ,CAAC;AAAED,QAAAA,IAAI,EAAER,KAAK,CAACiG,mBAAd;AAAmCrD,QAAAA,OAAO,EAAEoD;AAA5C,OAAD,CAAR;AACD,KAZH;AAaD,GAdgC;AAAA,CAA1B;AAgBP,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,UAACzF,QAAD,EAAc;AACvDP,IAAAA,EAAE,CAACU,UAAH,CAAc,iBAAd,EACGqB,KADH,CACS,UADT,EACqB,IADrB,EAC2B9B,IAAI,CAAC6C,WAAL,CAAiBC,GAD5C,EAEGnC,GAFH,GAGGC,IAHH,CAGQ,UAACyB,IAAD,EAAU;AACd,UAAI2D,MAAM,GAAG,EAAb;AACA3D,MAAAA,IAAI,CAACnB,OAAL,CAAa,UAACR,GAAD,EAAS;AACpBsF,QAAAA,MAAM,gCAAOA,MAAP,IAAetF,GAAG,CAACK,IAAJ,GAAW2D,WAA1B,EAAN;AACD,OAFD;AAGA,aAAOsB,MAAP;AACD,KATH,EAUGpF,IAVH,CAUQ,UAACqF,KAAD,EAAW;AACf,UAAMjE,MAAM,GAAGiE,KAAK,CAACjB,GAAN,CAAU,UAACkB,IAAD;AAAA,eACvBnG,EAAE,CAACU,UAAH,CAAc,YAAd,EAA4BC,GAA5B,CAAgCwF,IAAhC,EAAsCvF,GAAtC,EADuB;AAAA,OAAV,CAAf;AAGAU,MAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ,EAAoBpB,IAApB,CAAyB,UAACW,GAAD,EAAS;AAChC,YAAI4E,QAAQ,GAAG,EAAf;AACA5E,QAAAA,GAAG,CAACL,OAAJ,CACE,UAACR,GAAD;AAAA,iBAAUyF,QAAQ,gCAAOA,QAAP;AAAmB/F,YAAAA,EAAE,EAAEM,GAAG,CAACN;AAA3B,aAAkCM,GAAG,CAACK,IAAJ,EAAlC,GAAlB;AAAA,SADF;AAGAT,QAAAA,QAAQ,CAAC;AACPD,UAAAA,IAAI,EAAER,KAAK,CAACuG,uBADL;AAEP3D,UAAAA,OAAO,EAAE0D;AAFF,SAAD,CAAR;AAID,OATD;AAUD,KAxBH;AAyBD,GA1BoC;AAAA,CAA9B;AA4BP,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACjG,EAAD;AAAA,SAAQ,UAACE,QAAD,EAAc;AACxDP,IAAAA,EAAE,CAACU,UAAH,CAAc,SAAd,EACGC,GADH,CACON,EADP,EAEGkG,UAFH,CAEc,UAAC5F,GAAD,EAAS;AACnBJ,MAAAA,QAAQ,CAAC;AACPD,QAAAA,IAAI,EAAER,KAAK,CAAC0G,oBADL;AAEP9D,QAAAA,OAAO,EAAE;AACP8C,UAAAA,mBAAmB,EAAE7E,GAAG,CAACK,IAAJ,GAAWwE,mBADzB;AAEPiB,UAAAA,OAAO,EAAE9F,GAAG,CAACK,IAAJ,GAAWsE;AAFb;AAFF,OAAD,CAAR;AAOD,KAVH;AAWD,GAZmC;AAAA,CAA7B","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  let relArr = [];\r\n  let storyArr = [];\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            res.forEach((char) =>\r\n              relArr.push({\r\n                ...char.data(),\r\n                id: char.id,\r\n                relation: doc\r\n                  .data()\r\n                  .relatives.find((c) => c.character_id === char.id).relation,\r\n              })\r\n            );\r\n\r\n            const mainQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"mainArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            const secondaryQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .where(\"mainArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n              console.log(_.concat(result[0], result[1]));\r\n            });\r\n\r\n            db.collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .get()\r\n              .then((docs) => {\r\n                docs.forEach((story) => {\r\n                  storyArr.push({ id: story.id, title: story.data().title });\r\n                });\r\n                dispatch({\r\n                  type: types.GET_CHARACTER,\r\n                  payload: {\r\n                    character: {\r\n                      ...doc.data(),\r\n                      id: doc.id,\r\n                      relatives: relArr.filter(\r\n                        (r) =>\r\n                          (auth.currentUser && auth.currentUser.uid) ===\r\n                            r.authorId || r.public\r\n                      ),\r\n                      stories: storyArr.filter(\r\n                        (r) =>\r\n                          (auth.currentUser && auth.currentUser.uid) ===\r\n                            r.authorId || r.public\r\n                      ),\r\n                    },\r\n                    charaExists: true,\r\n                    loading: false,\r\n                  },\r\n                });\r\n              });\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}