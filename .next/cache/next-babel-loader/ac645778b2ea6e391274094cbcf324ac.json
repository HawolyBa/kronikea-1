{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, auth } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nexport const log_in = (email, password) => dispatch => {\n  console.log(email, password);\n  auth.signInWithEmailAndPassword(email, password);\n};\nexport const getProfile = () => dispatch => {\n  db.collection(\"users\").doc(auth.currentUser.uid).onSnapshot(doc => {\n    return dispatch({\n      type: types.GET_PROFILE,\n      payload: _objectSpread({\n        id: doc.id\n      }, doc.data())\n    });\n  });\n};\nexport const getFavoriteAuthors = () => dispatch => {\n  db.collection(\"usersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    const addedOn = doc.data().createdAt;\n    docs.forEach(doc => {\n      console.log(doc.data());\n      favArr = [...favArr, doc.data().recipient];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        addedOn,\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_AUTHORS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getFollowers = () => dispatch => {\n  db.collection(\"usersLikes\").where(\"recipient\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().senderId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FOLLOWERS,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","types","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","id","data","getFavoriteAuthors","where","get","then","docs","favArr","addedOn","createdAt","forEach","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS"],"mappings":";;;;;;AAAA,SAASA,EAAT,EAAaC,IAAb,QAAyB,aAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,QAAnB;AACAJ,EAAAA,IAAI,CAACQ,0BAAL,CAAgCL,KAAhC,EAAuCC,QAAvC;AACD,CAHM;AAKP,OAAO,MAAMK,UAAU,GAAG,MAAOJ,QAAD,IAAc;AAC5CN,EAAAA,EAAE,CAACW,UAAH,CAAc,OAAd,EACGC,GADH,CACOX,IAAI,CAACY,WAAL,CAAiBC,GADxB,EAEGC,UAFH,CAEeH,GAAD,IAAS;AACnB,WAAON,QAAQ,CAAC;AACdU,MAAAA,IAAI,EAAEd,KAAK,CAACe,WADE;AAEdC,MAAAA,OAAO;AAAIC,QAAAA,EAAE,EAAEP,GAAG,CAACO;AAAZ,SAAmBP,GAAG,CAACQ,IAAJ,EAAnB;AAFO,KAAD,CAAf;AAID,GAPH;AAQD,CATM;AAWP,OAAO,MAAMC,kBAAkB,GAAG,MAAOf,QAAD,IAAc;AACpDN,EAAAA,EAAE,CAACW,UAAH,CAAc,YAAd,EACGW,KADH,CACS,UADT,EACqB,IADrB,EAC2BrB,IAAI,CAACY,WAAL,CAAiBC,GAD5C,EAEGS,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACd,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,OAAO,GAAGf,GAAG,CAACQ,IAAJ,GAAWQ,SAA3B;AACAH,IAAAA,IAAI,CAACI,OAAL,CAAcjB,GAAD,IAAS;AACpBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACQ,IAAJ,EAAZ;AACAM,MAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYd,GAAG,CAACQ,IAAJ,GAAWU,SAAvB,CAAT;AACD,KAHD;AAIA,WAAOJ,MAAP;AACD,GAXH,EAYGF,IAZH,CAYSO,KAAD,IAAW;AACf,UAAMC,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IACvBlC,EAAE,CAACW,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BsB,IAA3B,EAAiCX,GAAjC,EADa,CAAf;AAGAY,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBR,IAApB,CAA0Ba,GAAD,IAAS;AAChC,UAAIC,QAAQ,GAAG,EAAf;AACAD,MAAAA,GAAG,CAACR,OAAJ,CACGjB,GAAD,IACG0B,QAAQ,GAAG,CAAC,GAAGA,QAAJ;AAAgBX,QAAAA,OAAhB;AAAyBR,QAAAA,EAAE,EAAEP,GAAG,CAACO;AAAjC,SAAwCP,GAAG,CAACQ,IAAJ,EAAxC,EAFhB;AAIAd,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEd,KAAK,CAACqC,oBADL;AAEPrB,QAAAA,OAAO,EAAEoB;AAFF,OAAD,CAAR;AAID,KAVD;AAWD,GA3BH;AA4BD,CA7BM;AA+BP,OAAO,MAAME,YAAY,GAAG,MAAOlC,QAAD,IAAc;AAC9CN,EAAAA,EAAE,CAACW,UAAH,CAAc,YAAd,EACGW,KADH,CACS,WADT,EACsB,IADtB,EAC4BrB,IAAI,CAACY,WAAL,CAAiBC,GAD7C,EAEGS,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACd,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,IAAI,CAACI,OAAL,CAAcjB,GAAD,IAAS;AACpBc,MAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYd,GAAG,CAACQ,IAAJ,GAAWqB,QAAvB,CAAT;AACD,KAFD;AAGA,WAAOf,MAAP;AACD,GATH,EAUGF,IAVH,CAUSO,KAAD,IAAW;AACf,UAAMC,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IACvBlC,EAAE,CAACW,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BsB,IAA3B,EAAiCX,GAAjC,EADa,CAAf;AAGAY,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBR,IAApB,CAA0Ba,GAAD,IAAS;AAChC,UAAIC,QAAQ,GAAG,EAAf;AACAD,MAAAA,GAAG,CAACR,OAAJ,CACGjB,GAAD,IAAU0B,QAAQ,GAAG,CAAC,GAAGA,QAAJ;AAAgBnB,QAAAA,EAAE,EAAEP,GAAG,CAACO;AAAxB,SAA+BP,GAAG,CAACQ,IAAJ,EAA/B,EADvB;AAGAd,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEd,KAAK,CAACwC,aADL;AAEPxB,QAAAA,OAAO,EAAEoB;AAFF,OAAD,CAAR;AAID,KATD;AAUD,GAxBH;AAyBD,CA1BM","sourcesContent":["import { db, auth } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = () => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = () => (dispatch) => {\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      const addedOn = doc.data().createdAt;\r\n      docs.forEach((doc) => {\r\n        console.log(doc.data());\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = () => (dispatch) => {\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}