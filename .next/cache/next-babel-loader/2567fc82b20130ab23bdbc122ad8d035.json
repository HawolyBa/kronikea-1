{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\"; // STORIES\n\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      const secondary = doc.data().secondaryCharacters;\n      let mainArr = [];\n      let secondaryArr = [];\n      const mainQuery = main.map(c => db.collection(\"characters\").doc(c).get());\n      const secondaryQuery = secondary.map(c => db.collection(\"characters\").doc(c.id).get());\n      const mainRes = Promise.all(mainQuery);\n      const secondaryRes = Promise.all(secondaryQuery);\n      Promise.all([mainRes, secondaryRes]).then(result => {\n        result[0].forEach(docu => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        result[1].forEach(docu => {\n          secondaryArr = [...secondaryArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        dispatch({\n          type: types.GET_STORY,\n          storyExists: true,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id,\n            secondaryCharacters: secondaryArr,\n            mainCharacters: mainArr,\n            mainArr: doc.data().mainCharacters\n          })\n        });\n      });\n    } else {\n      dispatch({\n        type: types.DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: types.ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  let storyId = \"\";\n  db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    authorName: data.authorName,\n    oneShot: false,\n    banner: typeof data.banner === \"string\" ? data.banner : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    chaptersCount: 0,\n    secondaryCharacters: [],\n    secondaryArr: [],\n    featured: false,\n    note: 0,\n    chaptersCount: 0,\n    commentsCount: 0,\n    lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    storyId = res.id;\n\n    if (typeof data.banner === \"object\") {\n      const imageName = `${res.id}_${data.title.toLowerCase().split(\" \").join(\"_\")}`;\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"stories\").doc(storyId).update({\n          banner: url\n        });\n      }).then(() => {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: storyId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: types.ADD_STORY,\n        payload: {\n          message: \"Story added successfully\",\n          storyId: storyId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: types.EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url,\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n      }));\n    }).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteStory = id => dispatch => {\n  dispatch({\n    type: types.DELETE_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const batch = db.batch();\n  batch.delete(db.collection(\"stories\").doc(id));\n  const chaptersToDelete = db.collection(\"chapters\").where(\"storyId\", \"==\", id).get();\n  const likesToDelete = db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).get();\n  const locationsToDelete = db.collection(\"locations\").where(\"storyId\", \"==\", id).get();\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(res => {\n    res[0].forEach(chap => {\n      batch.delete(db.collection(\"chapters\").doc(chap.id));\n    });\n    res[1].forEach(like => {\n      batch.delete(db.collection(\"storiesLikes\").doc(like.id));\n    });\n    res[2].forEach(loc => {\n      batch.delete(db.collection(\"locations\").doc(loc.id));\n    });\n    batch.commit().then(() => {\n      dispatch({\n        type: types.DELETE_STORY,\n        payload: {\n          message: \"Story deleted successfully\",\n          loading: true,\n          deleted: true\n        }\n      });\n    });\n  });\n};\nexport const getUserStories = (id, type) => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"stories\").where(\"authorId\", \"==\", userId).orderBy(\"createdAt\", \"desc\").get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())].filter(s => id ? s.public : s);\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).orderBy(\"createdAt\", \"desc\").get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const isStoryFavorite = storyId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(snapshot => {\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.IS_STORY_FAVORITE,\n        payload: answer,\n        loadingFav: false\n      });\n    });\n  }\n};\nexport const addStoryToFavorite = (id, username, storyTitle) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"storiesLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    storyId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(`${storyTitle} added to your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const removeStoryFromFavorite = (id, storyTitle) => dispatch => {\n  db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${storyTitle} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const getStoryCharacters = () => dispatch => {}; // CHAPTERs\n\nexport const addChapter = (data, secondaryCharacters) => dispatch => {\n  let chapId = \"\";\n  dispatch({\n    type: types.ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    commentsCount: 0,\n    note: 0,\n    voters: [],\n    votesCount: 0,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    chapId = res.id;\n    db.collection(\"stories\").doc(data.storyId).get().then(story => {\n      db.collection(\"stories\").doc(data.storyId).update({\n        chaptersCount: story.data().chaptersCount + 1,\n        secondaryCharacters: secondaryCharacters,\n        secondaryArr: secondaryCharacters.map(c => c.id)\n      }).then(() => {\n        dispatch({\n          type: types.ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: chapId,\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    db.collection(\"stories\").doc(storyId).get().then(doc => {\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters,\n        secondaryArr: secondaryCharacters.map(c => c.id)\n      }).then(() => {\n        dispatch({\n          type: types.EDIT_CHAPTER,\n          payload: {\n            message: \"Chapter edited successfully\",\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const deleteChapter = (id, storyId) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loadingChapter: true\n    }\n  });\n  const batch = db.batch();\n  const commentsToDelete = db.collection(\"comments\").where(\"chapterId\", \"==\", id).get();\n  const chapter = db.collection(\"chapters\").doc(id).get();\n  const story = db.collection(\"stories\").doc(storyId).get();\n  Promise.all([chapter, story, commentsToDelete]).then(res => {\n    const charactersFromChapter = res[0].data().characters;\n    const charactersFromStory = res[1].data().secondaryCharacters;\n    let newArr = charactersFromStory.map(c => {\n      if (charactersFromChapter.includes(c.id)) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          times: c.times - 1\n        });\n      } else {\n        return c;\n      }\n    }).filter(c => c.times > 0);\n    batch.update(db.collection(\"stories\").doc(storyId), {\n      chaptersCount: res[1].data().chaptersCount - 1,\n      secondaryCharacters: newArr,\n      secondaryArr: newArr.map(c => c.id)\n    });\n    res[2].forEach(comm => batch.delete(db.collection(\"comments\").doc(comm.id)));\n    batch.delete(db.collection(\"chapters\").doc(id));\n    batch.commit().then(() => {\n      dispatch({\n        type: types.DELETE_CHAPTER,\n        payload: {\n          message: \"Chapter deleted successfully\",\n          loadingChapter: false\n        }\n      });\n    });\n  });\n};\nexport const getChapter = (storyId, id, type) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(chap => {\n        if (chap.exists) {\n          if (type === \"show\") {\n            let characters = [];\n            let locations = [];\n            let charaQuery = [];\n            let locQuery = [];\n            const charactersInChaper = chap.data().characters;\n            const locationsInChaper = chap.data().locations;\n            charactersInChaper.forEach(char => {\n              charaQuery.push(db.collection(\"characters\").doc(char).get());\n            });\n            locationsInChaper.forEach(loc => {\n              locQuery.push(db.collection(\"locations\").doc(loc).get());\n            });\n            charaQuery = Promise.all(charaQuery);\n            locQuery = Promise.all(locQuery);\n            Promise.all([charaQuery, locQuery]).then(res => {\n              res[0].forEach(c => {\n                characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                  id: c.id\n                }));\n              });\n              res[1].forEach(l => {\n                locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                  id: l.id\n                }));\n              });\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    locations,\n                    characters,\n                    public: doc.data().public,\n                    storyTitle: doc.data().title\n                  }),\n                  chapterExists: true\n                }\n              });\n            });\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                  id: chap.id,\n                  public: doc.data().public\n                }),\n                chapterExists: true\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: types.GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: types.GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: types.GET_CHAPTERS,\n      payload: arr\n    });\n  });\n}; // LOCATIONS\n\nexport const addLocation = data => dispatch => {\n  dispatch({\n    type: types.ADD_LOCATION,\n    payload: {\n      loadingLoc: true\n    }\n  });\n  let locId = \"\";\n  db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    locId = res.id;\n\n    if (typeof data.image === \"object\") {\n      const imageName = `${locId}_${data.name.toLowerCase().split(\" \").join(\"_\")}`;\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"locations\").doc(locId).update({\n          image: url\n        });\n      }).then(() => {\n        dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: types.ADD_LOCATION,\n        payload: {\n          message: \"Location added successfully\",\n          locId: res.id,\n          loadingLoc: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editLocation = data => dispatch => {};\nexport const getLocation = id => dispatch => {\n  db.collection(\"locations\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      dispatch({\n        type: types.GET_LOCATION,\n        payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }),\n        locationExists: true\n      });\n    } else {\n      dispatch({\n        type: types.GET_LOCATION,\n        locationExists: false\n      });\n    }\n  });\n};\nexport const deleteLocation = (id, name) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  const batch = db.batch();\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\n  batch.delete(db.collection(\"locations\").doc(id));\n  db.collection(\"chapters\").where(\"locations\", \"array-contains\", id).get().then(res => {\n    res.forEach(chap => batch.update(db.collection(\"chapters\").doc(chap.id), {\n      locations: chap.data().locations.filter(c => c !== id)\n    }));\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).delete().then(() => {\n      batch.commit().then(() => {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            loading: false,\n            message: \"Location deleted successfully\",\n            deleted: true\n          }\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n      batch.commit().then(() => {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            loading: false,\n            message: \"Location deleted successfully\",\n            deleted: true\n          }\n        });\n      });\n    });\n  }).catch(err => console.log(err));\n};\nexport const getUserLocations = () => dispatch => {\n  db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: types.GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};\nexport const getStoryLocations = storyId => dispatch => {\n  db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n    const locations = docs.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    }));\n    dispatch({\n      type: types.GET_STORY_LOCATIONS,\n      payload: locations\n    });\n  });\n}; // COMMENTS\n\nexport const getComments = id => dispatch => {\n  db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n    let comments = snap.docs.map(comment => _objectSpread(_objectSpread({}, comment.data()), {}, {\n      id: comment.id\n    }));\n    let queries = [];\n    comments.forEach(comm => {\n      queries.push(db.collection(\"users\").doc(comm.userId).get());\n    });\n    Promise.all(queries).then(res => {\n      comments = comments.map(comm => _objectSpread(_objectSpread({}, comm), {}, {\n        userImage: res.find(d => d.id === comm.userId).data().image\n      }));\n      dispatch({\n        type: types.GET_COMMENTS,\n        payload: {\n          loadingComments: false,\n          comments\n        }\n      });\n    });\n  });\n};\nexport const submitComment = info => dispatch => {\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  if (!info.content) return message.error(\"Content must not be empty\");\n  const batch = db.batch();\n  const story = db.collection(\"stories\").doc(info.storyId).get();\n  const chapter = db.collection(\"chapters\").doc(info.chapterId).get();\n  Promise.all([story, chapter]).then(res => {\n    batch.update(db.collection(\"stories\").doc(info.storyId), {\n      commentsCount: res[0].data().commentsCount + 1\n    });\n    batch.update(db.collection(\"chapters\").doc(info.chapterId), {\n      commentsCount: res[1].data().commentsCount + 1\n    });\n    batch.commit().then(() => {\n      db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      })).then(() => message.success(\"Comment posted successfully\"));\n    });\n  }).catch(err => message.error(err.message));\n};\nexport const deleteComment = (id, chapid, storyId) => dispatch => {\n  const batch = db.batch();\n  const story = db.collection(\"stories\").doc(storyId).get();\n  const chapter = db.collection(\"chapters\").doc(chapid).get();\n  Promise.all([story, chapter]).then(res => {\n    batch.update(db.collection(\"stories\").doc(storyId), {\n      commentsCount: res[0].data().commentsCount - 1\n    });\n    batch.update(db.collection(\"chapters\").doc(chapid), {\n      commentsCount: res[1].data().commentsCount - 1\n    });\n    batch.commit().then(() => {\n      db.collection(\"comments\").doc(id).delete();\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","catch","err","console","log","addStory","ADD_STORY","loading","storyId","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","commentsCount","lastUpdated","res","imageName","title","toLowerCase","split","join","ref","put","child","getDownloadURL","url","update","error","editStory","EDIT_STORY","loadingStory","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","batch","delete","chaptersToDelete","likesToDelete","locationsToDelete","chap","like","loc","commit","deleted","getUserStories","userId","orderBy","items","filter","s","public","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","success","removeStoryFromFavorite","getStoryCharacters","addChapter","chapId","ADD_CHAPTER","voters","votesCount","story","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","commentsToDelete","chapter","charactersFromChapter","characters","charactersFromStory","newArr","includes","times","comm","getChapter","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","char","push","l","GET_CHAPTER","chapterExists","getChapters","arr","number","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","locId","image","name","editLocation","getLocation","GET_LOCATION","locationExists","deleteLocation","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","userImage","find","d","GET_COMMENTS","loadingComments","submitComment","info","content","chapterId","deleteComment"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n      chaptersCount: 0,\r\n      commentsCount: 0,\r\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        const imageName = `${res.id}_${data.title\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyId)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: storyId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: storyId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n            lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  batch.delete(db.collection(\"stories\").doc(id));\r\n  const chaptersToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const likesToDelete = db\r\n    .collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const locationsToDelete = db\r\n    .collection(\"locations\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(\r\n    (res) => {\r\n      res[0].forEach((chap) => {\r\n        batch.delete(db.collection(\"chapters\").doc(chap.id));\r\n      });\r\n      res[1].forEach((like) => {\r\n        batch.delete(db.collection(\"storiesLikes\").doc(like.id));\r\n      });\r\n      res[2].forEach((loc) => {\r\n        batch.delete(db.collection(\"locations\").doc(loc.id));\r\n      });\r\n      batch.commit().then(() => {\r\n        dispatch({\r\n          type: types.DELETE_STORY,\r\n          payload: {\r\n            message: \"Story deleted successfully\",\r\n            loading: true,\r\n            deleted: true,\r\n          },\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const getUserStories = (id, type) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((s) =>\r\n          id ? s.public : s\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  let chapId = \"\";\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  return db\r\n    .collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      chapId = res.id;\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((story) => {\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              chaptersCount: story.data().chaptersCount + 1,\r\n              secondaryCharacters: secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: chapId,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  const batch = db.batch();\r\n\r\n  const commentsToDelete = db\r\n    .collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .get();\r\n  const chapter = db.collection(\"chapters\").doc(id).get();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n\r\n  Promise.all([chapter, story, commentsToDelete]).then((res) => {\r\n    const charactersFromChapter = res[0].data().characters;\r\n    const charactersFromStory = res[1].data().secondaryCharacters;\r\n    let newArr = charactersFromStory\r\n      .map((c) => {\r\n        if (charactersFromChapter.includes(c.id)) {\r\n          return { ...c, times: c.times - 1 };\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n      .filter((c) => c.times > 0);\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      chaptersCount: res[1].data().chaptersCount - 1,\r\n      secondaryCharacters: newArr,\r\n      secondaryArr: newArr.map((c) => c.id),\r\n    });\r\n    res[2].forEach((comm) =>\r\n      batch.delete(db.collection(\"comments\").doc(comm.id))\r\n    );\r\n    batch.delete(db.collection(\"chapters\").doc(id));\r\n    batch.commit().then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery]).then((res) => {\r\n                  res[0].forEach((c) => {\r\n                    characters.push({ ...c.data(), id: c.id });\r\n                  });\r\n                  res[1].forEach((l) => {\r\n                    locations.push({ ...l.data(), id: l.id });\r\n                  });\r\n                  dispatch({\r\n                    type: types.GET_CHAPTER,\r\n                    payload: {\r\n                      chapter: {\r\n                        ...chap.data(),\r\n                        id: chap.id,\r\n                        locations,\r\n                        characters,\r\n                        public: doc.data().public,\r\n                        storyTitle: doc.data().title,\r\n                      },\r\n                      chapterExists: true,\r\n                    },\r\n                  });\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n  let locId = \"\";\r\n\r\n  db.collection(\"locations\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      locId = res.id;\r\n      if (typeof data.image === \"object\") {\r\n        const imageName = `${locId}_${data.name\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db.collection(\"locations\").doc(locId).update({ image: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_LOCATION,\r\n              payload: {\r\n                message: \"Location added successfully\",\r\n                locId: res.id,\r\n                loadingLoc: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const deleteLocation = (id, name) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\r\n\r\n  batch.delete(db.collection(\"locations\").doc(id));\r\n  db.collection(\"chapters\")\r\n    .where(\"locations\", \"array-contains\", id)\r\n    .get()\r\n    .then((res) => {\r\n      res.forEach((chap) =>\r\n        batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n          locations: chap.data().locations.filter((c) => c !== id),\r\n        })\r\n      );\r\n\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .delete()\r\n        .then(() => {\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  const batch = db.batch();\r\n  const story = db.collection(\"stories\").doc(info.storyId).get();\r\n  const chapter = db.collection(\"chapters\").doc(info.chapterId).get();\r\n\r\n  Promise.all([story, chapter])\r\n    .then((res) => {\r\n      batch.update(db.collection(\"stories\").doc(info.storyId), {\r\n        commentsCount: res[0].data().commentsCount + 1,\r\n      });\r\n      batch.update(db.collection(\"chapters\").doc(info.chapterId), {\r\n        commentsCount: res[1].data().commentsCount + 1,\r\n      });\r\n      batch.commit().then(() => {\r\n        db.collection(\"comments\")\r\n          .add({\r\n            ...info,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          })\r\n          .then(() => message.success(\"Comment posted successfully\"));\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id, chapid, storyId) => (dispatch) => {\r\n  const batch = db.batch();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n  const chapter = db.collection(\"chapters\").doc(chapid).get();\r\n\r\n  Promise.all([story, chapter]).then((res) => {\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      commentsCount: res[0].data().commentsCount - 1,\r\n    });\r\n    batch.update(db.collection(\"chapters\").doc(chapid), {\r\n      commentsCount: res[1].data().commentsCount - 1,\r\n    });\r\n    batch.commit().then(() => {\r\n      db.collection(\"comments\").doc(id).delete();\r\n    });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}