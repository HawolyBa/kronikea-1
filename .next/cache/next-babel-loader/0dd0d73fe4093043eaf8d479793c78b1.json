{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport var getCharacter = function getCharacter(id) {\n  return function (dispatch) {\n    db.collection(\"characters\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            charaExists: false,\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var addCharacter = function addCharacter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_CHARACTER,\n      payload: {\n        loading: true\n      }\n    });\n    var imageName = \"\".concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          likesCount: 0,\n          likes: [],\n          dislikes: []\n        }));\n      }).then(function (res) {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: res.id,\n            loading: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        likes: [],\n        dislikes: []\n      })).then(function (res) {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: res.id,\n            loading: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var editCharacter = function editCharacter(data, id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHARACTER,\n      payload: {\n        loadingCharacter: true\n      }\n    });\n    var imageName = \"\".concat(data.firstname.toLowerCase()).concat(data.lastname && \"_\").concat(data.lastname && data.lastname.toLowerCase());\n\n    if (data.image && typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n          image: url\n        }));\n      }).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"characters\").doc(id).update(_objectSpread({}, data)).then(function () {\n        dispatch({\n          type: types.EDIT_CHARACTER,\n          payload: {\n            message: \"Character edited successfully\",\n            loadingCharacter: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteCharacter = function deleteCharacter(id) {\n  return function (dispatch) {\n    var batch = db.batch();\n    db.collection(\"characters\").doc(id)[\"delete\"]().then(function () {\n      db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(function (docs) {\n        docs.forEach(function (doc) {\n          batch.update(db.collection(\"chapters\").doc(doc.id), {\n            characters: doc.data().characters.filter(function (c) {\n              return c !== id;\n            })\n          });\n        });\n      }).then(function () {\n        db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(function (stories) {\n          stories.forEach(function (story) {\n            batch.update(db.collection(\"stories\").doc(story.id), {\n              secondaryArr: doc.data().secondaryArr.filter(function (c) {\n                return c !== id;\n              }),\n              secondaryCharacters: doc.data().secondaryCharacters.filter(function (c) {\n                return c.id !== id;\n              })\n            });\n          });\n        }).then(function () {\n          db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(function (characters) {\n            characters.forEach(function (_char) {\n              batch.update(db.collection(\"characters\").doc(_char.id), {\n                relativesArr: doc.data().relativesArr.filter(function (c) {\n                  return c !== id;\n                }),\n                relatives: doc.data().relatives.filter(function (c) {\n                  return c.character_id !== id;\n                })\n              });\n            });\n            batch.commit().then(function () {\n              console.log(\"all good\");\n            });\n          });\n        });\n      });\n    });\n  };\n};\nexport var getUserCharacters = function getUserCharacters(userId) {\n  return function (dispatch) {\n    db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_CHARACTERS,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteCharacters = function getFavoriteCharacters() {\n  return function (dispatch) {\n    db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().characterId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"characters\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_CHARACTERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getCharactersInStory = function getCharactersInStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).onSnapshot(function (doc) {\n      dispatch({\n        type: types.GET_STORY_CHARACTERS,\n        payload: {\n          secondaryCharacters: doc.data().secondaryCharacters,\n          mainArr: doc.data().mainCharacters\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","dispatch","collection","doc","get","then","exists","type","GET_CHARACTER","payload","character","data","charaExists","loading","addCharacter","ADD_CHARACTER","imageName","firstname","toLowerCase","lastname","image","ref","currentUser","uid","put","child","getDownloadURL","url","add","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","success","characterId","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","update","deleteCharacter","batch","where","docs","forEach","characters","filter","c","stories","story","secondaryArr","secondaryCharacters","char","relativesArr","relatives","character_id","commit","console","log","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","map","user","Promise","all","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr","mainCharacters"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            character: { ...doc.data(), id: doc.id },\r\n            charaExists: true,\r\n            loading: false,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"characters\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          likes: [],\r\n          dislikes: [],\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        likes: [],\r\n        dislikes: [],\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id) => (dispatch) => {\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  secondaryArr: doc.data().secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: doc\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: doc\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: doc\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                  batch.commit().then(() => {\r\n                    console.log(\"all good\");\r\n                  });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}