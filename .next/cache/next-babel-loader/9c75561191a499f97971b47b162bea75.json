{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_STORIES, GET_FAVORITE_STORIES, GET_USER_LOCATIONS, GET_STORY, GET_CHAPTERS, ADD_STORY, ADD_CHAPTER, EDIT_CHAPTER, GET_CHAPTER, EDIT_STORY, DISPATCH_ERROR } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\";\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      const secondary = doc.data().secondaryCharacters;\n      let mainArr = [];\n      let secondaryArr = [];\n      const mainQuery = main.map(c => db.collection(\"characters\").doc(c).get());\n      const secondaryQuery = secondary.map(c => db.collection(\"characters\").doc(c.id).get());\n      Promise.all([mainQuery, secondaryQuery]).then(result => {\n        result[0].forEach(docu => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        result[1].forEach(docu => {\n          secondaryArr = [...secondaryArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        dispatch({\n          type: GET_STORY,\n          storyExists: true,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id,\n            secondaryCharacters: secondaryArr,\n            mainCharacters: mainArr,\n            mainArr: doc.data().mainCharacters,\n            secondaryArr: doc.data().secondaryCharacters\n          })\n        });\n      });\n    } else {\n      dispatch({\n        type: DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n  console.log(data);\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        banner: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        locationsCount: 0,\n        secondaryCharacters: [],\n        featured: false,\n        note: 0\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      locationsCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url\n      }));\n    }).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(() => {\n      message.success(\"Story added successfully\");\n      dispatch({\n        type: EDIT_STORY,\n        payload: {\n          message: \"Story edited successfully\"\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const addChapter = (data, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    commentsCount: 0,\n    note: 0,\n    voters: [],\n    votesCount: 0,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    db.collection(\"stories\").doc(data.storyId).get().then(doc => {\n      db.collection(\"stories\").doc(data.storyId).update({\n        secondaryCharacters\n      }).then(() => {\n        dispatch({\n          type: ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: res.id,\n            loading: false\n          }\n        });\n      });\n    });\n  }); // .then((res) => {\n  //   dispatch({\n  //     type: ADD_CHAPTER,\n  //     payload: {\n  //       message: \"Chapter added successfully\",\n  //       chapId: res.id,\n  //     },\n  //   });\n  // })\n  // .catch((err) =>\n  //   dispatch({\n  //     type: ADD_CHAPTER,\n  //     payload: { message: err.message, chapId: \"\" },\n  //   })\n  // );\n};\nexport const getChapter = (storyId, id) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(doc => {\n        if (doc.exists) {\n          dispatch({\n            type: GET_CHAPTER,\n            payload: {\n              chapter: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                id: doc.id\n              }),\n              chapterExists: true\n            }\n          });\n        } else {\n          dispatch({\n            type: GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    db.collection(\"stories\").doc(storyId).get().then(doc => {\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters\n      }).then(() => {\n        dispatch({\n          type: EDIT_CHAPTER,\n          payload: {\n            message: \"Chapter edited successfully\",\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: GET_CHAPTERS,\n      payload: arr\n    });\n  });\n};\nexport const getStoryCharacters = id => dispatch => {};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getUserLocations = () => dispatch => {\n  db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["GET_USER_STORIES","GET_FAVORITE_STORIES","GET_USER_LOCATIONS","GET_STORY","GET_CHAPTERS","ADD_STORY","ADD_CHAPTER","EDIT_CHAPTER","GET_CHAPTER","EDIT_STORY","DISPATCH_ERROR","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","Promise","all","result","forEach","docu","type","storyExists","payload","catch","err","console","log","addStory","loading","imageName","title","toLowerCase","split","join","banner","ref","currentUser","uid","put","child","getDownloadURL","url","add","authorId","authorName","oneShot","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","locationsCount","featured","note","res","success","setTimeout","push","storyId","error","editStory","loadingStory","update","addChapter","commentsCount","voters","votesCount","chapId","getChapter","chapter","chapterExists","editChapter","chapid","getChapters","where","orderBy","onSnapshot","docs","arr","number","getStoryCharacters","getUserStories","items","getUserLocations","locations","getFavoriteStories","favArr","users","user","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_STORIES,\r\n  GET_FAVORITE_STORIES,\r\n  GET_USER_LOCATIONS,\r\n  GET_STORY,\r\n  GET_CHAPTERS,\r\n  ADD_STORY,\r\n  ADD_CHAPTER,\r\n  EDIT_CHAPTER,\r\n  GET_CHAPTER,\r\n  EDIT_STORY,\r\n  DISPATCH_ERROR,\r\n} from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n              secondaryArr: doc.data().secondaryCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_STORY, payload: { loading: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n  console.log(data);\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          locationsCount: 0,\r\n          secondaryCharacters: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        locationsCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        message.success(\"Story added successfully\");\r\n        dispatch({\r\n          type: EDIT_STORY,\r\n          payload: {\r\n            message: \"Story edited successfully\",\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  dispatch({ type: ADD_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(data.storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: ADD_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter added successfully\",\r\n                  chapId: res.id,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n  // .then((res) => {\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: {\r\n  //       message: \"Chapter added successfully\",\r\n  //       chapId: res.id,\r\n  //     },\r\n  //   });\r\n  // })\r\n  // .catch((err) =>\r\n  //   dispatch({\r\n  //     type: ADD_CHAPTER,\r\n  //     payload: { message: err.message, chapId: \"\" },\r\n  //   })\r\n  // );\r\n};\r\n\r\nexport const getChapter = (storyId, id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((doc) => {\r\n            if (doc.exists) {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: {\r\n                  chapter: { ...doc.data(), id: doc.id },\r\n                  chapterExists: true,\r\n                },\r\n              });\r\n            } else {\r\n              dispatch({\r\n                type: GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryCharacters = (id) => (dispatch) => {};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}