{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { auth, db } from \"../fbConfig\";\nexport const getItem = (item, type, dispatch) => dispatch => {\n  db.collection(item).where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: type,\n      payload: items\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/common.js"],"names":["auth","db","getItem","item","type","dispatch","collection","where","currentUser","uid","get","then","docs","items","forEach","doc","id","data","payload"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,EAAf,QAAyB,aAAzB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA2BA,QAAD,IAAc;AAC7DJ,EAAAA,EAAE,CAACK,UAAH,CAAcH,IAAd,EACGI,KADH,CACS,UADT,EACqB,IADrB,EAC2BP,IAAI,CAACQ,WAAL,CAAiBC,GAD5C,EAEGC,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACd,QAAIC,KAAK,GAAG,EAAZ;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ;AAAaG,QAAAA,EAAE,EAAED,GAAG,CAACC;AAArB,SAA4BD,GAAG,CAACE,IAAJ,EAA5B,EAAR;AACD,KAFD;AAGA,WAAOJ,KAAP;AACD,GATH,EAUGF,IAVH,CAUSE,KAAD,IAAW;AACfR,IAAAA,QAAQ,CAAC;AAAED,MAAAA,IAAI,EAAEA,IAAR;AAAcc,MAAAA,OAAO,EAAEL;AAAvB,KAAD,CAAR;AACD,GAZH;AAaD,CAdM","sourcesContent":["import { auth, db } from \"../fbConfig\";\r\n\r\nexport const getItem = (item, type, dispatch) => (dispatch) => {\r\n  db.collection(item)\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: type, payload: items });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}