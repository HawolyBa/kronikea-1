{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_CHARACTERS, GET_FAVORITE_CHARACTERS, ADD_CHARACTER, EDIT_CHARACTER, GET_CHARACTER, GET_STORY_CHARACTERS } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = id => dispatch => {\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      dispatch({\n        type: GET_CHARACTER,\n        payload: {\n          character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }),\n          charaExists: true,\n          loading: false\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        likes: [],\n        dislikes: []\n      }));\n    }).then(res => {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: res.id,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      likes: [],\n      dislikes: []\n    })).then(res => {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: res.id,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url\n      }));\n    }).then(() => {\n      dispatch({\n        type: EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread({}, data)).then(() => {\n      dispatch({\n        type: EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const getUserCharacters = userId => dispatch => {\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = () => dispatch => {\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["GET_USER_CHARACTERS","GET_FAVORITE_CHARACTERS","ADD_CHARACTER","EDIT_CHARACTER","GET_CHARACTER","GET_STORY_CHARACTERS","message","db","auth","firebase","getCharacter","id","dispatch","collection","doc","get","then","exists","type","payload","character","data","charaExists","loading","addCharacter","imageName","firstname","toLowerCase","lastname","image","storage","ref","currentUser","uid","put","child","getDownloadURL","url","add","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","success","characterId","catch","err","error","editCharacter","loadingCharacter","update","getUserCharacters","userId","where","docs","items","forEach","getFavoriteCharacters","favArr","users","result","map","user","Promise","all","favUsers","getCharactersInStory","onSnapshot","secondaryCharacters","mainArr","mainCharacters"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_CHARACTERS,\r\n  GET_FAVORITE_CHARACTERS,\r\n  ADD_CHARACTER,\r\n  EDIT_CHARACTER,\r\n  GET_CHARACTER,\r\n  GET_STORY_CHARACTERS,\r\n} from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: GET_CHARACTER,\r\n          payload: {\r\n            character: { ...doc.data(), id: doc.id },\r\n            charaExists: true,\r\n            loading: false,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"characters\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          likes: [],\r\n          dislikes: [],\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        likes: [],\r\n        dislikes: [],\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}