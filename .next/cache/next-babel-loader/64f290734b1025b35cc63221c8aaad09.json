{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_USER_CHARACTERS, GET_FAVORITE_CHARACTERS, ADD_CHARACTER } from \"../../utils/constants\";\nimport { db, auth } from \"../fbConfig\";\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        image: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        likes: [],\n        dislikes: []\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      locationsCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const getUserCharacters = () => dispatch => {\n  db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = () => dispatch => {\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["GET_USER_CHARACTERS","GET_FAVORITE_CHARACTERS","ADD_CHARACTER","db","auth","addCharacter","data","dispatch","type","payload","loading","imageName","firstname","toLowerCase","lastname","image","storage","ref","currentUser","uid","put","then","child","getDownloadURL","url","collection","add","authorId","authorName","createdAt","firebase","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","message","success","setTimeout","Router","push","id","ADD_STORY","storyId","catch","err","error","oneShot","chaptersCount","locationsCount","featured","secondaryCharacters","note","getUserCharacters","where","get","docs","items","forEach","doc","getFavoriteCharacters","favArr","characterId","users","result","map","user","Promise","all","favUsers"],"mappings":"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","sourcesContent":["import {\r\n  GET_USER_CHARACTERS,\r\n  GET_FAVORITE_CHARACTERS,\r\n  ADD_CHARACTER,\r\n} from \"../../utils/constants\";\r\nimport { db, auth } from \"../fbConfig\";\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: ADD_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${data.firstname.toLowerCase()}${data.lastname && \"_\"}${\r\n    data.lastname && data.lastname.toLowerCase()\r\n  }`;\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"characters\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          likes: [],\r\n          dislikes: [],\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        locationsCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getUserCharacters = () => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}