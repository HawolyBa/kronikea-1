{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\"; // STORIES\n\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      const secondary = doc.data().secondaryCharacters;\n      let mainArr = [];\n      let secondaryArr = [];\n      const mainQuery = main.map(c => db.collection(\"characters\").doc(c).get());\n      const secondaryQuery = secondary.map(c => db.collection(\"characters\").doc(c.id).get());\n      const mainRes = Promise.all(mainQuery);\n      const secondaryRes = Promise.all(secondaryQuery);\n      Promise.all([mainRes, secondaryRes]).then(result => {\n        result[0].forEach(docu => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        result[1].forEach(docu => {\n          secondaryArr = [...secondaryArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        dispatch({\n          type: types.GET_STORY,\n          storyExists: true,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id,\n            secondaryCharacters: secondaryArr,\n            mainCharacters: mainArr,\n            mainArr: doc.data().mainCharacters\n          })\n        });\n      });\n    } else {\n      dispatch({\n        type: types.DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: types.ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  let storyId = \"\";\n  db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    authorName: data.authorName,\n    oneShot: false,\n    banner: typeof data.banner === \"string\" ? data.banner : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    chaptersCount: 0,\n    secondaryCharacters: [],\n    secondaryArr: [],\n    featured: false,\n    note: 0,\n    chaptersCount: 0,\n    commentsCount: 0,\n    lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    storyId = res.id;\n\n    if (typeof data.banner === \"object\") {\n      const imageName = `${res.id}_${data.title.toLowerCase().split(\" \").join(\"_\")}`;\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"stories\").doc(storyId).update({\n          banner: url\n        });\n      }).then(() => {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: storyId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: types.ADD_STORY,\n        payload: {\n          message: \"Story added successfully\",\n          storyId: storyId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: types.EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url,\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n      }));\n    }).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteStory = id => dispatch => {\n  dispatch({\n    type: types.DELETE_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"stories\").doc(id).delete().then(() => {\n    dispatch({\n      type: types.DELETE_STORY,\n      payload: {\n        message: \"Story deleted successfully\",\n        loading: true,\n        deleted: true\n      }\n    });\n  });\n};\nexport const getUserStories = (id, type) => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"stories\").where(\"authorId\", \"==\", userId).orderBy(\"createdAt\", \"desc\").get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())].filter(s => id ? s.public : s);\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", userId).orderBy(\"createdAt\", \"desc\").get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const isStoryFavorite = storyId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(snapshot => {\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.IS_STORY_FAVORITE,\n        payload: answer,\n        loadingFav: false\n      });\n    });\n  } else {\n    return dispatch({\n      type: types.IS_STORY_FAVORITE,\n      payload: false,\n      loadingFav: false\n    });\n  }\n};\nexport const addStoryToFavorite = (id, username, storyTitle, authorId) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  return db.collection(\"storiesLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    storyId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(`${storyTitle} added to your favorites`)).catch(err => message.error(err.message));\n};\nexport const removeStoryFromFavorite = (id, storyTitle) => dispatch => {\n  db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${storyTitle} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const getStoryCharacters = () => dispatch => {};\nexport const getHomeStories = () => dispatch => {\n  let result = [];\n  db.collection(\"stories\").where(\"public\", \"==\", true).orderBy(\"note\", \"desc\").limit(4).get().then(docs => {\n    docs.forEach(doc => result.push(_objectSpread({\n      id: doc.id\n    }, doc.data())));\n    dispatch({\n      type: types.GET_HOME_STORIES,\n      payload: result\n    });\n  });\n};\nexport const getFeaturedStories = () => dispatch => {\n  db.collection(\"stories\").where(\"public\", \"==\", true).where(\"featured\", \"==\", true).limit(10).get().then(docs => {\n    let result = [];\n    docs.forEach(doc => result.push(_objectSpread({\n      id: doc.id\n    }, doc.data())));\n    dispatch({\n      type: types.GET_FEATURED_STORIES,\n      payload: result,\n      loading: false\n    });\n  });\n};\nexport const getStoriesByLetter = (letter, alphabet) => dispatch => {\n  dispatch({\n    type: types.GET_STORIES_FROM_SEARCH,\n    loading: true\n  });\n  const end = alphabet.findIndex(a => a === letter);\n  db.collection(\"stories\").where(\"public\", \"==\", true).orderBy(\"title\", \"asc\").startAt(letter.toUpperCase()).endAt(letter === \"z\" ? \"Z\" : alphabet[end + 1].toUpperCase()).get().then(docs => {\n    let result = [];\n    docs.forEach(doc => result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    })));\n    dispatch({\n      type: types.GET_STORIES_FROM_SEARCH,\n      loading: false,\n      payload: result\n    });\n  });\n};\nexport const getStoriesByCategory = cat => dispatch => {\n  db.collection(\"stories\").where(\"public\", \"==\", true).where(\"categories\", \"array-contains\", cat).get().then(docs => {\n    let result = [];\n    docs.forEach(doc => result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    })));\n    dispatch({\n      type: types.GET_STORIES_FROM_SEARCH,\n      loading: false,\n      payload: result\n    });\n  });\n}; // CHAPTERs\n\nexport const addChapter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").where(\"storyId\", \"==\", data.storyId).get().then(docs => {\n    let numberUsed = [];\n    docs.forEach(chapter => {\n      numberUsed.push(chapter.data().number);\n    });\n\n    if (numberUsed.includes(data.number)) {\n      dispatch({\n        type: types.ADD_CHAPTER,\n        payload: {\n          loading: false\n        }\n      });\n      message.error(`You already have a chapter numbered: ${data.number}`);\n    } else {\n      return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        commentsCount: 0,\n        note: 0,\n        voters: [],\n        votesCount: 0,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      })).then(res => {\n        dispatch({\n          type: types.ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: res.id,\n            loading: false\n          }\n        });\n      });\n    }\n  });\n};\nexport const editChapter = (data, chapid) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    dispatch({\n      type: types.EDIT_CHAPTER,\n      payload: {\n        message: \"Chapter edited successfully\",\n        loading: false\n      }\n    });\n  });\n};\nexport const deleteChapter = (id, storyId) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loadingChapter: true\n    }\n  });\n  db.collection(\"chapters\").doc(id).delete().then(() => {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        message: \"Chapter deleted successfully\",\n        loadingChapter: false\n      }\n    });\n  }).catch(err => console.log(err));\n};\nexport const getChapter = (storyId, id, type) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(chap => {\n        if (chap.exists) {\n          if (type === \"show\") {\n            let characters = [];\n            let locations = [];\n            let charaQuery = [];\n            let locQuery = [];\n            const charactersInChaper = chap.data().characters;\n            const locationsInChaper = chap.data().locations;\n            const chapNumber = chap.data().number;\n            const prevChap = db.collection(\"chapters\").where(\"storyId\", \"==\", storyId).where(\"number\", \"==\", chapNumber - 1).get();\n            const nextChap = db.collection(\"chapters\").where(\"storyId\", \"==\", storyId).where(\"number\", \"==\", chapNumber + 1).get();\n            charactersInChaper.forEach(char => {\n              charaQuery.push(db.collection(\"characters\").doc(char).get());\n            });\n            locationsInChaper.forEach(loc => {\n              locQuery.push(db.collection(\"locations\").doc(loc).get());\n            });\n            charaQuery = Promise.all(charaQuery);\n            locQuery = Promise.all(locQuery);\n            Promise.all([charaQuery, locQuery, prevChap, nextChap]).then(res => {\n              let prev = res[2].docs[0] ? res[2].docs[0].id : null;\n              let next = res[3].docs[0] ? res[3].docs[0].id : null;\n              res[0].forEach(c => {\n                characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                  id: c.id\n                }));\n              });\n              res[1].forEach(l => {\n                locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                  id: l.id\n                }));\n              });\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    prev,\n                    next,\n                    locations,\n                    characters,\n                    public: doc.data().public,\n                    storyTitle: doc.data().title,\n                    note: doc.data().note\n                  }),\n                  chapterExists: true\n                }\n              });\n            });\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                  id: chap.id,\n                  public: doc.data().public\n                }),\n                chapterExists: true\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: types.GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: types.GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount,\n        status: doc.data().status\n      });\n    });\n    dispatch({\n      type: types.GET_CHAPTERS,\n      payload: arr\n    });\n  });\n}; // LOCATIONS\n\nexport const addLocation = data => dispatch => {\n  dispatch({\n    type: types.ADD_LOCATION,\n    payload: {\n      loadingLoc: true\n    }\n  });\n  let locId = \"\";\n  db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    locId = res.id;\n\n    if (typeof data.image === \"object\") {\n      const imageName = `${locId}_${data.name.toLowerCase().split(\" \").join(\"_\")}`;\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"locations\").doc(locId).update({\n          image: url\n        });\n      }).then(() => {\n        dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: types.ADD_LOCATION,\n        payload: {\n          message: \"Location added successfully\",\n          locId: res.id,\n          loadingLoc: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editLocation = data => dispatch => {};\nexport const getLocation = id => dispatch => {\n  db.collection(\"locations\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      dispatch({\n        type: types.GET_LOCATION,\n        payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }),\n        locationExists: true\n      });\n    } else {\n      dispatch({\n        type: types.GET_LOCATION,\n        locationExists: false\n      });\n    }\n  });\n};\nexport const deleteLocation = (id, name) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  const batch = db.batch();\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\n  batch.delete(db.collection(\"locations\").doc(id));\n  db.collection(\"chapters\").where(\"locations\", \"array-contains\", id).get().then(res => {\n    res.forEach(chap => batch.update(db.collection(\"chapters\").doc(chap.id), {\n      locations: chap.data().locations.filter(c => c !== id)\n    }));\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).delete().then(() => {\n      batch.commit().then(() => {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            loading: false,\n            message: \"Location deleted successfully\",\n            deleted: true\n          }\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n      batch.commit().then(() => {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            loading: false,\n            message: \"Location deleted successfully\",\n            deleted: true\n          }\n        });\n      });\n    });\n  }).catch(err => console.log(err));\n};\nexport const getUserLocations = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"locations\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: types.GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};\nexport const getStoryLocations = storyId => dispatch => {\n  db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n    const locations = docs.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    }));\n    dispatch({\n      type: types.GET_STORY_LOCATIONS,\n      payload: locations\n    });\n  });\n}; // COMMENTS\n\nexport const getComments = id => dispatch => {\n  db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n    let comments = snap.docs.map(comment => _objectSpread(_objectSpread({}, comment.data()), {}, {\n      id: comment.id\n    }));\n    let queries = [];\n    comments.forEach(comm => {\n      queries.push(db.collection(\"users\").doc(comm.userId).get());\n    });\n    Promise.all(queries).then(res => {\n      comments = comments.map(comm => _objectSpread({}, comm));\n      dispatch({\n        type: types.GET_COMMENTS,\n        payload: {\n          loadingComments: false,\n          comments\n        }\n      });\n    });\n  });\n};\nexport const submitComment = info => dispatch => {\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  if (!info.content) return message.error(\"Content must not be empty\");\n  db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n    userDeleted: false,\n    suspended: false,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(() => message.success(\"Comment posted successfully\")).catch(err => message.error(err.message));\n};\nexport const deleteComment = id => dispatch => {\n  db.collection(\"comments\").doc(id).delete();\n}; // RATE\n\nexport const rateStory = data => dispatch => {\n  db.collection(\"stars\").doc(`${auth.currentUser.uid}${data.storyId}`).set({\n    value: data.value,\n    userId: auth.currentUser.uid,\n    storyId: data.storyId\n  }).then(() => message.success(\"Story rated successfully\")).catch(err => console.log(err));\n};\nexport const getUserNote = storyId => dispatch => {\n  db.collection(\"stars\").doc(`${auth.currentUser.uid}${storyId}`).onSnapshot(doc => dispatch({\n    type: types.GET_USER_RATE,\n    payload: doc.exists ? doc.data().value : 0\n  }));\n}; // ARCHIVES\n\nexport const getStoriesFromSearch = search => dispatch => {\n  let result = [];\n  db.collection(\"stories\").where(\"public\", \"==\", true).get().then(data => {\n    data.forEach(doc => {\n      const title = doc.data().title.toLowerCase().split(\" \");\n      const authorName = doc.data().authorName.toLowerCase().split(\" \");\n      const searchTerm = search.split(\"-\");\n      const isIncluded = searchTerm.every(word => title.includes(word));\n      const orIncluded = searchTerm.some(word => doc.data().title.toLowerCase().indexOf(word) !== -1);\n      const authorIncluded = searchTerm.every(word => authorName.includes(word));\n      const orAuthorIncluded = searchTerm.some(word => doc.data().authorName.toLowerCase().indexOf(word) !== -1);\n\n      if (isIncluded || orIncluded || authorIncluded || orAuthorIncluded) {\n        result.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }));\n      }\n    });\n    return result;\n  }).then(() => {\n    dispatch({\n      type: types.GET_STORIES_FROM_SEARCH,\n      payload: result,\n      loading: false\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","catch","err","console","log","addStory","ADD_STORY","loading","storyId","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","commentsCount","lastUpdated","res","imageName","title","toLowerCase","split","join","ref","put","child","getDownloadURL","url","update","error","editStory","EDIT_STORY","loadingStory","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","delete","deleted","getUserStories","userId","orderBy","items","filter","s","public","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","success","removeStoryFromFavorite","getStoryCharacters","getHomeStories","limit","push","GET_HOME_STORIES","getFeaturedStories","GET_FEATURED_STORIES","getStoriesByLetter","letter","alphabet","GET_STORIES_FROM_SEARCH","end","findIndex","a","startAt","toUpperCase","endAt","getStoriesByCategory","cat","addChapter","ADD_CHAPTER","numberUsed","chapter","number","includes","voters","votesCount","chapId","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","getChapter","chap","characters","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","chapNumber","prevChap","nextChap","char","loc","prev","next","l","GET_CHAPTER","chapterExists","getChapters","arr","status","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","locId","image","name","editLocation","getLocation","GET_LOCATION","locationExists","deleteLocation","batch","commit","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","comm","GET_COMMENTS","loadingComments","submitComment","info","content","userDeleted","suspended","deleteComment","rateStory","set","value","getUserNote","GET_USER_RATE","getStoriesFromSearch","search","searchTerm","isIncluded","every","word","orIncluded","some","indexOf","authorIncluded","orAuthorIncluded"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n      chaptersCount: 0,\r\n      commentsCount: 0,\r\n      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        const imageName = `${res.id}_${data.title\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyId)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: storyId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: storyId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n            lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.DELETE_STORY,\r\n        payload: {\r\n          message: \"Story deleted successfully\",\r\n          loading: true,\r\n          deleted: true,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getUserStories = (id, type) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((s) =>\r\n          id ? s.public : s\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  } else {\r\n    return dispatch({\r\n      type: types.IS_STORY_FAVORITE,\r\n      payload: false,\r\n      loadingFav: false,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle, authorId) => (\r\n  dispatch\r\n) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  return db\r\n    .collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\nexport const getHomeStories = () => (dispatch) => {\r\n  let result = [];\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .orderBy(\"note\", \"desc\")\r\n    .limit(4)\r\n    .get()\r\n    .then((docs) => {\r\n      docs.forEach((doc) => result.push({ id: doc.id, ...doc.data() }));\r\n      dispatch({\r\n        type: types.GET_HOME_STORIES,\r\n        payload: result,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFeaturedStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .where(\"featured\", \"==\", true)\r\n    .limit(10)\r\n    .get()\r\n    .then((docs) => {\r\n      let result = [];\r\n      docs.forEach((doc) => result.push({ id: doc.id, ...doc.data() }));\r\n      dispatch({\r\n        type: types.GET_FEATURED_STORIES,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoriesByLetter = (letter, alphabet) => (dispatch) => {\r\n  dispatch({ type: types.GET_STORIES_FROM_SEARCH, loading: true });\r\n\r\n  const end = alphabet.findIndex((a) => a === letter);\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .orderBy(\"title\", \"asc\")\r\n    .startAt(letter.toUpperCase())\r\n    .endAt(letter === \"z\" ? \"Z\" : alphabet[end + 1].toUpperCase())\r\n    .get()\r\n    .then((docs) => {\r\n      let result = [];\r\n      docs.forEach((doc) => result.push({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORIES_FROM_SEARCH,\r\n        loading: false,\r\n        payload: result,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoriesByCategory = (cat) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .where(\"categories\", \"array-contains\", cat)\r\n    .get()\r\n    .then((docs) => {\r\n      let result = [];\r\n      docs.forEach((doc) => result.push({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORIES_FROM_SEARCH,\r\n        loading: false,\r\n        payload: result,\r\n      });\r\n    });\r\n};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", data.storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      let numberUsed = [];\r\n      docs.forEach((chapter) => {\r\n        numberUsed.push(chapter.data().number);\r\n      });\r\n      if (numberUsed.includes(data.number)) {\r\n        dispatch({ type: types.ADD_CHAPTER, payload: { loading: false } });\r\n        message.error(`You already have a chapter numbered: ${data.number}`);\r\n      } else {\r\n        return db\r\n          .collection(\"chapters\")\r\n          .add({\r\n            ...data,\r\n            authorId: auth.currentUser.uid,\r\n            commentsCount: 0,\r\n            note: 0,\r\n            voters: [],\r\n            votesCount: 0,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          })\r\n          .then((res) => {\r\n            dispatch({\r\n              type: types.ADD_CHAPTER,\r\n              payload: {\r\n                message: \"Chapter added successfully\",\r\n                chapId: res.id,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      }\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, chapid) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.EDIT_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter edited successfully\",\r\n          loading: false,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                const chapNumber = chap.data().number;\r\n\r\n                const prevChap = db\r\n                  .collection(\"chapters\")\r\n                  .where(\"storyId\", \"==\", storyId)\r\n                  .where(\"number\", \"==\", chapNumber - 1)\r\n                  .get();\r\n                const nextChap = db\r\n                  .collection(\"chapters\")\r\n                  .where(\"storyId\", \"==\", storyId)\r\n                  .where(\"number\", \"==\", chapNumber + 1)\r\n                  .get();\r\n\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery, prevChap, nextChap]).then(\r\n                  (res) => {\r\n                    let prev = res[2].docs[0] ? res[2].docs[0].id : null;\r\n                    let next = res[3].docs[0] ? res[3].docs[0].id : null;\r\n                    res[0].forEach((c) => {\r\n                      characters.push({ ...c.data(), id: c.id });\r\n                    });\r\n                    res[1].forEach((l) => {\r\n                      locations.push({ ...l.data(), id: l.id });\r\n                    });\r\n                    dispatch({\r\n                      type: types.GET_CHAPTER,\r\n                      payload: {\r\n                        chapter: {\r\n                          ...chap.data(),\r\n                          id: chap.id,\r\n                          prev,\r\n                          next,\r\n                          locations,\r\n                          characters,\r\n                          public: doc.data().public,\r\n                          storyTitle: doc.data().title,\r\n                          note: doc.data().note,\r\n                        },\r\n                        chapterExists: true,\r\n                      },\r\n                    });\r\n                  }\r\n                );\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n          status: doc.data().status,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n  let locId = \"\";\r\n\r\n  db.collection(\"locations\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      locId = res.id;\r\n      if (typeof data.image === \"object\") {\r\n        const imageName = `${locId}_${data.name\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .join(\"_\")}`;\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db.collection(\"locations\").doc(locId).update({ image: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_LOCATION,\r\n              payload: {\r\n                message: \"Location added successfully\",\r\n                locId: res.id,\r\n                loadingLoc: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const deleteLocation = (id, name) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  const imageName = `${id}_${name.toLowerCase().split(\" \").join(\"_\")}`;\r\n\r\n  batch.delete(db.collection(\"locations\").doc(id));\r\n  db.collection(\"chapters\")\r\n    .where(\"locations\", \"array-contains\", id)\r\n    .get()\r\n    .then((res) => {\r\n      res.forEach((chap) =>\r\n        batch.update(db.collection(\"chapters\").doc(chap.id), {\r\n          locations: chap.data().locations.filter((c) => c !== id),\r\n        })\r\n      );\r\n\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .delete()\r\n        .then(() => {\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          batch.commit().then(() => {\r\n            dispatch({\r\n              type: types.DELETE_CHAPTER,\r\n              payload: {\r\n                loading: false,\r\n                message: \"Location deleted successfully\",\r\n                deleted: true,\r\n              },\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getUserLocations = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          //userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      userDeleted: false,\r\n      suspended: false,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(\"Comment posted successfully\"))\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id) => (dispatch) => {\r\n  db.collection(\"comments\").doc(id).delete();\r\n};\r\n\r\n// RATE\r\n\r\nexport const rateStory = (data) => (dispatch) => {\r\n  db.collection(\"stars\")\r\n    .doc(`${auth.currentUser.uid}${data.storyId}`)\r\n    .set({\r\n      value: data.value,\r\n      userId: auth.currentUser.uid,\r\n      storyId: data.storyId,\r\n    })\r\n    .then(() => message.success(\"Story rated successfully\"))\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getUserNote = (storyId) => (dispatch) => {\r\n  db.collection(\"stars\")\r\n    .doc(`${auth.currentUser.uid}${storyId}`)\r\n    .onSnapshot((doc) =>\r\n      dispatch({\r\n        type: types.GET_USER_RATE,\r\n        payload: doc.exists ? doc.data().value : 0,\r\n      })\r\n    );\r\n};\r\n\r\n// ARCHIVES\r\n\r\nexport const getStoriesFromSearch = (search) => (dispatch) => {\r\n  let result = [];\r\n  db.collection(\"stories\")\r\n    .where(\"public\", \"==\", true)\r\n    .get()\r\n    .then((data) => {\r\n      data.forEach((doc) => {\r\n        const title = doc.data().title.toLowerCase().split(\" \");\r\n        const authorName = doc.data().authorName.toLowerCase().split(\" \");\r\n        const searchTerm = search.split(\"-\");\r\n        const isIncluded = searchTerm.every((word) => title.includes(word));\r\n        const orIncluded = searchTerm.some(\r\n          (word) => doc.data().title.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        const authorIncluded = searchTerm.every((word) =>\r\n          authorName.includes(word)\r\n        );\r\n        const orAuthorIncluded = searchTerm.some(\r\n          (word) => doc.data().authorName.toLowerCase().indexOf(word) !== -1\r\n        );\r\n        if (isIncluded || orIncluded || authorIncluded || orAuthorIncluded) {\r\n          result.push({ ...doc.data(), id: doc.id });\r\n        }\r\n      });\r\n      return result;\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.GET_STORIES_FROM_SEARCH,\r\n        payload: result,\r\n        loading: false,\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}