{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\character\\\\Comments.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\nimport { dummy } from \"../../utils/dummy\";\n\nconst Comments = ({\n  comments,\n  auth,\n  submit,\n  character\n}) => {\n  const [visible, setVisible] = React.useState(false);\n  const [content, setContent] = React.useState(\"\");\n\n  const submitComment = () => {\n    submit({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      content,\n      characterId: character.id,\n      authorId: character.authorId,\n      answer: false\n    });\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  const closeModal = () => {\n    setVisible(false);\n    setContent(\"\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"character-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"feedback-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"side-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"Feedback\"), __jsx(\"div\", {\n    className: \"add-comment\",\n    onClick: () => setVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, __jsx(\"ion-icon\", {\n    name: \"add-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Leave a comment\"))), __jsx(\"div\", {\n    className: \"comments-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, comments && comments.map(comment => __jsx(Comment, {\n    actions: [// auth && auth.user && (\n    //   <span\n    //     key=\"comment-basic-reply-to\"\n    //     onClick={commentToggle.bind(null, comment.id)}\n    //   >\n    //     Reply{\" \"}\n    //   </span>\n    // ),\n    comment.userId === auth.user.uid && __jsx(Popconfirm, {\n      title: \"Do you want to delete this comment ?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: () => deleteComment(comment.id, chapid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }\n    }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n      type: \"comment\",\n      data: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    })],\n    author: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, comment.username)),\n    avatar: __jsx(Link, {\n      href: `/profile/${comment.userId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      src: comment.userImage ? comment.userImage : dummy.avatar,\n      alt: comment.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }\n    }))),\n    content: __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 26\n      }\n    }, comment.content),\n    datetime: __jsx(Tooltip, {\n      title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  })))), __jsx(Modal, {\n    title: \"Leave a new comment\",\n    visible: visible,\n    onCancel: closeModal,\n    okText: \"Submit\",\n    onOk: submitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 5,\n    value: content,\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/character/Comments.js"],"names":["React","Link","Input","Modal","Comment","Tooltip","Popconfirm","Avatar","dummy","Comments","comments","auth","submit","character","visible","setVisible","useState","content","setContent","submitComment","userId","user","uid","username","characterId","id","authorId","answer","closeModal","map","comment","deleteComment","chapid","userImage","avatar","createdAt","moment","unix","seconds","format","fromNow","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { Input, Modal, Comment, Tooltip, Popconfirm, Avatar } from \"antd\";\r\nimport { dummy } from \"../../utils/dummy\";\r\n\r\nconst Comments = ({ comments, auth, submit, character }) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [content, setContent] = React.useState(\"\");\r\n\r\n  const submitComment = () => {\r\n    submit({\r\n      userId: auth.user.uid,\r\n      username: auth.user.username,\r\n      content,\r\n      characterId: character.id,\r\n      authorId: character.authorId,\r\n      answer: false,\r\n    });\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setVisible(false);\r\n    setContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"character-feedback\">\r\n        <header className=\"feedback-header\">\r\n          <h3 className=\"side-heading\">Feedback</h3>\r\n          <div className=\"add-comment\" onClick={() => setVisible(true)}>\r\n            <ion-icon name=\"add-circle\"></ion-icon>\r\n            <span>Leave a comment</span>\r\n          </div>\r\n        </header>\r\n        <div className=\"comments-block\">\r\n          {comments &&\r\n            comments.map((comment) => (\r\n              <Comment\r\n                actions={[\r\n                  // auth && auth.user && (\r\n                  //   <span\r\n                  //     key=\"comment-basic-reply-to\"\r\n                  //     onClick={commentToggle.bind(null, comment.id)}\r\n                  //   >\r\n                  //     Reply{\" \"}\r\n                  //   </span>\r\n                  // ),\r\n                  comment.userId === auth.user.uid && (\r\n                    <Popconfirm\r\n                      title=\"Do you want to delete this comment ?\"\r\n                      okText=\"Yes\"\r\n                      cancelText=\"No\"\r\n                      onConfirm={() => deleteComment(comment.id, chapid)}\r\n                    >\r\n                      <span>Delete</span>\r\n                    </Popconfirm>\r\n                  ),\r\n                  auth.user && auth.user.uid !== comment.userId && (\r\n                    <Report type=\"comment\" data={comment} />\r\n                  ),\r\n                ]}\r\n                author={\r\n                  <Link href={`/profile/${comment.userId}`}>\r\n                    <a>{comment.username}</a>\r\n                  </Link>\r\n                }\r\n                avatar={\r\n                  <Link href={`/profile/${comment.userId}`}>\r\n                    <a>\r\n                      <Avatar\r\n                        src={\r\n                          comment.userImage ? comment.userImage : dummy.avatar\r\n                        }\r\n                        alt={comment.username}\r\n                      />\r\n                    </a>\r\n                  </Link>\r\n                }\r\n                content={<p>{comment.content}</p>}\r\n                datetime={\r\n                  <Tooltip\r\n                    title={\r\n                      comment.createdAt && typeof comment.createdAt === \"object\"\r\n                        ? moment\r\n                            .unix(comment.createdAt.seconds)\r\n                            .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                        : moment(comment.createdAt).format(\r\n                            \"YYYY-MM-DD HH:mm:ss\"\r\n                          )\r\n                    }\r\n                  >\r\n                    <span>\r\n                      {comment.createdAt &&\r\n                      typeof comment.createdAt === \"object\"\r\n                        ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                        : moment(comment.createdAt).fromNow()}\r\n                    </span>\r\n                  </Tooltip>\r\n                }\r\n              />\r\n            ))}\r\n        </div>\r\n      </section>\r\n      <Modal\r\n        title={\"Leave a new comment\"}\r\n        visible={visible}\r\n        onCancel={closeModal}\r\n        okText=\"Submit\"\r\n        onOk={submitComment}\r\n      >\r\n        <Input.TextArea\r\n          rows={5}\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        ></Input.TextArea>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}