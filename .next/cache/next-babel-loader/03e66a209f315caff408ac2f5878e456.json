{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\n\nvar Comments = function Comments(_ref) {\n  var comments = _ref.comments,\n      auth = _ref.auth;\n  var topComments = comments.filter(function (comm) {\n    return !comm.answer;\n  });\n  var responses = comments.filter(function (comm) {\n    return comm.answer;\n  });\n  var allComments = topComments.map(function (comm) {\n    var res = [];\n    responses.forEach(function (response) {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res\n    });\n  });\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(function (comment) {\n    return __jsx(Comment, {\n      key: comment.id,\n      actions: [__jsx(\"span\", {\n        key: \"comment-basic-reply-to\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, \"Reply \")],\n      author: __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }\n      }, comment.username),\n      avatar: __jsx(Avatar, {\n        src: comment.userImage,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }\n      }),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 20\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }\n      }, typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, comment.responses.map(function (c) {\n      return __jsx(Comment, {\n        key: c.id,\n        actions: [__jsx(\"span\", {\n          key: \"comment-basic-reply-to\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }\n        }, \"Reply \")],\n        author: __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 23\n          }\n        }, c.username),\n        avatar: __jsx(Avatar, {\n          src: c.userImage,\n          alt: c.username,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 23\n          }\n        }),\n        content: __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 24\n          }\n        }, c.content),\n        datetime: __jsx(Tooltip, {\n          title: typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 19\n          }\n        }, typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      });\n    }));\n  }));\n};\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Link","moment","Comments","comments","auth","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","user","minRows","marginBottom","length","comment","username","userImage","content","createdAt","unix","seconds","format","fromNow","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\n\r\nconst Comments = ({ comments, auth }) => {\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return { ...comm, responses: res };\r\n  });\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button type=\"primary\">Comment</Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => (\r\n        <Comment\r\n          key={comment.id}\r\n          actions={[<span key=\"comment-basic-reply-to\">Reply </span>]}\r\n          author={<a>{comment.username}</a>}\r\n          avatar={<Avatar src={comment.userImage} alt={comment.username} />}\r\n          content={<p>{comment.content}</p>}\r\n          datetime={\r\n            <Tooltip\r\n              title={\r\n                typeof comment.createdAt === \"object\"\r\n                  ? moment\r\n                      .unix(comment.createdAt.seconds)\r\n                      .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n              }\r\n            >\r\n              <span>\r\n                {typeof comment.createdAt === \"object\"\r\n                  ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                  : moment(comment.createdAt).fromNow()}\r\n              </span>\r\n            </Tooltip>\r\n          }\r\n        >\r\n          {comment.responses.map((c) => (\r\n            <Comment\r\n              key={c.id}\r\n              actions={[<span key=\"comment-basic-reply-to\">Reply </span>]}\r\n              author={<a>{c.username}</a>}\r\n              avatar={<Avatar src={c.userImage} alt={c.username} />}\r\n              content={<p>{c.content}</p>}\r\n              datetime={\r\n                <Tooltip\r\n                  title={\r\n                    typeof c.createdAt === \"object\"\r\n                      ? moment\r\n                          .unix(c.createdAt.seconds)\r\n                          .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  }\r\n                >\r\n                  <span>\r\n                    {typeof c.createdAt === \"object\"\r\n                      ? moment.unix(c.createdAt.seconds).fromNow()\r\n                      : moment(c.createdAt).fromNow()}\r\n                  </span>\r\n                </Tooltip>\r\n              }\r\n            />\r\n          ))}\r\n        </Comment>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}