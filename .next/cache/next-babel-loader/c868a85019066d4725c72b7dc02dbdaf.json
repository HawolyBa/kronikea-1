{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = (id, type) => dispatch => {\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      if (type === \"show\") {\n        const relatives = doc.data().relativesArr;\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      }\n    } else {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  let charaId = \"\";\n  db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    likes: [],\n    dislikes: []\n  })).then(res => {\n    charaId = res.id;\n    const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n    if (typeof data.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"characters\").doc(charaId).update({\n          image: url\n        });\n      }).then(() => {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: charaId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        relativesArr: data.relatives.map(c => c.character_id)\n      }));\n    }).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n      relativesArr: data.relatives.map(c => c.character_id)\n    })).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteCharacter = (id, firstname, lastname) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${lastname && lastname.toLowerCase()}`;\n  const batch = db.batch();\n  db.collection(\"characters\").doc(id).delete().then(() => {\n    if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\n      return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\n    }\n  }).then(() => {\n    db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(docs => {\n      docs.forEach(doc => {\n        batch.update(db.collection(\"chapters\").doc(doc.id), {\n          characters: doc.data().characters.filter(c => c !== id)\n        });\n      });\n    }).then(() => {\n      db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(stories => {\n        stories.forEach(story => {\n          batch.update(db.collection(\"stories\").doc(story.id), {\n            mainCharacters: story.data().mainCharacters.filter(c => c !== id),\n            secondaryArr: story.data().secondaryArr.filter(c => c !== id),\n            secondaryCharacters: story.data().secondaryCharacters.filter(c => c.id !== id)\n          });\n        });\n      }).then(() => {\n        db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(characters => {\n          characters.forEach(char => {\n            batch.update(db.collection(\"characters\").doc(char.id), {\n              relativesArr: char.data().relativesArr.filter(c => c !== id),\n              relatives: char.data().relatives.filter(c => c.character_id !== id)\n            });\n          });\n        }).then(() => {\n          db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(likes => {\n            likes.forEach(like => {\n              batch.delete(db.collection(\"charactersLikes\").doc(like.id));\n            });\n            batch.commit().then(() => {\n              dispatch({\n                type: types.DELETE_CHARACTER,\n                payload: {\n                  message: \"Character deleted successfully\",\n                  loading: false,\n                  deleted: true,\n                  charaExists: false\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};\nexport const getUserCharacters = userId => dispatch => {\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = () => dispatch => {\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: types.GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","collection","doc","get","then","exists","relatives","data","relativesArr","GET_CHARACTER","payload","character","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","res","imageName","firstname","toLowerCase","lastname","ref","currentUser","uid","put","child","getDownloadURL","url","update","success","characterId","catch","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","c","character_id","deleteCharacter","DELETE_CHARACTER","batch","delete","where","docs","forEach","characters","filter","stories","story","mainCharacters","secondaryArr","secondaryCharacters","char","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","result","user","Promise","all","favUsers","GET_FAVORITE_CHARACTERS","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (userId) => (dispatch) => {\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = () => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}