{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\hooks\\\\userHooks.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport { auth, db, storage } from \"../redux/fbConfig\";\nimport { message } from \"antd\";\nconst authContext = /*#__PURE__*/createContext();\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    password: \"\",\n    email: \"\",\n    username: \"\"\n  }); // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n  const signin = (email, password) => {\n    return auth.signInWithEmailAndPassword(email, password).then(response => {\n      setErrors({\n        password: \"\",\n        email: \"\"\n      });\n      setUser(response.user);\n      return response.user;\n    }).catch(err => {\n      if (err.code === \"auth/wrong-password\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          password: err.message\n        }));\n      } else if (err.code === \"auth/user-not-found\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          email: err.message\n        }));\n      }\n    });\n  };\n\n  const signup = (email, password, username) => {\n    auth.createUserWithEmailAndPassword(email, password).then(async response => {\n      setErrors({\n        password: \"\",\n        email: \"\",\n        username: \"\"\n      });\n      setUser(_objectSpread(_objectSpread({}, response.user), {}, {\n        username: username\n      }));\n      return await db.collection(\"users\").doc(response.user.uid).set({\n        username,\n        likesCount: 0,\n        twitter: \"\",\n        facebook: \"\",\n        instagram: \"\",\n        deviantart: \"\",\n        biography: \"\",\n        badges: [],\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        image: \"\",\n        suspended: false\n      });\n    }).then(() => {\n      return auth.currentUser.sendEmailVerification();\n    }).catch(err => {\n      if (err.code === \"auth/email-already-in-use\" || err.code === \"auth/invalid-email\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          email: err.message\n        }));\n      } else if (err.code === \"auth/weak-password\") {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          password: err.message\n        }));\n      }\n    });\n  };\n\n  const signout = () => {\n    return auth.signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return auth.sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return auth.confirmPasswordReset(code, password).then(() => {\n      return true;\n    });\n  };\n\n  const verifyEmail = () => {\n    auth.currentUser.sendEmailVerification().then(() => {\n      message.info(\"Verification Email sent. Check your inbox !\");\n    }).catch(err => {\n      message.error(err.message);\n    });\n  };\n\n  const deleteAccount = () => {\n    auth.currentUser.delete(); // const batch = db.batch();\n    // const userId = auth.currentUser.uid;\n    // const allStories = db\n    //   .collection(\"stories\")\n    //   .where(\"authorId\", \"==\", userId)\n    //   .get();\n    // const allCharacters = db\n    //   .collection(\"characters\")\n    //   .where(\"authorId\", \"==\", userId)\n    //   .get();\n    // const allChapters = db\n    //   .collection(\"chapters\")\n    //   .where(\"authorId\", \"==\", userId)\n    //   .get();\n    // const allLocations = db\n    //   .collection(\"locations\")\n    //   .where(\"authorId\", \"==\", userId)\n    //   .get();\n    // const allNotifications = db\n    //   .collection(\"characters\")\n    //   .where(\"recipient\", \"==\", userId)\n    //   .get();\n    // const allUserLikes = db\n    //   .collection(\"usersLikes\")\n    //   .where(\"sender\", \"==\", userId)\n    //   .get();\n    // const allStoryLikes = db\n    //   .collection(\"storiesLikes\")\n    //   .where(\"sender\", \"==\", userId)\n    //   .get();\n    // const allCharactersLikes = db\n    //   .collection(\"charactersLikes\")\n    //   .where(\"sender\", \"==\", userId)\n    //   .get();\n    // const allComments = db\n    //   .collection(\"comments\")\n    //   .where(\"userId\", \"==\", userId)\n    //   .get();\n    // const allFollowers = db\n    //   .collection(\"usersLikes\")\n    //   .where(\"recipient\", \"==\", userId)\n    //   .get();\n    // const allStoryLiked = db\n    //   .collection(\"storiesLikes\")\n    //   .where(\"recipient\", \"==\", userId)\n    //   .get();\n    // const allCharactersLiked = db\n    //   .collection(\"charactersLikes\")\n    //   .where(\"recipient\", \"==\", userId)\n    //   .get();\n    // Promise.all([\n    //   allStories,\n    //   allCharacters,\n    //   allNotifications,\n    //   allUserLikes,\n    //   allStoryLikes,\n    //   allCharactersLikes,\n    //   allComments,\n    //   allChapters,\n    //   allLocations,\n    //   allFollowers,\n    //   allStoryLiked,\n    //   allCharactersLiked,\n    // ])\n    //   .then((res) => {\n    //     res[0].forEach((story) =>\n    //       batch.delete(db.collection(\"stories\").doc(story.id))\n    //     );\n    //     res[1].forEach((chara) =>\n    //       batch.delete(db.collection(\"characters\").doc(chara.id))\n    //     );\n    //     res[2].forEach((notif) =>\n    //       batch.delete(db.collection(\"notifications\").doc(notif.id))\n    //     );\n    //     res[3].forEach((like) =>\n    //       batch.delete(db.collection(\"usersLikes\").doc(like.id))\n    //     );\n    //     res[4].forEach((like) =>\n    //       batch.delete(db.collection(\"storiesLikes\").doc(like.id))\n    //     );\n    //     res[5].forEach((like) =>\n    //       batch.delete(db.collection(\"charactersLikes\").doc(like.id))\n    //     );\n    //     res[6].forEach((comment) =>\n    //       batch.update(db.collection(\"comments\").doc(comment.id), {\n    //         userDeleted: true,\n    //       })\n    //     );\n    //     res[7].forEach((chap) =>\n    //       batch.delete(db.collection(\"chapters\").doc(chap.id))\n    //     );\n    //     res[7].forEach((loc) =>\n    //       batch.delete(db.collection(\"locations\").doc(loc.id))\n    //     );\n    //     res[7].forEach((like) =>\n    //       batch.delete(db.collection(\"usersLikes\").doc(like.id))\n    //     );\n    //     res[8].forEach((like) =>\n    //       batch.delete(db.collection(\"storiesLikes\").doc(like.id))\n    //     );\n    //     res[9].forEach((like) =>\n    //       batch.delete(db.collection(\"charactersLikes\").doc(like.id))\n    //     );\n    //     batch.delete(db.collection(\"users\").doc(userId));\n    //     auth.currentUser\n    //       .delete()\n    //       .then(() => {\n    //         batch.commit();\n    //       })\n    //       .catch((err) => console.log(err));\n    //   })\n    //   .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n\n        if (user.uid) {\n          let username = \"\";\n          setIsLoading(false);\n          db.collection(\"users\").doc(user.uid).onSnapshot(doc => {\n            if (doc.exists) {\n              username = doc.data().username;\n              setUser(_objectSpread(_objectSpread({}, user), {}, {\n                username,\n                image: doc.data().image\n              }));\n            }\n          });\n        }\n      } else {\n        setUser(false);\n        setIsLoading(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    deleteAccount,\n    isLoading,\n    errors,\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    verifyEmail\n  };\n}","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/hooks/userHooks.js"],"names":["React","useState","useEffect","useContext","createContext","firebase","auth","db","storage","message","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","isLoading","setIsLoading","errors","setErrors","password","email","username","signin","signInWithEmailAndPassword","then","response","catch","err","code","signup","createUserWithEmailAndPassword","collection","doc","uid","set","likesCount","twitter","facebook","instagram","deviantart","biography","badges","createdAt","firestore","FieldValue","serverTimestamp","image","suspended","currentUser","sendEmailVerification","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","verifyEmail","info","error","deleteAccount","delete","unsubscribe","onAuthStateChanged","onSnapshot","exists","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport { auth, db, storage } from \"../redux/fbConfig\";\r\nimport { message } from \"antd\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [errors, setErrors] = useState({\r\n    password: \"\",\r\n    email: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n  const signin = (email, password) => {\r\n    return auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        setErrors({ password: \"\", email: \"\" });\r\n        setUser(response.user);\r\n        return response.user;\r\n      })\r\n      .catch((err) => {\r\n        if (err.code === \"auth/wrong-password\") {\r\n          setErrors({ ...errors, password: err.message });\r\n        } else if (err.code === \"auth/user-not-found\") {\r\n          setErrors({ ...errors, email: err.message });\r\n        }\r\n      });\r\n  };\r\n\r\n  const signup = (email, password, username) => {\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async (response) => {\r\n        setErrors({\r\n          password: \"\",\r\n          email: \"\",\r\n          username: \"\",\r\n        });\r\n        setUser({ ...response.user, username: username });\r\n        return await db.collection(\"users\").doc(response.user.uid).set({\r\n          username,\r\n          likesCount: 0,\r\n          twitter: \"\",\r\n          facebook: \"\",\r\n          instagram: \"\",\r\n          deviantart: \"\",\r\n          biography: \"\",\r\n          badges: [],\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          image: \"\",\r\n          suspended: false,\r\n        });\r\n      })\r\n      .then(() => {\r\n        return auth.currentUser.sendEmailVerification();\r\n      })\r\n      .catch((err) => {\r\n        if (\r\n          err.code === \"auth/email-already-in-use\" ||\r\n          err.code === \"auth/invalid-email\"\r\n        ) {\r\n          setErrors({ ...errors, email: err.message });\r\n        } else if (err.code === \"auth/weak-password\") {\r\n          setErrors({ ...errors, password: err.message });\r\n        }\r\n      });\r\n  };\r\n\r\n  const signout = () => {\r\n    return auth.signOut().then(() => {\r\n      setUser(false);\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetEmail = (email) => {\r\n    return auth.sendPasswordResetEmail(email).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const confirmPasswordReset = (code, password) => {\r\n    return auth.confirmPasswordReset(code, password).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const verifyEmail = () => {\r\n    auth.currentUser\r\n      .sendEmailVerification()\r\n      .then(() => {\r\n        message.info(\"Verification Email sent. Check your inbox !\");\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  };\r\n\r\n  const deleteAccount = () => {\r\n    auth.currentUser.delete();\r\n\r\n    // const batch = db.batch();\r\n    // const userId = auth.currentUser.uid;\r\n    // const allStories = db\r\n    //   .collection(\"stories\")\r\n    //   .where(\"authorId\", \"==\", userId)\r\n    //   .get();\r\n    // const allCharacters = db\r\n    //   .collection(\"characters\")\r\n    //   .where(\"authorId\", \"==\", userId)\r\n    //   .get();\r\n    // const allChapters = db\r\n    //   .collection(\"chapters\")\r\n    //   .where(\"authorId\", \"==\", userId)\r\n    //   .get();\r\n    // const allLocations = db\r\n    //   .collection(\"locations\")\r\n    //   .where(\"authorId\", \"==\", userId)\r\n    //   .get();\r\n    // const allNotifications = db\r\n    //   .collection(\"characters\")\r\n    //   .where(\"recipient\", \"==\", userId)\r\n    //   .get();\r\n    // const allUserLikes = db\r\n    //   .collection(\"usersLikes\")\r\n    //   .where(\"sender\", \"==\", userId)\r\n    //   .get();\r\n    // const allStoryLikes = db\r\n    //   .collection(\"storiesLikes\")\r\n    //   .where(\"sender\", \"==\", userId)\r\n    //   .get();\r\n    // const allCharactersLikes = db\r\n    //   .collection(\"charactersLikes\")\r\n    //   .where(\"sender\", \"==\", userId)\r\n    //   .get();\r\n    // const allComments = db\r\n    //   .collection(\"comments\")\r\n    //   .where(\"userId\", \"==\", userId)\r\n    //   .get();\r\n    // const allFollowers = db\r\n    //   .collection(\"usersLikes\")\r\n    //   .where(\"recipient\", \"==\", userId)\r\n    //   .get();\r\n    // const allStoryLiked = db\r\n    //   .collection(\"storiesLikes\")\r\n    //   .where(\"recipient\", \"==\", userId)\r\n    //   .get();\r\n    // const allCharactersLiked = db\r\n    //   .collection(\"charactersLikes\")\r\n    //   .where(\"recipient\", \"==\", userId)\r\n    //   .get();\r\n\r\n    // Promise.all([\r\n    //   allStories,\r\n    //   allCharacters,\r\n    //   allNotifications,\r\n    //   allUserLikes,\r\n    //   allStoryLikes,\r\n    //   allCharactersLikes,\r\n    //   allComments,\r\n    //   allChapters,\r\n    //   allLocations,\r\n    //   allFollowers,\r\n    //   allStoryLiked,\r\n    //   allCharactersLiked,\r\n    // ])\r\n    //   .then((res) => {\r\n    //     res[0].forEach((story) =>\r\n    //       batch.delete(db.collection(\"stories\").doc(story.id))\r\n    //     );\r\n    //     res[1].forEach((chara) =>\r\n    //       batch.delete(db.collection(\"characters\").doc(chara.id))\r\n    //     );\r\n    //     res[2].forEach((notif) =>\r\n    //       batch.delete(db.collection(\"notifications\").doc(notif.id))\r\n    //     );\r\n    //     res[3].forEach((like) =>\r\n    //       batch.delete(db.collection(\"usersLikes\").doc(like.id))\r\n    //     );\r\n    //     res[4].forEach((like) =>\r\n    //       batch.delete(db.collection(\"storiesLikes\").doc(like.id))\r\n    //     );\r\n    //     res[5].forEach((like) =>\r\n    //       batch.delete(db.collection(\"charactersLikes\").doc(like.id))\r\n    //     );\r\n    //     res[6].forEach((comment) =>\r\n    //       batch.update(db.collection(\"comments\").doc(comment.id), {\r\n    //         userDeleted: true,\r\n    //       })\r\n    //     );\r\n    //     res[7].forEach((chap) =>\r\n    //       batch.delete(db.collection(\"chapters\").doc(chap.id))\r\n    //     );\r\n    //     res[7].forEach((loc) =>\r\n    //       batch.delete(db.collection(\"locations\").doc(loc.id))\r\n    //     );\r\n    //     res[7].forEach((like) =>\r\n    //       batch.delete(db.collection(\"usersLikes\").doc(like.id))\r\n    //     );\r\n    //     res[8].forEach((like) =>\r\n    //       batch.delete(db.collection(\"storiesLikes\").doc(like.id))\r\n    //     );\r\n    //     res[9].forEach((like) =>\r\n    //       batch.delete(db.collection(\"charactersLikes\").doc(like.id))\r\n    //     );\r\n    //     batch.delete(db.collection(\"users\").doc(userId));\r\n    //     auth.currentUser\r\n    //       .delete()\r\n    //       .then(() => {\r\n    //         batch.commit();\r\n    //       })\r\n    //       .catch((err) => console.log(err));\r\n    //   })\r\n    //   .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        setUser(user);\r\n        if (user.uid) {\r\n          let username = \"\";\r\n          setIsLoading(false);\r\n          db.collection(\"users\")\r\n            .doc(user.uid)\r\n            .onSnapshot((doc) => {\r\n              if (doc.exists) {\r\n                username = doc.data().username;\r\n                setUser({ ...user, username, image: doc.data().image });\r\n              }\r\n            });\r\n        }\r\n      } else {\r\n        setUser(false);\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    deleteAccount,\r\n    isLoading,\r\n    errors,\r\n    user,\r\n    signin,\r\n    signup,\r\n    signout,\r\n    sendPasswordResetEmail,\r\n    confirmPasswordReset,\r\n    verifyEmail,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}