{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { message } from \"antd\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nexport const getCharacter = (id, type) => dispatch => {\n  let relArr = [];\n  let storyArr = [];\n  db.collection(\"characters\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      if (type === \"show\") {\n        const relatives = doc.data().relativesArr;\n        let relQueries = [];\n        relatives.forEach(rel => {\n          relQueries.push(db.collection(\"characters\").doc(rel).get());\n        });\n        Promise.all(relQueries).then(res => {\n          res.forEach(char => relArr.push(_objectSpread(_objectSpread({}, char.data()), {}, {\n            id: char.id,\n            relation: doc.data().relatives.find(c => c.character_id === char.id).relation\n          })));\n          const mainQuery = db.collection(\"stories\").where(\"mainCharacters\", \"array-contains\", id).get();\n          const secondaryQuery = db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get();\n          Promise.all([mainQuery, secondaryQuery]).then(result => {\n            const allStory = result[0].docs.concat(result[1].docs);\n            allStory.forEach(story => {\n              storyArr.push({\n                id: story.id,\n                title: story.data().title,\n                authorId: story.data().authorId,\n                banner: story.data().banner\n              });\n            });\n            dispatch({\n              type: types.GET_CHARACTER,\n              payload: {\n                character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id,\n                  relatives: relArr.filter(r => (auth.currentUser && auth.currentUser.uid) === r.authorId || r.public),\n                  stories: storyArr.filter(r => (auth.currentUser && auth.currentUser.uid) === r.authorId || r.public)\n                }),\n                charaExists: true,\n                loading: false\n              }\n            });\n          });\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHARACTER,\n          payload: {\n            character: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }),\n            charaExists: true,\n            loading: false\n          }\n        });\n      }\n    } else {\n      dispatch({\n        type: types.GET_CHARACTER,\n        payload: {\n          charaExists: false,\n          loading: false\n        }\n      });\n    }\n  });\n};\nexport const addCharacter = data => dispatch => {\n  dispatch({\n    type: types.ADD_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  let charaId = \"\";\n  db.collection(\"characters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    image: typeof data.image === \"string\" ? data.image : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    likes: [],\n    dislikes: []\n  })).then(res => {\n    charaId = res.id;\n    const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n    if (typeof data.image === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"characters\").doc(charaId).update({\n          image: url\n        });\n      }).then(() => {\n        message.success(\"Character added successfully\");\n        dispatch({\n          type: types.ADD_CHARACTER,\n          payload: {\n            message: \"Character added successfully\",\n            characterId: charaId,\n            loading: false\n          }\n        });\n      });\n    } else {\n      message.success(\"Character added successfully\");\n      dispatch({\n        type: types.ADD_CHARACTER,\n        payload: {\n          message: \"Character added successfully\",\n          characterId: charaId,\n          loading: false\n        }\n      });\n    }\n  }).catch(err => {\n    message.error(err.message);\n  });\n};\nexport const editCharacter = (data, id) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHARACTER,\n    payload: {\n      loadingCharacter: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${data.lastname && \"_\"}${data.lastname && data.lastname.toLowerCase()}`;\n\n  if (data.image && typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        relativesArr: data.relatives.map(c => c.character_id)\n      }));\n    }).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"characters\").doc(id).update(_objectSpread(_objectSpread({}, data), {}, {\n      relativesArr: data.relatives.map(c => c.character_id)\n    })).then(() => {\n      dispatch({\n        type: types.EDIT_CHARACTER,\n        payload: {\n          message: \"Character edited successfully\",\n          loadingCharacter: false\n        }\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteCharacter = (id, firstname, lastname) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHARACTER,\n    payload: {\n      loading: true\n    }\n  });\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${lastname && lastname.toLowerCase()}`;\n  const batch = db.batch();\n  db.collection(\"characters\").doc(id).delete().then(() => {\n    if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\n      return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\n    }\n  }).then(() => {\n    db.collection(\"chapters\").where(\"characters\", \"array-contains\", id).get().then(docs => {\n      docs.forEach(doc => {\n        batch.update(db.collection(\"chapters\").doc(doc.id), {\n          characters: doc.data().characters.filter(c => c !== id)\n        });\n      });\n    }).then(() => {\n      db.collection(\"stories\").where(\"secondaryArr\", \"array-contains\", id).get().then(stories => {\n        stories.forEach(story => {\n          batch.update(db.collection(\"stories\").doc(story.id), {\n            mainCharacters: story.data().mainCharacters.filter(c => c !== id),\n            secondaryArr: story.data().secondaryArr.filter(c => c !== id),\n            secondaryCharacters: story.data().secondaryCharacters.filter(c => c.id !== id)\n          });\n        });\n      }).then(() => {\n        db.collection(\"characters\").where(\"relativesArr\", \"array-contains\", id).get().then(characters => {\n          characters.forEach(char => {\n            batch.update(db.collection(\"characters\").doc(char.id), {\n              relativesArr: char.data().relativesArr.filter(c => c !== id),\n              relatives: char.data().relatives.filter(c => c.character_id !== id)\n            });\n          });\n        }).then(() => {\n          db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).get().then(likes => {\n            likes.forEach(like => {\n              batch.delete(db.collection(\"charactersLikes\").doc(like.id));\n            });\n            batch.commit().then(() => {\n              dispatch({\n                type: types.DELETE_CHARACTER,\n                payload: {\n                  message: \"Character deleted successfully\",\n                  loading: false,\n                  deleted: true,\n                  charaExists: false\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};\nexport const getUserCharacters = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"characters\").where(\"authorId\", \"==\", userId).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())].filter(c => id ? c.public : c);\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_CHARACTERS,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteCharacters = id => dispatch => {\n  const userId = id ? id : auth.currentUser.uid;\n  db.collection(\"charactersLikes\").where(\"senderId\", \"==\", userId).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().characterId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"characters\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_CHARACTERS,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const addCharacterToFavorite = (id, username, characterName, authorId) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a character\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"charactersLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    characterId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => {\n    if (authorId !== auth.currentUser.uid) {\n      return db.collection(\"notifications\").add({\n        type: \"characterLike\",\n        read: false,\n        recipient: authorId,\n        sender: auth.currentUser.uid,\n        characterId: id,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        message: `${username} liked your character ${characterName}`\n      });\n    }\n  }).then(() => message.success(`${characterName} added to your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const removeStoryFromFavorite = (id, characterName) => dispatch => {\n  db.collection(\"charactersLikes\").where(\"characterId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"charactersLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${characterName} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const getCharactersInStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).onSnapshot(doc => {\n    dispatch({\n      type: types.GET_STORY_CHARACTERS,\n      payload: {\n        secondaryCharacters: doc.data().secondaryCharacters,\n        mainArr: doc.data().mainCharacters\n      }\n    });\n  });\n};\nexport const submitCharaterFeedback = (info, userComment) => dispatch => {\n  const {\n    characterName\n  } = info,\n        allInfo = _objectWithoutProperties(info, [\"characterName\"]);\n\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  if (!info.content) return message.error(\"Content must not be empty\");\n  if (userComment) return message.error(\"You have already sent feedback\");\n  db.collection(\"comments\").add(_objectSpread(_objectSpread({}, allInfo), {}, {\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(() => {\n    if (auth.currentUser.uid !== info.authorId) {\n      return db.collection(\"notifications\").add({\n        type: \"characterComment\",\n        read: false,\n        recipient: info.authorId,\n        sender: auth.currentUser.uid,\n        characterId: info.characterId,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        message: `${info.username} left a feedback on your character ${characterName}`\n      });\n    }\n  }).then(() => {\n    dispatch({\n      type: types.SUBMIT_COMMENT,\n      message: \"Comment posted successfully\"\n    });\n  }).catch(err => message.error(err.message));\n};\nexport const getCharacterComments = id => dispatch => {\n  let comments = [];\n  db.collection(\"comments\").where(\"characterId\", \"==\", id).orderBy(\"createdAt\", \"asc\").get().then(comm => {\n    let userQueries = [];\n    comm.forEach(c => comments.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n      id: c.id\n    })));\n    comments.forEach(comment => {\n      userQueries.push(db.collection(\"users\").doc(comment.userId).get());\n    });\n    Promise.all(userQueries).then(res => {\n      comments = comments.map(c => _objectSpread(_objectSpread({}, c), {}, {\n        userImage: res.find(d => d.id === c.userId).data().image\n      }));\n      const userComment = auth.currentUser ? comments.find(c => c.userId === auth.currentUser.uid) : null;\n      comments = auth.currentUser ? comments.filter(c => c.userId !== auth.currentUser.uid) : comments;\n      dispatch({\n        type: types.GET_COMMENTS,\n        payload: {\n          comments,\n          userComment,\n          loadingComments: false\n        }\n      });\n    });\n  });\n};\nexport const deleteCharacterComment = id => dispatch => {\n  db.collection(\"comments\").doc(id).delete().then(() => {\n    dispatch({\n      type: types.SUBMIT_COMMENT,\n      message: \"Comment deleted successfully\"\n    });\n  });\n};\nexport const rateComment = (commentId, type) => dispatch => {\n  dispatch({\n    type: types.RATE_COMMENT,\n    rated: true\n  });\n  db.collection(\"comments\").doc(commentId).get().then(doc => {\n    const isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\n    const isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\n\n    if (type === \"like\" && isLiked || type === \"dislike\" && isDisliked) {\n      return;\n    }\n\n    if (type === \"like\") {\n      db.collection(\"comments\").doc(commentId).update({\n        dislikedBy: isDisliked ? doc.data().dislikedBy.filter(d => d !== auth.currentUser.uid) : doc.data().dislikedBy,\n        likedBy: [...doc.data().likedBy, auth.currentUser.uid]\n      }).then(() => {\n        dispatch({\n          type: types.SUBMIT_COMMENT,\n          message: \"Voilou\"\n        });\n      });\n    } else if (type === \"dislike\") {\n      db.collection(\"comments\").doc(commentId).update({\n        likedBy: isLiked ? doc.data().likedBy.filter(d => d !== auth.currentUser.uid) : doc.data().likedBy,\n        dislikedBy: [...doc.data().dislikedBy, auth.currentUser.uid]\n      }).then(() => {\n        dispatch({\n          type: types.RATE_COMMENT,\n          rated: false\n        });\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/charactersActions.js"],"names":["types","message","db","auth","storage","firebase","getCharacter","id","type","dispatch","relArr","storyArr","collection","doc","get","then","exists","relatives","data","relativesArr","relQueries","forEach","rel","push","Promise","all","res","char","relation","find","c","character_id","mainQuery","where","secondaryQuery","result","allStory","docs","concat","story","title","authorId","banner","GET_CHARACTER","payload","character","filter","r","currentUser","uid","public","stories","charaExists","loading","addCharacter","ADD_CHARACTER","charaId","add","image","createdAt","firestore","FieldValue","serverTimestamp","likesCount","likes","dislikes","imageName","firstname","toLowerCase","lastname","ref","put","child","getDownloadURL","url","update","success","characterId","catch","err","error","editCharacter","EDIT_CHARACTER","loadingCharacter","map","deleteCharacter","DELETE_CHARACTER","batch","delete","characters","mainCharacters","secondaryArr","secondaryCharacters","like","commit","deleted","getUserCharacters","userId","items","GET_USER_CHARACTERS","getFavoriteCharacters","favArr","users","user","favUsers","GET_FAVORITE_CHARACTERS","addCharacterToFavorite","username","characterName","emailVerified","sender","senderId","read","recipient","removeStoryFromFavorite","getCharactersInStory","onSnapshot","GET_STORY_CHARACTERS","mainArr","submitCharaterFeedback","info","userComment","allInfo","content","SUBMIT_COMMENT","getCharacterComments","comments","orderBy","comm","userQueries","comment","userImage","d","GET_COMMENTS","loadingComments","deleteCharacterComment","rateComment","commentId","RATE_COMMENT","rated","isLiked","likedBy","includes","isDisliked","dislikedBy"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { message } from \"antd\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\n\r\nexport const getCharacter = (id, type) => (dispatch) => {\r\n  let relArr = [];\r\n  let storyArr = [];\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        if (type === \"show\") {\r\n          const relatives = doc.data().relativesArr;\r\n          let relQueries = [];\r\n          relatives.forEach((rel) => {\r\n            relQueries.push(db.collection(\"characters\").doc(rel).get());\r\n          });\r\n          Promise.all(relQueries).then((res) => {\r\n            res.forEach((char) =>\r\n              relArr.push({\r\n                ...char.data(),\r\n                id: char.id,\r\n                relation: doc\r\n                  .data()\r\n                  .relatives.find((c) => c.character_id === char.id).relation,\r\n              })\r\n            );\r\n\r\n            const mainQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"mainCharacters\", \"array-contains\", id)\r\n              .get();\r\n\r\n            const secondaryQuery = db\r\n              .collection(\"stories\")\r\n              .where(\"secondaryArr\", \"array-contains\", id)\r\n              .get();\r\n\r\n            Promise.all([mainQuery, secondaryQuery]).then((result) => {\r\n              const allStory = result[0].docs.concat(result[1].docs);\r\n              allStory.forEach((story) => {\r\n                storyArr.push({\r\n                  id: story.id,\r\n                  title: story.data().title,\r\n                  authorId: story.data().authorId,\r\n                  banner: story.data().banner,\r\n                });\r\n              });\r\n              dispatch({\r\n                type: types.GET_CHARACTER,\r\n                payload: {\r\n                  character: {\r\n                    ...doc.data(),\r\n                    id: doc.id,\r\n                    relatives: relArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                    stories: storyArr.filter(\r\n                      (r) =>\r\n                        (auth.currentUser && auth.currentUser.uid) ===\r\n                          r.authorId || r.public\r\n                    ),\r\n                  },\r\n                  charaExists: true,\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: types.GET_CHARACTER,\r\n            payload: {\r\n              character: { ...doc.data(), id: doc.id },\r\n              charaExists: true,\r\n              loading: false,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHARACTER,\r\n          payload: {\r\n            charaExists: false,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const addCharacter = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_CHARACTER, payload: { loading: true } });\r\n\r\n  let charaId = \"\";\r\n  db.collection(\"characters\")\r\n    .add({\r\n      ...data,\r\n      image: typeof data.image === \"string\" ? data.image : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      likes: [],\r\n      dislikes: [],\r\n    })\r\n    .then((res) => {\r\n      charaId = res.id;\r\n      const imageName = `${res.id}${\"_\"}${data.firstname.toLowerCase()}${\r\n        data.lastname && \"_\"\r\n      }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n      if (typeof data.image === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.image)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"characters\")\r\n              .doc(charaId)\r\n              .update({ image: url });\r\n          })\r\n          .then(() => {\r\n            message.success(\"Character added successfully\");\r\n            dispatch({\r\n              type: types.ADD_CHARACTER,\r\n              payload: {\r\n                message: \"Character added successfully\",\r\n                characterId: charaId,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        message.success(\"Character added successfully\");\r\n        dispatch({\r\n          type: types.ADD_CHARACTER,\r\n          payload: {\r\n            message: \"Character added successfully\",\r\n            characterId: charaId,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      message.error(err.message);\r\n    });\r\n};\r\n\r\nexport const editCharacter = (data, id) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_CHARACTER, payload: { loadingCharacter: true } });\r\n\r\n  const imageName = `${id}${\"_\"}${data.firstname.toLowerCase()}${\r\n    data.lastname && \"_\"\r\n  }${data.lastname && data.lastname.toLowerCase()}`;\r\n\r\n  if (data.image && typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"characters\")\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            image: url,\r\n            relativesArr: data.relatives.map((c) => c.character_id),\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"characters\")\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        relativesArr: data.relatives.map((c) => c.character_id),\r\n      })\r\n      .then(() => {\r\n        dispatch({\r\n          type: types.EDIT_CHARACTER,\r\n          payload: {\r\n            message: \"Character edited successfully\",\r\n            loadingCharacter: false,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteCharacter = (id, firstname, lastname) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHARACTER, payload: { loading: true } });\r\n  const imageName = `${id}${\"_\"}${firstname.toLowerCase()}${lastname && \"_\"}${\r\n    lastname && lastname.toLowerCase()\r\n  }`;\r\n  const batch = db.batch();\r\n  db.collection(\"characters\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      if (storage.ref(`${auth.currentUser.uid}/${imageName}`)) {\r\n        return storage.ref(`${auth.currentUser.uid}/${imageName}`).delete();\r\n      }\r\n    })\r\n    .then(() => {\r\n      db.collection(\"chapters\")\r\n        .where(\"characters\", \"array-contains\", id)\r\n        .get()\r\n        .then((docs) => {\r\n          docs.forEach((doc) => {\r\n            batch.update(db.collection(\"chapters\").doc(doc.id), {\r\n              characters: doc.data().characters.filter((c) => c !== id),\r\n            });\r\n          });\r\n        })\r\n        .then(() => {\r\n          db.collection(\"stories\")\r\n            .where(\"secondaryArr\", \"array-contains\", id)\r\n            .get()\r\n            .then((stories) => {\r\n              stories.forEach((story) => {\r\n                batch.update(db.collection(\"stories\").doc(story.id), {\r\n                  mainCharacters: story\r\n                    .data()\r\n                    .mainCharacters.filter((c) => c !== id),\r\n                  secondaryArr: story\r\n                    .data()\r\n                    .secondaryArr.filter((c) => c !== id),\r\n                  secondaryCharacters: story\r\n                    .data()\r\n                    .secondaryCharacters.filter((c) => c.id !== id),\r\n                });\r\n              });\r\n            })\r\n            .then(() => {\r\n              db.collection(\"characters\")\r\n                .where(\"relativesArr\", \"array-contains\", id)\r\n                .get()\r\n                .then((characters) => {\r\n                  characters.forEach((char) => {\r\n                    batch.update(db.collection(\"characters\").doc(char.id), {\r\n                      relativesArr: char\r\n                        .data()\r\n                        .relativesArr.filter((c) => c !== id),\r\n                      relatives: char\r\n                        .data()\r\n                        .relatives.filter((c) => c.character_id !== id),\r\n                    });\r\n                  });\r\n                })\r\n                .then(() => {\r\n                  db.collection(\"charactersLikes\")\r\n                    .where(\"characterId\", \"==\", id)\r\n                    .get()\r\n                    .then((likes) => {\r\n                      likes.forEach((like) => {\r\n                        batch.delete(\r\n                          db.collection(\"charactersLikes\").doc(like.id)\r\n                        );\r\n                      });\r\n                      batch.commit().then(() => {\r\n                        dispatch({\r\n                          type: types.DELETE_CHARACTER,\r\n                          payload: {\r\n                            message: \"Character deleted successfully\",\r\n                            loading: false,\r\n                            deleted: true,\r\n                            charaExists: false,\r\n                          },\r\n                        });\r\n                      });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const getUserCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"characters\")\r\n    .where(\"authorId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }].filter((c) =>\r\n          id ? c.public : c\r\n        );\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_CHARACTERS, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteCharacters = (id) => (dispatch) => {\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().characterId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"characters\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_CHARACTERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const addCharacterToFavorite = (\r\n  id,\r\n  username,\r\n  characterName,\r\n  authorId\r\n) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a character\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"charactersLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      characterId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      if (authorId !== auth.currentUser.uid) {\r\n        return db.collection(\"notifications\").add({\r\n          type: \"characterLike\",\r\n          read: false,\r\n          recipient: authorId,\r\n          sender: auth.currentUser.uid,\r\n          characterId: id,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message: `${username} liked your character ${characterName}`,\r\n        });\r\n      }\r\n    })\r\n    .then(() => message.success(`${characterName} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, characterName) => (dispatch) => {\r\n  db.collection(\"charactersLikes\")\r\n    .where(\"characterId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"charactersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${characterName} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getCharactersInStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .onSnapshot((doc) => {\r\n      dispatch({\r\n        type: types.GET_STORY_CHARACTERS,\r\n        payload: {\r\n          secondaryCharacters: doc.data().secondaryCharacters,\r\n          mainArr: doc.data().mainCharacters,\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitCharaterFeedback = (info, userComment) => (dispatch) => {\r\n  const { characterName, ...allInfo } = info;\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n  if (userComment) return message.error(\"You have already sent feedback\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...allInfo,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      if (auth.currentUser.uid !== info.authorId) {\r\n        return db.collection(\"notifications\").add({\r\n          type: \"characterComment\",\r\n          read: false,\r\n          recipient: info.authorId,\r\n          sender: auth.currentUser.uid,\r\n          characterId: info.characterId,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message: `${info.username} left a feedback on your character ${characterName}`,\r\n        });\r\n      }\r\n    })\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment posted successfully\",\r\n      });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const getCharacterComments = (id) => (dispatch) => {\r\n  let comments = [];\r\n  db.collection(\"comments\")\r\n    .where(\"characterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"asc\")\r\n    .get()\r\n    .then((comm) => {\r\n      let userQueries = [];\r\n      comm.forEach((c) => comments.push({ ...c.data(), id: c.id }));\r\n      comments.forEach((comment) => {\r\n        userQueries.push(db.collection(\"users\").doc(comment.userId).get());\r\n      });\r\n\r\n      Promise.all(userQueries).then((res) => {\r\n        comments = comments.map((c) => ({\r\n          ...c,\r\n          userImage: res.find((d) => d.id === c.userId).data().image,\r\n        }));\r\n        const userComment = auth.currentUser\r\n          ? comments.find((c) => c.userId === auth.currentUser.uid)\r\n          : null;\r\n        comments = auth.currentUser\r\n          ? comments.filter((c) => c.userId !== auth.currentUser.uid)\r\n          : comments;\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            comments,\r\n            userComment,\r\n            loadingComments: false,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const deleteCharacterComment = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      dispatch({\r\n        type: types.SUBMIT_COMMENT,\r\n        message: \"Comment deleted successfully\",\r\n      });\r\n    });\r\n};\r\n\r\nexport const rateComment = (commentId, type) => (dispatch) => {\r\n  dispatch({ type: types.RATE_COMMENT, rated: true });\r\n  db.collection(\"comments\")\r\n    .doc(commentId)\r\n    .get()\r\n    .then((doc) => {\r\n      const isLiked = doc.data().likedBy.includes(auth.currentUser.uid);\r\n      const isDisliked = doc.data().dislikedBy.includes(auth.currentUser.uid);\r\n      if ((type === \"like\" && isLiked) || (type === \"dislike\" && isDisliked)) {\r\n        return;\r\n      }\r\n      if (type === \"like\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            dislikedBy: isDisliked\r\n              ? doc.data().dislikedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().dislikedBy,\r\n            likedBy: [...doc.data().likedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.SUBMIT_COMMENT, message: \"Voilou\" });\r\n          });\r\n      } else if (type === \"dislike\") {\r\n        db.collection(\"comments\")\r\n          .doc(commentId)\r\n          .update({\r\n            likedBy: isLiked\r\n              ? doc.data().likedBy.filter((d) => d !== auth.currentUser.uid)\r\n              : doc.data().likedBy,\r\n            dislikedBy: [...doc.data().dislikedBy, auth.currentUser.uid],\r\n          })\r\n          .then(() => {\r\n            dispatch({ type: types.RATE_COMMENT, rated: false });\r\n          });\r\n      }\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}