{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\components\\\\chapter\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Comment, Tooltip, Avatar, Input, Divider, Button, Row, Col, Popconfirm } from \"antd\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport Report from \"../common/Report\";\nimport React from \"react\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comments = _ref.comments,\n      auth = _ref.auth,\n      deleteComment = _ref.deleteComment,\n      submitComment = _ref.submitComment,\n      chapid = _ref.chapid,\n      storyId = _ref.storyId,\n      authorId = _ref.authorId,\n      title = _ref.title;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      commentBody = _React$useState2[0],\n      setCommentBody = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      toggleCommentForm = _React$useState4[0],\n      setToggleCommentForm = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      toggleAnswerForm = _React$useState6[0],\n      setToggleAnswerForm = _React$useState6[1];\n\n  var _React$useState7 = React.useState(\"\"),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      clickedForm = _React$useState8[0],\n      setClickedForm = _React$useState8[1];\n\n  var topComments = comments.filter(function (comm) {\n    return !comm.answer;\n  });\n  var responses = comments.filter(function (comm) {\n    return comm.answer;\n  });\n  var allComments = topComments.map(function (comm) {\n    var res = [];\n    responses.forEach(function (response) {\n      if (response.commentAnsweredId === comm.id) {\n        res.push(response);\n      }\n    });\n    return _objectSpread(_objectSpread({}, comm), {}, {\n      responses: res.sort(function (a, b) {\n        return a.createdAt && b.createdAt && typeof a.createdAt === \"object\" ? new Date(a.createdAt.seconds * 1000) - new Date(b.createdAt.seconds * 1000) : new Date(a.createdAt.seconds) - new Date(b.createdAt);\n      })\n    });\n  });\n\n  var commentToggle = function commentToggle(id) {\n    setClickedForm(id);\n    setToggleCommentForm(!toggleCommentForm);\n  };\n\n  var answerToggle = function answerToggle(id) {\n    setClickedForm(id);\n    setToggleAnswerForm(!toggleAnswerForm);\n  };\n\n  var submit = function submit() {\n    submitComment({\n      content: commentBody,\n      username: auth.user.username,\n      userId: auth.user.uid,\n      answer: false,\n      chapterId: chapid,\n      storyId: storyId,\n      title: title,\n      authorId: authorId,\n      userImage: auth.user.image\n    });\n    setCommentBody(\"\");\n  };\n\n  var submitAnswer = function submitAnswer(id, username, userId, e) {\n    e.preventDefault();\n    submitComment({\n      userId: auth.user.uid,\n      username: auth.user.username,\n      commentAnsweredId: id,\n      answeredToId: userId,\n      content: \"@\".concat(username, \" \").concat(commentBody),\n      storyId: storyId,\n      chapterId: chapid,\n      authorId: authorId,\n      title: title,\n      answeredTo: username,\n      answer: true,\n      userImage: auth.user.image\n    });\n    setCommentBody(\"\");\n    answerToggle();\n  };\n\n  return __jsx(\"section\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, auth.user ? __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Add a comment\"), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentBody,\n    onChange: function onChange(e) {\n      return setCommentBody(e.target.value);\n    },\n    autoSize: {\n      minRows: 5\n    },\n    showCount: true,\n    maxLength: 800,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    md: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: submit,\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })) : __jsx(\"p\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"You need to be logged in to post a comment.\", \" \", __jsx(Link, {\n    href: \"/auth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Click here to login or create an account !\"))), __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, comments.length, \" Comments\"), allComments.map(function (comment) {\n    !comment.userDeleted ? __jsx(React.Fragment, {\n      key: comment.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, __jsx(Comment, {\n      actions: [auth && auth.user && __jsx(\"span\", {\n        key: \"comment-basic-reply-to\",\n        onClick: commentToggle.bind(null, comment.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 19\n        }\n      }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n        title: \"Do you want to delete this comment ?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        onConfirm: function onConfirm() {\n          return deleteComment(comment.id, chapid, comment.storyId);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 19\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, \"Delete\")), auth.user && auth.user.uid !== comment.userId && __jsx(Report, {\n        type: \"comment\",\n        data: comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }\n      })],\n      author: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 19\n        }\n      }, comment.username)),\n      avatar: __jsx(Link, {\n        href: \"/profile/\".concat(comment.userId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 19\n        }\n      }, __jsx(Avatar, {\n        src: comment.userImage,\n        alt: comment.username,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }))),\n      content: __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 24\n        }\n      }, comment.content),\n      datetime: __jsx(Tooltip, {\n        title: comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 19\n        }\n      }, comment.createdAt && typeof comment.createdAt === \"object\" ? moment.unix(comment.createdAt.seconds).fromNow() : moment(comment.createdAt).fromNow())),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, comment.responses // .sort((a, b) => {\n    //   if (a.createdAt) {\n    //     if (typeof a.createdAt === \"object\") {\n    //       return (\n    //         new Date(a.createdAt.seconds * 1000) -\n    //         new Date(b.createdAt.seconds * 1000)\n    //       );\n    //     } else\n    //       return (\n    //         new Date(a.createdAt.seconds) - new Date(b.createdAt)\n    //       );\n    //   }\n    // })\n    .map(function (c) {\n      return __jsx(React.Fragment, {\n        key: c.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 19\n        }\n      }, __jsx(Comment, {\n        actions: [auth && auth.user && __jsx(\"span\", {\n          key: \"comment-basic-reply-to\",\n          onClick: answerToggle.bind(null, c.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 27\n          }\n        }, \"Reply\", \" \"), comment.userId === auth.user.uid && __jsx(Popconfirm, {\n          title: \"Do you want to delete this comment ?\",\n          okText: \"Yes\",\n          cancelText: \"No\",\n          onConfirm: function onConfirm() {\n            return deleteComment(c.id, chapid, c.storyId);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 27\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }\n        }, \"Delete\")), auth.user && auth.user.uid !== c.userId && __jsx(Report, {\n          type: \"comment\",\n          data: comment,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 27\n          }\n        })],\n        author: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 27\n          }\n        }, c.username)),\n        avatar: __jsx(Link, {\n          href: \"/profile/\".concat(c.userId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 27\n          }\n        }, __jsx(Avatar, {\n          src: c.userImage,\n          alt: c.username,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }\n        }))),\n        content: __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 32\n          }\n        }, c.content),\n        datetime: __jsx(Tooltip, {\n          title: c.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).format(\"YYYY-MM-DD HH:mm:ss\") : moment(c.createdAt).format(\"YYYY-MM-DD HH:mm:ss\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 27\n          }\n        }, c.createdAt && typeof c.createdAt === \"object\" ? moment.unix(c.createdAt.seconds).fromNow() : moment(c.createdAt).fromNow())),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }\n      }), clickedForm === c.id && toggleAnswerForm && __jsx(React.Fragment, null, __jsx(Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }\n      }, __jsx(Col, {\n        md: 24,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 27\n        }\n      }, __jsx(Input.TextArea, {\n        value: commentBody,\n        onChange: function onChange(e) {\n          return setCommentBody(e.target.value);\n        },\n        autoSize: {\n          minRows: 5\n        },\n        showCount: true,\n        maxLength: 800,\n        placeholder: \"@\".concat(c.username),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 29\n        }\n      })), __jsx(Col, {\n        md: 24,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 27\n        }\n      }, __jsx(Button, {\n        onClick: submitAnswer.bind(null, comment.id, c.username, c.userId),\n        type: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 29\n        }\n      }, \"Comment\"))), __jsx(Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 25\n        }\n      })));\n    })), clickedForm === comment.id && toggleCommentForm ? __jsx(React.Fragment, null, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 19\n      }\n    }, __jsx(Input.TextArea, {\n      value: commentBody,\n      onChange: function onChange(e) {\n        return setCommentBody(e.target.value);\n      },\n      autoSize: {\n        minRows: 5\n      },\n      showCount: true,\n      maxLength: 800,\n      placeholder: \"@\".concat(comment.username),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }\n    })), __jsx(Col, {\n      md: 24,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      onClick: submitAnswer.bind(null, comment.id, comment.username, comment.userId),\n      type: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    }, \"Comment\"))), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }\n    })) : null) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }\n    }, \"Comment deleted\");\n  }));\n};\n\n_s(Comments, \"RaZ/uPJTugk8w0Bya+6YPcCE9Qs=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/components/chapter/Comments.js"],"names":["Comment","Tooltip","Avatar","Input","Divider","Button","Row","Col","Popconfirm","Link","moment","Report","React","Comments","comments","auth","deleteComment","submitComment","chapid","storyId","authorId","title","useState","commentBody","setCommentBody","toggleCommentForm","setToggleCommentForm","toggleAnswerForm","setToggleAnswerForm","clickedForm","setClickedForm","topComments","filter","comm","answer","responses","allComments","map","res","forEach","response","commentAnsweredId","id","push","sort","a","b","createdAt","Date","seconds","commentToggle","answerToggle","submit","content","username","user","userId","uid","chapterId","userImage","image","submitAnswer","e","preventDefault","answeredToId","answeredTo","target","value","minRows","marginBottom","length","comment","userDeleted","bind","unix","format","fromNow","c"],"mappings":"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","sourcesContent":["import {\r\n  Comment,\r\n  Tooltip,\r\n  Avatar,\r\n  Input,\r\n  Divider,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport Report from \"../common/Report\";\r\nimport React from \"react\";\r\n\r\nconst Comments = ({\r\n  comments,\r\n  auth,\r\n  deleteComment,\r\n  submitComment,\r\n  chapid,\r\n  storyId,\r\n  authorId,\r\n  title,\r\n}) => {\r\n  const [commentBody, setCommentBody] = React.useState(\"\");\r\n  const [toggleCommentForm, setToggleCommentForm] = React.useState(false);\r\n  const [toggleAnswerForm, setToggleAnswerForm] = React.useState(false);\r\n  const [clickedForm, setClickedForm] = React.useState(\"\");\r\n\r\n  const topComments = comments.filter((comm) => !comm.answer);\r\n  const responses = comments.filter((comm) => comm.answer);\r\n  const allComments = topComments.map((comm) => {\r\n    let res = [];\r\n    responses.forEach((response) => {\r\n      if (response.commentAnsweredId === comm.id) {\r\n        res.push(response);\r\n      }\r\n    });\r\n    return {\r\n      ...comm,\r\n      responses: res.sort((a, b) =>\r\n        a.createdAt && b.createdAt && typeof a.createdAt === \"object\"\r\n          ? new Date(a.createdAt.seconds * 1000) -\r\n            new Date(b.createdAt.seconds * 1000)\r\n          : new Date(a.createdAt.seconds) - new Date(b.createdAt)\r\n      ),\r\n    };\r\n  });\r\n\r\n  const commentToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleCommentForm(!toggleCommentForm);\r\n  };\r\n\r\n  const answerToggle = (id) => {\r\n    setClickedForm(id);\r\n    setToggleAnswerForm(!toggleAnswerForm);\r\n  };\r\n\r\n  const submit = () => {\r\n    submitComment({\r\n      content: commentBody,\r\n      username: auth.user.username,\r\n      userId: auth.user.uid,\r\n      answer: false,\r\n      chapterId: chapid,\r\n      storyId: storyId,\r\n      title,\r\n      authorId,\r\n      userImage: auth.user.image,\r\n    });\r\n    setCommentBody(\"\");\r\n  };\r\n\r\n  const submitAnswer = (id, username, userId, e) => {\r\n    e.preventDefault();\r\n    submitComment({\r\n      userId: auth.user.uid,\r\n      username: auth.user.username,\r\n      commentAnsweredId: id,\r\n      answeredToId: userId,\r\n      content: `@${username} ${commentBody}`,\r\n      storyId: storyId,\r\n      chapterId: chapid,\r\n      authorId: authorId,\r\n      title: title,\r\n      answeredTo: username,\r\n      answer: true,\r\n      userImage: auth.user.image,\r\n    });\r\n\r\n    setCommentBody(\"\");\r\n    answerToggle();\r\n  };\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      {auth.user ? (\r\n        <>\r\n          <h3>Add a comment</h3>\r\n          <Row>\r\n            <Col md={24}>\r\n              <Input.TextArea\r\n                value={commentBody}\r\n                onChange={(e) => setCommentBody(e.target.value)}\r\n                autoSize={{ minRows: 5 }}\r\n                showCount={true}\r\n                maxLength={800}\r\n              ></Input.TextArea>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Button onClick={submit} type=\"primary\">\r\n                Comment\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n        </>\r\n      ) : (\r\n        <p style={{ marginBottom: \"20px\" }}>\r\n          You need to be logged in to post a comment.{\" \"}\r\n          <Link href={\"/auth\"}>\r\n            <a>Click here to login or create an account !</a>\r\n          </Link>\r\n        </p>\r\n      )}\r\n      <h3>{comments.length} Comments</h3>\r\n      {allComments.map((comment) => {\r\n        !comment.userDeleted ? (\r\n          <React.Fragment key={comment.id}>\r\n            <Comment\r\n              actions={[\r\n                auth && auth.user && (\r\n                  <span\r\n                    key=\"comment-basic-reply-to\"\r\n                    onClick={commentToggle.bind(null, comment.id)}\r\n                  >\r\n                    Reply{\" \"}\r\n                  </span>\r\n                ),\r\n                comment.userId === auth.user.uid && (\r\n                  <Popconfirm\r\n                    title=\"Do you want to delete this comment ?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={() =>\r\n                      deleteComment(comment.id, chapid, comment.storyId)\r\n                    }\r\n                  >\r\n                    <span>Delete</span>\r\n                  </Popconfirm>\r\n                ),\r\n                auth.user && auth.user.uid !== comment.userId && (\r\n                  <Report type=\"comment\" data={comment} />\r\n                ),\r\n              ]}\r\n              author={\r\n                <Link href={`/profile/${comment.userId}`}>\r\n                  <a>{comment.username}</a>\r\n                </Link>\r\n              }\r\n              avatar={\r\n                <Link href={`/profile/${comment.userId}`}>\r\n                  <a>\r\n                    <Avatar src={comment.userImage} alt={comment.username} />\r\n                  </a>\r\n                </Link>\r\n              }\r\n              content={<p>{comment.content}</p>}\r\n              datetime={\r\n                <Tooltip\r\n                  title={\r\n                    comment.createdAt && typeof comment.createdAt === \"object\"\r\n                      ? moment\r\n                          .unix(comment.createdAt.seconds)\r\n                          .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                      : moment(comment.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                  }\r\n                >\r\n                  <span>\r\n                    {comment.createdAt && typeof comment.createdAt === \"object\"\r\n                      ? moment.unix(comment.createdAt.seconds).fromNow()\r\n                      : moment(comment.createdAt).fromNow()}\r\n                  </span>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              {comment.responses\r\n                // .sort((a, b) => {\r\n                //   if (a.createdAt) {\r\n                //     if (typeof a.createdAt === \"object\") {\r\n                //       return (\r\n                //         new Date(a.createdAt.seconds * 1000) -\r\n                //         new Date(b.createdAt.seconds * 1000)\r\n                //       );\r\n                //     } else\r\n                //       return (\r\n                //         new Date(a.createdAt.seconds) - new Date(b.createdAt)\r\n                //       );\r\n                //   }\r\n                // })\r\n                .map((c) => (\r\n                  <React.Fragment key={c.id}>\r\n                    <Comment\r\n                      actions={[\r\n                        auth && auth.user && (\r\n                          <span\r\n                            key=\"comment-basic-reply-to\"\r\n                            onClick={answerToggle.bind(null, c.id)}\r\n                          >\r\n                            Reply{\" \"}\r\n                          </span>\r\n                        ),\r\n                        comment.userId === auth.user.uid && (\r\n                          <Popconfirm\r\n                            title=\"Do you want to delete this comment ?\"\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                            onConfirm={() =>\r\n                              deleteComment(c.id, chapid, c.storyId)\r\n                            }\r\n                          >\r\n                            <span>Delete</span>\r\n                          </Popconfirm>\r\n                        ),\r\n                        auth.user && auth.user.uid !== c.userId && (\r\n                          <Report type=\"comment\" data={comment} />\r\n                        ),\r\n                      ]}\r\n                      author={\r\n                        <Link href={`/profile/${c.userId}`}>\r\n                          <a>{c.username}</a>\r\n                        </Link>\r\n                      }\r\n                      avatar={\r\n                        <Link href={`/profile/${c.userId}`}>\r\n                          <a>\r\n                            <Avatar src={c.userImage} alt={c.username} />\r\n                          </a>\r\n                        </Link>\r\n                      }\r\n                      content={<p>{c.content}</p>}\r\n                      datetime={\r\n                        <Tooltip\r\n                          title={\r\n                            c.createdAt && typeof c.createdAt === \"object\"\r\n                              ? moment\r\n                                  .unix(c.createdAt.seconds)\r\n                                  .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                              : moment(c.createdAt).format(\r\n                                  \"YYYY-MM-DD HH:mm:ss\"\r\n                                )\r\n                          }\r\n                        >\r\n                          <span>\r\n                            {c.createdAt && typeof c.createdAt === \"object\"\r\n                              ? moment.unix(c.createdAt.seconds).fromNow()\r\n                              : moment(c.createdAt).fromNow()}\r\n                          </span>\r\n                        </Tooltip>\r\n                      }\r\n                    />\r\n                    {clickedForm === c.id && toggleAnswerForm && (\r\n                      <>\r\n                        <Row>\r\n                          <Col md={24}>\r\n                            <Input.TextArea\r\n                              value={commentBody}\r\n                              onChange={(e) => setCommentBody(e.target.value)}\r\n                              autoSize={{ minRows: 5 }}\r\n                              showCount={true}\r\n                              maxLength={800}\r\n                              placeholder={`@${c.username}`}\r\n                            ></Input.TextArea>\r\n                          </Col>\r\n                          <Col md={24}>\r\n                            <Button\r\n                              onClick={submitAnswer.bind(\r\n                                null,\r\n                                comment.id,\r\n                                c.username,\r\n                                c.userId\r\n                              )}\r\n                              type=\"primary\"\r\n                            >\r\n                              Comment\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                      </>\r\n                    )}\r\n                  </React.Fragment>\r\n                ))}\r\n            </Comment>\r\n\r\n            {clickedForm === comment.id && toggleCommentForm ? (\r\n              <>\r\n                <Row>\r\n                  <Col md={24}>\r\n                    <Input.TextArea\r\n                      value={commentBody}\r\n                      onChange={(e) => setCommentBody(e.target.value)}\r\n                      autoSize={{ minRows: 5 }}\r\n                      showCount={true}\r\n                      maxLength={800}\r\n                      placeholder={`@${comment.username}`}\r\n                    ></Input.TextArea>\r\n                  </Col>\r\n                  <Col md={24}>\r\n                    <Button\r\n                      onClick={submitAnswer.bind(\r\n                        null,\r\n                        comment.id,\r\n                        comment.username,\r\n                        comment.userId\r\n                      )}\r\n                      type=\"primary\"\r\n                    >\r\n                      Comment\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n                <Divider />\r\n              </>\r\n            ) : null}\r\n          </React.Fragment>\r\n        ) : (\r\n          <div>Comment deleted</div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}