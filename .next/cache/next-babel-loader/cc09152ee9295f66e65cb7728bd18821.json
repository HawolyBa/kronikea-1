{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\"; // STORIES\n\nexport var getStory = function getStory(id) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        var main = doc.data().mainCharacters;\n        var secondary = doc.data().secondaryCharacters;\n        var mainArr = [];\n        var secondaryArr = [];\n        var mainQuery = main.map(function (c) {\n          return db.collection(\"characters\").doc(c).get();\n        });\n        var secondaryQuery = secondary.map(function (c) {\n          return db.collection(\"characters\").doc(c.id).get();\n        });\n        var mainRes = Promise.all(mainQuery);\n        var secondaryRes = Promise.all(secondaryQuery);\n        Promise.all([mainRes, secondaryRes]).then(function (result) {\n          result[0].forEach(function (docu) {\n            mainArr = [].concat(_toConsumableArray(mainArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          result[1].forEach(function (docu) {\n            secondaryArr = [].concat(_toConsumableArray(secondaryArr), [_objectSpread(_objectSpread({}, docu.data()), {}, {\n              id: docu.id\n            })]);\n          });\n          dispatch({\n            type: types.GET_STORY,\n            storyExists: true,\n            payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id,\n              secondaryCharacters: secondaryArr,\n              mainCharacters: mainArr,\n              mainArr: doc.data().mainCharacters\n            })\n          });\n        });\n      } else {\n        dispatch({\n          type: types.DISPATCH_ERROR,\n          storyExists: false\n        });\n      }\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var addStory = function addStory(data) {\n  return function (dispatch) {\n    dispatch({\n      type: types.ADD_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var storyId = \"\";\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      secondaryCharacters: [],\n      secondaryArr: [],\n      featured: false,\n      note: 0\n    })).then(function (res) {\n      storyId = res.id;\n\n      if (typeof data.banner === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n          return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n        }).then(function (url) {\n          return db.collection(\"stories\").doc(storyid).update({\n            banner: url\n          });\n        }).then(function () {\n          dispatch({\n            type: types.ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: res.id,\n              loading: false\n            }\n          });\n        });\n      } else {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }\n    });\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n          authorId: auth.currentUser.uid,\n          authorName: data.authorName,\n          oneShot: false,\n          banner: url,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          likesCount: 0,\n          chaptersCount: 0,\n          secondaryCharacters: [],\n          secondaryArr: [],\n          featured: false,\n          note: 0\n        }));\n      }).then(function (res) {\n        message.success(\"Story added successfully\");\n        setTimeout(function () {\n          Router.push(\"/story/\".concat(res.id));\n          dispatch({\n            type: types.ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: res.id,\n              loading: false\n            }\n          });\n        }, 1000);\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        featured: false,\n        secondaryCharacters: [],\n        secondaryArr: [],\n        note: 0\n      })).then(function (res) {\n        message.success(\"Story added successfully\");\n        setTimeout(function () {\n          Router.push(\"/story/\".concat(res.id));\n          dispatch({\n            type: types.ADD_STORY,\n            payload: {\n              message: \"Story added successfully\",\n              storyId: res.id,\n              loading: false\n            }\n          });\n        }, 1000);\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var editStory = function editStory(data, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_STORY,\n      payload: {\n        loadingStory: true\n      }\n    });\n    var imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.banner).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n          banner: url\n        }));\n      }).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            message.success(\"Story added successfully\");\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(function () {\n        db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n          var locationQuery = [];\n          docs.forEach(function (doc) {\n            locationQuery = [].concat(_toConsumableArray(locationQuery), [db.collection(\"locations\").doc(doc.id).update({\n              storyTitle: data.title\n            })]);\n          });\n          Promise.all(locationQuery).then(function () {\n            message.success(\"Story added successfully\");\n            dispatch({\n              type: types.EDIT_STORY,\n              payload: {\n                message: \"Story edited successfully\"\n              }\n            });\n          });\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var deleteStory = function deleteStory(id) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_STORY,\n      payload: {\n        loading: true\n      }\n    });\n    var batch = db.batch();\n    batch[\"delete\"](db.collection(\"stories\").doc(id));\n    var chaptersToDelete = db.collection(\"chapters\").where(\"storyId\", \"==\", id).get();\n    var likesToDelete = db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).get();\n    var locationsToDelete = db.collection(\"locations\").where(\"storyId\", \"==\", id).get();\n    Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(function (res) {\n      res[0].forEach(function (chap) {\n        batch[\"delete\"](db.collection(\"chapters\").doc(chap.id));\n      });\n      res[1].forEach(function (like) {\n        batch[\"delete\"](db.collection(\"storiesLikes\").doc(like.id));\n      });\n      res[2].forEach(function (loc) {\n        batch[\"delete\"](db.collection(\"locations\").doc(loc.id));\n      });\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_STORY,\n          payload: {\n            message: \"Story deleted successfully\"\n          }\n        });\n      });\n    });\n  };\n};\nexport var getUserStories = function getUserStories() {\n  return function (dispatch) {\n    db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var items = [];\n      docs.forEach(function (doc) {\n        items = [].concat(_toConsumableArray(items), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      return items;\n    }).then(function (items) {\n      dispatch({\n        type: types.GET_USER_STORIES,\n        payload: items\n      });\n    });\n  };\n};\nexport var getFavoriteStories = function getFavoriteStories() {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().storyId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"stories\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_STORIES,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var isStoryFavorite = function isStoryFavorite(storyId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs[0] ? true : false;\n        return dispatch({\n          type: types.IS_STORY_FAVORITE,\n          payload: answer,\n          loadingFav: false\n        });\n      });\n    }\n  };\n};\nexport var addStoryToFavorite = function addStoryToFavorite(id, username, storyTitle) {\n  return function (dispatch) {\n    // if (isFavorite) return message.warning(\"You've already liked this story\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"storiesLikes\").add({\n      sender: username,\n      senderId: auth.currentUser.uid,\n      storyId: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" added to your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var removeStoryFromFavorite = function removeStoryFromFavorite(id, storyTitle) {\n  return function (dispatch) {\n    db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"\".concat(storyTitle, \" removed from your favorites\"));\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var getStoryCharacters = function getStoryCharacters() {\n  return function (dispatch) {};\n}; // CHAPTERs\n\nexport var addChapter = function addChapter(data, secondaryCharacters) {\n  return function (dispatch) {\n    var chapId = \"\";\n    dispatch({\n      type: types.ADD_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      commentsCount: 0,\n      note: 0,\n      voters: [],\n      votesCount: 0,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function (res) {\n      chapId = res.id;\n      db.collection(\"stories\").doc(data.storyId).update({\n        secondaryCharacters: secondaryCharacters,\n        secondaryArr: secondaryCharacters.map(function (c) {\n          return c.id;\n        })\n      }).then(function () {\n        dispatch({\n          type: types.ADD_CHAPTER,\n          payload: {\n            message: \"Chapter added successfully\",\n            chapId: chapId,\n            loading: false\n          }\n        });\n      });\n    });\n  };\n};\nexport var editChapter = function editChapter(data, storyId, chapid, secondaryCharacters) {\n  return function (dispatch) {\n    dispatch({\n      type: types.EDIT_CHAPTER,\n      payload: {\n        loading: true\n      }\n    });\n    db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(function () {\n      db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n        db.collection(\"stories\").doc(storyId).update({\n          secondaryCharacters: secondaryCharacters,\n          secondaryArr: secondaryCharacters.map(function (c) {\n            return c.id;\n          })\n        }).then(function () {\n          dispatch({\n            type: types.EDIT_CHAPTER,\n            payload: {\n              message: \"Chapter edited successfully\",\n              loading: false\n            }\n          });\n        });\n      });\n    });\n  };\n};\nexport var deleteChapter = function deleteChapter(id, storyId) {\n  return function (dispatch) {\n    dispatch({\n      type: types.DELETE_CHAPTER,\n      payload: {\n        loadingChapter: true\n      }\n    });\n    var batch = db.batch();\n    var commentsToDelete = db.collection(\"chapters\").where(\"chapterId\", \"==\", id).get();\n    var chapter = db.collection(\"chapters\").doc(id).get();\n    var story = db.collection(\"stories\").doc(storyId).get();\n    Promise.all([chapter, story, commentsToDelete]).then(function (res) {\n      var charactersFromChapter = res[0].data().characters;\n      var charactersFromStory = res[1].data().secondaryCharacters;\n      var newArr = charactersFromStory.map(function (c) {\n        if (charactersFromChapter.includes(c.id)) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            times: c.times - 1\n          });\n        } else {\n          return c;\n        }\n      }).filter(function (c) {\n        return c.times > 0;\n      });\n      batch.update(db.collection(\"stories\").doc(storyId), {\n        secondaryCharacters: newArr,\n        secondaryArr: newArr.map(function (c) {\n          return c.id;\n        })\n      });\n      res[2].forEach(function (comm) {\n        return batch[\"delete\"](db.collection(\"comments\").doc(comm.id));\n      });\n      batch[\"delete\"](db.collection(\"chapters\").doc(id));\n      batch.commit().then(function () {\n        dispatch({\n          type: types.DELETE_CHAPTER,\n          payload: {\n            message: \"Chapter deleted successfully\",\n            loadingChapter: false\n          }\n        });\n      });\n    });\n  };\n};\nexport var getChapter = function getChapter(storyId, id, type) {\n  return function (dispatch) {\n    db.collection(\"stories\").doc(storyId).get().then(function (doc) {\n      if (doc.exists) {\n        db.collection(\"chapters\").doc(id).get().then(function (chap) {\n          if (chap.exists) {\n            if (type === \"show\") {\n              var characters = [];\n              var locations = [];\n              var charaQuery = [];\n              var locQuery = [];\n              var charactersInChaper = chap.data().characters;\n              var locationsInChaper = chap.data().locations;\n              charactersInChaper.forEach(function (_char) {\n                charaQuery.push(db.collection(\"characters\").doc(_char).get());\n              });\n              locationsInChaper.forEach(function (loc) {\n                locQuery.push(db.collection(\"locations\").doc(loc).get());\n              });\n              charaQuery = Promise.all(charaQuery);\n              locQuery = Promise.all(locQuery);\n              Promise.all([charaQuery, locQuery]).then(function (res) {\n                res[0].forEach(function (c) {\n                  characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                    id: c.id\n                  }));\n                });\n                res[1].forEach(function (l) {\n                  locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                    id: l.id\n                  }));\n                });\n                dispatch({\n                  type: types.GET_CHAPTER,\n                  payload: {\n                    chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                      id: chap.id,\n                      locations: locations,\n                      characters: characters,\n                      \"public\": doc.data()[\"public\"],\n                      storyTitle: doc.data().title\n                    }),\n                    chapterExists: true\n                  }\n                });\n              });\n            } else {\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    \"public\": doc.data()[\"public\"]\n                  }),\n                  chapterExists: true\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapterExists: false\n              }\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: types.GET_CHAPTER,\n          payload: {\n            chapterExists: false\n          }\n        });\n      }\n    });\n  };\n};\nexport var getChapters = function getChapters(id) {\n  return function (dispatch) {\n    db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(function (docs) {\n      var arr = [];\n      docs.forEach(function (doc) {\n        arr.push({\n          authorId: doc.data().authorId,\n          id: doc.id,\n          createdAt: doc.data().createdAt,\n          number: doc.data().number,\n          title: doc.data().title,\n          commentsCount: doc.data().commentsCount\n        });\n      });\n      dispatch({\n        type: types.GET_CHAPTERS,\n        payload: arr\n      });\n    });\n  };\n}; // LOCATIONS\n\nexport var addLocation = function addLocation(data) {\n  return function (dispatch) {\n    console.log(\"coucou\");\n    dispatch({\n      type: types.ADD_LOCATION,\n      payload: {\n        loadingLoc: true\n      }\n    });\n    var imageName = data.name.toLowerCase().split(\" \").join(\"_\");\n\n    if (typeof data.image === \"object\") {\n      storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(data.image).then(function () {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(function (url) {\n        return db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n          image: url,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        }));\n      }).then(function (res) {\n        return dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    } else {\n      db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      })).then(function (res) {\n        return dispatch({\n          type: types.ADD_LOCATION,\n          payload: {\n            message: \"Location added successfully\",\n            locId: res.id,\n            loadingLoc: false\n          }\n        });\n      })[\"catch\"](function (err) {\n        message.error(err.message);\n      });\n    }\n  };\n};\nexport var editLocation = function editLocation(data) {\n  return function (dispatch) {};\n};\nexport var getLocation = function getLocation(id) {\n  return function (dispatch) {\n    db.collection(\"locations\").doc(id).get().then(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: types.GET_LOCATION,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }),\n          locationExists: true\n        });\n      } else {\n        dispatch({\n          type: types.GET_LOCATION,\n          locationExists: false\n        });\n      }\n    });\n  };\n};\nexport var getUserLocations = function getUserLocations() {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(function (docs) {\n      var locations = [];\n      docs.forEach(function (doc) {\n        locations = [].concat(_toConsumableArray(locations), [_objectSpread({\n          id: doc.id\n        }, doc.data())]);\n      });\n      dispatch({\n        type: types.GET_USER_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n};\nexport var getStoryLocations = function getStoryLocations(storyId) {\n  return function (dispatch) {\n    db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(function (docs) {\n      var locations = docs.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        });\n      });\n      dispatch({\n        type: types.GET_STORY_LOCATIONS,\n        payload: locations\n      });\n    });\n  };\n}; // COMMENTS\n\nexport var getComments = function getComments(id) {\n  return function (dispatch) {\n    db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(function (snap) {\n      var comments = snap.docs.map(function (comment) {\n        return _objectSpread(_objectSpread({}, comment.data()), {}, {\n          id: comment.id\n        });\n      });\n      var queries = [];\n      comments.forEach(function (comm) {\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\n      });\n      Promise.all(queries).then(function (res) {\n        comments = comments.map(function (comm) {\n          return _objectSpread(_objectSpread({}, comm), {}, {\n            userImage: res.find(function (d) {\n              return d.id === comm.userId;\n            }).data().image\n          });\n        });\n        dispatch({\n          type: types.GET_COMMENTS,\n          payload: {\n            loadingComments: false,\n            comments: comments\n          }\n        });\n      });\n    });\n  };\n};\nexport var submitComment = function submitComment(info) {\n  return function (dispatch) {\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    if (!info.content) return message.error(\"Content must not be empty\");\n    db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(function () {\n      message.success(\"Comment posted successfully\");\n      db.collection(\"chapters\").doc(info.chapterId).get().then(function (chap) {\n        db.collection(\"chapters\").doc(info.chapterId).update({\n          commentsCount: chap.data().commentsCount + 1\n        });\n      });\n    })[\"catch\"](function (err) {\n      return message.error(err.message);\n    });\n  };\n};\nexport var deleteComment = function deleteComment(id, chapid) {\n  return function (dispatch) {\n    db.collection(\"chapters\").doc(chapid).get().then(function (chap) {\n      db.collection(\"chapters\").doc(chapid).update({\n        commentsCount: chap.data().commentsCount - 1\n      }).then(function () {\n        db.collection(\"comments\").doc(id)[\"delete\"]();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","err","console","log","addStory","ADD_STORY","loading","storyId","imageName","title","toLowerCase","split","join","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","ref","put","child","getDownloadURL","url","storyid","update","success","setTimeout","push","error","editStory","EDIT_STORY","loadingStory","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","batch","chaptersToDelete","likesToDelete","locationsToDelete","chap","like","loc","commit","getUserStories","items","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","removeStoryFromFavorite","getStoryCharacters","addChapter","chapId","ADD_CHAPTER","commentsCount","voters","votesCount","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","commentsToDelete","chapter","story","charactersFromChapter","characters","charactersFromStory","newArr","includes","times","filter","comm","getChapter","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","char","l","GET_CHAPTER","chapterExists","getChapters","orderBy","arr","number","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","name","image","locId","editLocation","getLocation","GET_LOCATION","locationExists","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","userId","userImage","find","d","GET_COMMENTS","loadingComments","submitComment","info","content","chapterId","deleteComment"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyid)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: res.id,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          secondaryCharacters: [],\r\n          secondaryArr: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        secondaryArr: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              message.success(\"Story added successfully\");\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              message.success(\"Story added successfully\");\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  batch.delete(db.collection(\"stories\").doc(id));\r\n  const chaptersToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const likesToDelete = db\r\n    .collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const locationsToDelete = db\r\n    .collection(\"locations\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(\r\n    (res) => {\r\n      res[0].forEach((chap) => {\r\n        batch.delete(db.collection(\"chapters\").doc(chap.id));\r\n      });\r\n      res[1].forEach((like) => {\r\n        batch.delete(db.collection(\"storiesLikes\").doc(like.id));\r\n      });\r\n      res[2].forEach((loc) => {\r\n        batch.delete(db.collection(\"locations\").doc(loc.id));\r\n      });\r\n      batch.commit().then(() => {\r\n        dispatch({\r\n          type: types.DELETE_STORY,\r\n          payload: {\r\n            message: \"Story deleted successfully\",\r\n          },\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  let chapId = \"\";\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  return db\r\n    .collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      chapId = res.id;\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .update({\r\n          secondaryCharacters,\r\n          secondaryArr: secondaryCharacters.map((c) => c.id),\r\n        })\r\n        .then(() => {\r\n          dispatch({\r\n            type: types.ADD_CHAPTER,\r\n            payload: {\r\n              message: \"Chapter added successfully\",\r\n              chapId: chapId,\r\n              loading: false,\r\n            },\r\n          });\r\n        });\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  const batch = db.batch();\r\n\r\n  const commentsToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .get();\r\n  const chapter = db.collection(\"chapters\").doc(id).get();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n\r\n  Promise.all([chapter, story, commentsToDelete]).then((res) => {\r\n    const charactersFromChapter = res[0].data().characters;\r\n    const charactersFromStory = res[1].data().secondaryCharacters;\r\n    let newArr = charactersFromStory\r\n      .map((c) => {\r\n        if (charactersFromChapter.includes(c.id)) {\r\n          return { ...c, times: c.times - 1 };\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n      .filter((c) => c.times > 0);\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      secondaryCharacters: newArr,\r\n      secondaryArr: newArr.map((c) => c.id),\r\n    });\r\n    res[2].forEach((comm) =>\r\n      batch.delete(db.collection(\"comments\").doc(comm.id))\r\n    );\r\n    batch.delete(db.collection(\"chapters\").doc(id));\r\n    batch.commit().then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery]).then((res) => {\r\n                  res[0].forEach((c) => {\r\n                    characters.push({ ...c.data(), id: c.id });\r\n                  });\r\n                  res[1].forEach((l) => {\r\n                    locations.push({ ...l.data(), id: l.id });\r\n                  });\r\n                  dispatch({\r\n                    type: types.GET_CHAPTER,\r\n                    payload: {\r\n                      chapter: {\r\n                        ...chap.data(),\r\n                        id: chap.id,\r\n                        locations,\r\n                        characters,\r\n                        public: doc.data().public,\r\n                        storyTitle: doc.data().title,\r\n                      },\r\n                      chapterExists: true,\r\n                    },\r\n                  });\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  console.log(\"coucou\");\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n\r\n  const imageName = data.name.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"locations\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n      })\r\n      .then((res) =>\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"locations\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then((res) =>\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      message.success(\"Comment posted successfully\");\r\n      db.collection(\"chapters\")\r\n        .doc(info.chapterId)\r\n        .get()\r\n        .then((chap) => {\r\n          db.collection(\"chapters\")\r\n            .doc(info.chapterId)\r\n            .update({ commentsCount: chap.data().commentsCount + 1 });\r\n        });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id, chapid) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .get()\r\n    .then((chap) => {\r\n      db.collection(\"chapters\")\r\n        .doc(chapid)\r\n        .update({ commentsCount: chap.data().commentsCount - 1 })\r\n        .then(() => {\r\n          db.collection(\"comments\").doc(id).delete();\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}