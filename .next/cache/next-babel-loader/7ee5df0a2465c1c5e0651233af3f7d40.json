{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../../utils/constants\";\nimport { db, auth, storage } from \"../fbConfig\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nimport Router from \"next/router\"; // STORIES\n\nexport const getStory = id => dispatch => {\n  db.collection(\"stories\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      const main = doc.data().mainCharacters;\n      const secondary = doc.data().secondaryCharacters;\n      let mainArr = [];\n      let secondaryArr = [];\n      const mainQuery = main.map(c => db.collection(\"characters\").doc(c).get());\n      const secondaryQuery = secondary.map(c => db.collection(\"characters\").doc(c.id).get());\n      const mainRes = Promise.all(mainQuery);\n      const secondaryRes = Promise.all(secondaryQuery);\n      Promise.all([mainRes, secondaryRes]).then(result => {\n        result[0].forEach(docu => {\n          mainArr = [...mainArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        result[1].forEach(docu => {\n          secondaryArr = [...secondaryArr, _objectSpread(_objectSpread({}, docu.data()), {}, {\n            id: docu.id\n          })];\n        });\n        dispatch({\n          type: types.GET_STORY,\n          storyExists: true,\n          payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id,\n            secondaryCharacters: secondaryArr,\n            mainCharacters: mainArr,\n            mainArr: doc.data().mainCharacters\n          })\n        });\n      });\n    } else {\n      dispatch({\n        type: types.DISPATCH_ERROR,\n        storyExists: false\n      });\n    }\n  }).catch(err => console.log(err));\n};\nexport const addStory = data => dispatch => {\n  dispatch({\n    type: types.ADD_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  let storyId = \"\";\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n  db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    authorName: data.authorName,\n    oneShot: false,\n    banner: typeof data.banner === \"string\" ? data.banner : \"\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    likesCount: 0,\n    chaptersCount: 0,\n    secondaryCharacters: [],\n    secondaryArr: [],\n    featured: false,\n    note: 0\n  })).then(res => {\n    storyId = res.id;\n\n    if (typeof data.banner === \"object\") {\n      storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n        return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n      }).then(url => {\n        return db.collection(\"stories\").doc(storyid).update({\n          banner: url\n        });\n      }).then(() => {\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: types.ADD_STORY,\n        payload: {\n          message: \"Story added successfully\",\n          storyId: res.id,\n          loading: false\n        }\n      });\n    }\n  });\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n        authorId: auth.currentUser.uid,\n        authorName: data.authorName,\n        oneShot: false,\n        banner: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        likesCount: 0,\n        chaptersCount: 0,\n        secondaryCharacters: [],\n        secondaryArr: [],\n        featured: false,\n        note: 0\n      }));\n    }).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").add(_objectSpread(_objectSpread({}, data), {}, {\n      authorId: auth.currentUser.uid,\n      authorName: data.authorName,\n      oneShot: false,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      likesCount: 0,\n      chaptersCount: 0,\n      featured: false,\n      secondaryCharacters: [],\n      secondaryArr: [],\n      note: 0\n    })).then(res => {\n      message.success(\"Story added successfully\");\n      setTimeout(() => {\n        Router.push(`/story/${res.id}`);\n        dispatch({\n          type: types.ADD_STORY,\n          payload: {\n            message: \"Story added successfully\",\n            storyId: res.id,\n            loading: false\n          }\n        });\n      }, 1000);\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editStory = (data, storyId) => dispatch => {\n  dispatch({\n    type: types.EDIT_STORY,\n    payload: {\n      loadingStory: true\n    }\n  });\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.banner === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.banner).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"stories\").doc(storyId).update(_objectSpread(_objectSpread({}, data), {}, {\n        banner: url\n      }));\n    }).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          message.success(\"Story added successfully\");\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"stories\").doc(storyId).update(_objectSpread({}, data)).then(() => {\n      db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n        let locationQuery = [];\n        docs.forEach(doc => {\n          locationQuery = [...locationQuery, db.collection(\"locations\").doc(doc.id).update({\n            storyTitle: data.title\n          })];\n        });\n        Promise.all(locationQuery).then(() => {\n          message.success(\"Story added successfully\");\n          dispatch({\n            type: types.EDIT_STORY,\n            payload: {\n              message: \"Story edited successfully\"\n            }\n          });\n        });\n      });\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const deleteStory = id => dispatch => {\n  dispatch({\n    type: types.DELETE_STORY,\n    payload: {\n      loading: true\n    }\n  });\n  const batch = db.batch();\n  batch.delete(db.collection(\"stories\").doc(id));\n  const chaptersToDelete = db.collection(\"chapters\").where(\"storyId\", \"==\", id).get();\n  const likesToDelete = db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).get();\n  const locationsToDelete = db.collection(\"locations\").where(\"storyId\", \"==\", id).get();\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(res => {\n    res[0].forEach(chap => {\n      batch.delete(db.collection(\"chapters\").doc(chap.id));\n    });\n    res[1].forEach(like => {\n      batch.delete(db.collection(\"storiesLikes\").doc(like.id));\n    });\n    res[2].forEach(loc => {\n      batch.delete(db.collection(\"locations\").doc(loc.id));\n    });\n    batch.commit().then(() => {\n      dispatch({\n        type: types.DELETE_STORY,\n        payload: {\n          message: \"Story deleted successfully\"\n        }\n      });\n    });\n  });\n};\nexport const getUserStories = () => dispatch => {\n  db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let items = [];\n    docs.forEach(doc => {\n      items = [...items, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    return items;\n  }).then(items => {\n    dispatch({\n      type: types.GET_USER_STORIES,\n      payload: items\n    });\n  });\n};\nexport const getFavoriteStories = () => dispatch => {\n  db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().storyId];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"stories\").doc(user).get());\n    Promise.all(result).then(res => {\n      let favUsers = [];\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n      dispatch({\n        type: types.GET_FAVORITE_STORIES,\n        payload: favUsers\n      });\n    });\n  });\n};\nexport const isStoryFavorite = storyId => dispatch => {\n  if (auth.currentUser) {\n    db.collection(\"storiesLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).where(\"storyId\", \"==\", storyId).onSnapshot(snapshot => {\n      const answer = snapshot.docs[0] ? true : false;\n      return dispatch({\n        type: types.IS_STORY_FAVORITE,\n        payload: answer,\n        loadingFav: false\n      });\n    });\n  }\n};\nexport const addStoryToFavorite = (id, username, storyTitle) => dispatch => {\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\n  if (!auth.currentUser) return message.error(\"You need to be logged in to like a story\");\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  db.collection(\"storiesLikes\").add({\n    sender: username,\n    senderId: auth.currentUser.uid,\n    storyId: id,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(() => message.success(`${storyTitle} added to your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const removeStoryFromFavorite = (id, storyTitle) => dispatch => {\n  db.collection(\"storiesLikes\").where(\"storyId\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(data => {\n    return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\n  }).then(() => message.success(`${storyTitle} removed from your favorites`)).catch(err => message.error(\"There has been a problem\"));\n};\nexport const getStoryCharacters = () => dispatch => {}; // CHAPTERs\n\nexport const addChapter = (data, secondaryCharacters) => dispatch => {\n  let chapId = \"\";\n  dispatch({\n    type: types.ADD_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  return db.collection(\"chapters\").add(_objectSpread(_objectSpread({}, data), {}, {\n    authorId: auth.currentUser.uid,\n    commentsCount: 0,\n    note: 0,\n    voters: [],\n    votesCount: 0,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(res => {\n    chapId = res.id;\n    db.collection(\"stories\").doc(data.storyId).update({\n      secondaryCharacters,\n      secondaryArr: secondaryCharacters.map(c => c.id)\n    }).then(() => {\n      dispatch({\n        type: types.ADD_CHAPTER,\n        payload: {\n          message: \"Chapter added successfully\",\n          chapId: chapId,\n          loading: false\n        }\n      });\n    });\n  });\n};\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => dispatch => {\n  dispatch({\n    type: types.EDIT_CHAPTER,\n    payload: {\n      loading: true\n    }\n  });\n  db.collection(\"chapters\").doc(chapid).update(_objectSpread({}, data)).then(() => {\n    db.collection(\"stories\").doc(storyId).get().then(doc => {\n      db.collection(\"stories\").doc(storyId).update({\n        secondaryCharacters,\n        secondaryArr: secondaryCharacters.map(c => c.id)\n      }).then(() => {\n        dispatch({\n          type: types.EDIT_CHAPTER,\n          payload: {\n            message: \"Chapter edited successfully\",\n            loading: false\n          }\n        });\n      });\n    });\n  });\n};\nexport const deleteChapter = (id, storyId) => dispatch => {\n  dispatch({\n    type: types.DELETE_CHAPTER,\n    payload: {\n      loadingChapter: true\n    }\n  });\n  const batch = db.batch();\n  const commentsToDelete = db.collection(\"chapters\").where(\"chapterId\", \"==\", id).get();\n  const chapter = db.collection(\"chapters\").doc(id).get();\n  const story = db.collection(\"stories\").doc(storyId).get();\n  Promise.all([chapter, story, commentsToDelete]).then(res => {\n    const charactersFromChapter = res[0].data().characters;\n    const charactersFromStory = res[1].data().secondaryCharacters;\n    let newArr = charactersFromStory.map(c => {\n      if (charactersFromChapter.includes(c.id)) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          times: c.times - 1\n        });\n      } else {\n        return c;\n      }\n    }).filter(c => c.times > 0);\n    batch.update(db.collection(\"stories\").doc(storyId), {\n      secondaryCharacters: newArr,\n      secondaryArr: newArr.map(c => c.id)\n    });\n    res[2].forEach(comm => batch.delete(db.collection(\"comments\").doc(comm.id)));\n    batch.delete(db.collection(\"chapters\").doc(id));\n    batch.commit().then(() => {\n      dispatch({\n        type: types.DELETE_CHAPTER,\n        payload: {\n          message: \"Chapter deleted successfully\",\n          loadingChapter: false\n        }\n      });\n    });\n  });\n};\nexport const getChapter = (storyId, id, type) => dispatch => {\n  db.collection(\"stories\").doc(storyId).get().then(doc => {\n    if (doc.exists) {\n      db.collection(\"chapters\").doc(id).get().then(chap => {\n        if (chap.exists) {\n          if (type === \"show\") {\n            let characters = [];\n            let locations = [];\n            let charaQuery = [];\n            let locQuery = [];\n            const charactersInChaper = chap.data().characters;\n            const locationsInChaper = chap.data().locations;\n            charactersInChaper.forEach(char => {\n              charaQuery.push(db.collection(\"characters\").doc(char).get());\n            });\n            locationsInChaper.forEach(loc => {\n              locQuery.push(db.collection(\"locations\").doc(loc).get());\n            });\n            charaQuery = Promise.all(charaQuery);\n            locQuery = Promise.all(locQuery);\n            Promise.all([charaQuery, locQuery]).then(res => {\n              res[0].forEach(c => {\n                characters.push(_objectSpread(_objectSpread({}, c.data()), {}, {\n                  id: c.id\n                }));\n              });\n              res[1].forEach(l => {\n                locations.push(_objectSpread(_objectSpread({}, l.data()), {}, {\n                  id: l.id\n                }));\n              });\n              dispatch({\n                type: types.GET_CHAPTER,\n                payload: {\n                  chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                    id: chap.id,\n                    locations,\n                    characters,\n                    public: doc.data().public,\n                    storyTitle: doc.data().title\n                  }),\n                  chapterExists: true\n                }\n              });\n            });\n          } else {\n            dispatch({\n              type: types.GET_CHAPTER,\n              payload: {\n                chapter: _objectSpread(_objectSpread({}, chap.data()), {}, {\n                  id: chap.id,\n                  public: doc.data().public\n                }),\n                chapterExists: true\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: types.GET_CHAPTER,\n            payload: {\n              chapterExists: false\n            }\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: types.GET_CHAPTER,\n        payload: {\n          chapterExists: false\n        }\n      });\n    }\n  });\n};\nexport const getChapters = id => dispatch => {\n  db.collection(\"chapters\").where(\"storyId\", \"==\", id).orderBy(\"number\", \"asc\").onSnapshot(docs => {\n    let arr = [];\n    docs.forEach(doc => {\n      arr.push({\n        authorId: doc.data().authorId,\n        id: doc.id,\n        createdAt: doc.data().createdAt,\n        number: doc.data().number,\n        title: doc.data().title,\n        commentsCount: doc.data().commentsCount\n      });\n    });\n    dispatch({\n      type: types.GET_CHAPTERS,\n      payload: arr\n    });\n  });\n}; // LOCATIONS\n\nexport const addLocation = data => dispatch => {\n  console.log(\"coucou\");\n  dispatch({\n    type: types.ADD_LOCATION,\n    payload: {\n      loadingLoc: true\n    }\n  });\n  const imageName = data.name.toLowerCase().split(\" \").join(\"_\");\n\n  if (typeof data.image === \"object\") {\n    storage.ref(`${auth.currentUser.uid}/${imageName}`).put(data.image).then(() => {\n      return storage.ref(auth.currentUser.uid).child(imageName).getDownloadURL();\n    }).then(url => {\n      return db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n        image: url,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      }));\n    }).then(res => dispatch({\n      type: types.ADD_LOCATION,\n      payload: {\n        message: \"Location added successfully\",\n        locId: res.id,\n        loadingLoc: false\n      }\n    })).catch(err => {\n      message.error(err.message);\n    });\n  } else {\n    db.collection(\"locations\").add(_objectSpread(_objectSpread({}, data), {}, {\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    })).then(res => dispatch({\n      type: types.ADD_LOCATION,\n      payload: {\n        message: \"Location added successfully\",\n        locId: res.id,\n        loadingLoc: false\n      }\n    })).catch(err => {\n      message.error(err.message);\n    });\n  }\n};\nexport const editLocation = data => dispatch => {};\nexport const getLocation = id => dispatch => {\n  db.collection(\"locations\").doc(id).get().then(doc => {\n    if (doc.exists) {\n      dispatch({\n        type: types.GET_LOCATION,\n        payload: _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id\n        }),\n        locationExists: true\n      });\n    } else {\n      dispatch({\n        type: types.GET_LOCATION,\n        locationExists: false\n      });\n    }\n  });\n};\nexport const getUserLocations = () => dispatch => {\n  db.collection(\"locations\").where(\"authorId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let locations = [];\n    docs.forEach(doc => {\n      locations = [...locations, _objectSpread({\n        id: doc.id\n      }, doc.data())];\n    });\n    dispatch({\n      type: types.GET_USER_LOCATIONS,\n      payload: locations\n    });\n  });\n};\nexport const getStoryLocations = storyId => dispatch => {\n  db.collection(\"locations\").where(\"storyId\", \"==\", storyId).get().then(docs => {\n    const locations = docs.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    }));\n    dispatch({\n      type: types.GET_STORY_LOCATIONS,\n      payload: locations\n    });\n  });\n}; // COMMENTS\n\nexport const getComments = id => dispatch => {\n  db.collection(\"comments\").where(\"chapterId\", \"==\", id).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n    let comments = snap.docs.map(comment => _objectSpread(_objectSpread({}, comment.data()), {}, {\n      id: comment.id\n    }));\n    let queries = [];\n    comments.forEach(comm => {\n      queries.push(db.collection(\"users\").doc(comm.userId).get());\n    });\n    Promise.all(queries).then(res => {\n      comments = comments.map(comm => _objectSpread(_objectSpread({}, comm), {}, {\n        userImage: res.find(d => d.id === comm.userId).data().image\n      }));\n      dispatch({\n        type: types.GET_COMMENTS,\n        payload: {\n          loadingComments: false,\n          comments\n        }\n      });\n    });\n  });\n};\nexport const submitComment = info => dispatch => {\n  if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n  if (!info.content) return message.error(\"Content must not be empty\");\n  db.collection(\"comments\").add(_objectSpread(_objectSpread({}, info), {}, {\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  })).then(() => {\n    message.success(\"Comment posted successfully\");\n    db.collection(\"chapters\").doc(info.chapterId).get().then(chap => {\n      db.collection(\"chapters\").doc(info.chapterId).update({\n        commentsCount: chap.data().commentsCount + 1\n      });\n    });\n  }).catch(err => message.error(err.message));\n};\nexport const deleteComment = (id, chapid) => dispatch => {\n  db.collection(\"chapters\").doc(chapid).get().then(chap => {\n    db.collection(\"chapters\").doc(chapid).update({\n      commentsCount: chap.data().commentsCount - 1\n    }).then(() => {\n      db.collection(\"comments\").doc(id).delete();\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/storiesActions.js"],"names":["types","db","auth","storage","firebase","message","Router","getStory","id","dispatch","collection","doc","get","then","exists","main","data","mainCharacters","secondary","secondaryCharacters","mainArr","secondaryArr","mainQuery","map","c","secondaryQuery","mainRes","Promise","all","secondaryRes","result","forEach","docu","type","GET_STORY","storyExists","payload","DISPATCH_ERROR","catch","err","console","log","addStory","ADD_STORY","loading","storyId","imageName","title","toLowerCase","split","join","add","authorId","currentUser","uid","authorName","oneShot","banner","createdAt","firestore","FieldValue","serverTimestamp","likesCount","chaptersCount","featured","note","res","ref","put","child","getDownloadURL","url","storyid","update","success","setTimeout","push","error","editStory","EDIT_STORY","loadingStory","where","docs","locationQuery","storyTitle","deleteStory","DELETE_STORY","batch","delete","chaptersToDelete","likesToDelete","locationsToDelete","chap","like","loc","commit","getUserStories","items","GET_USER_STORIES","getFavoriteStories","favArr","users","user","favUsers","GET_FAVORITE_STORIES","isStoryFavorite","onSnapshot","snapshot","answer","IS_STORY_FAVORITE","loadingFav","addStoryToFavorite","username","emailVerified","sender","senderId","removeStoryFromFavorite","getStoryCharacters","addChapter","chapId","ADD_CHAPTER","commentsCount","voters","votesCount","editChapter","chapid","EDIT_CHAPTER","deleteChapter","DELETE_CHAPTER","loadingChapter","commentsToDelete","chapter","story","charactersFromChapter","characters","charactersFromStory","newArr","includes","times","filter","comm","getChapter","locations","charaQuery","locQuery","charactersInChaper","locationsInChaper","char","l","GET_CHAPTER","public","chapterExists","getChapters","orderBy","arr","number","GET_CHAPTERS","addLocation","ADD_LOCATION","loadingLoc","name","image","locId","editLocation","getLocation","GET_LOCATION","locationExists","getUserLocations","GET_USER_LOCATIONS","getStoryLocations","GET_STORY_LOCATIONS","getComments","snap","comments","comment","queries","userId","userImage","find","d","GET_COMMENTS","loadingComments","submitComment","info","content","chapterId","deleteComment"],"mappings":"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","sourcesContent":["import { types } from \"../../utils/constants\";\r\nimport { db, auth, storage } from \"../fbConfig\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\nimport Router from \"next/router\";\r\n\r\n// STORIES\r\n\r\nexport const getStory = (id) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        const main = doc.data().mainCharacters;\r\n        const secondary = doc.data().secondaryCharacters;\r\n        let mainArr = [];\r\n        let secondaryArr = [];\r\n        const mainQuery = main.map((c) =>\r\n          db.collection(\"characters\").doc(c).get()\r\n        );\r\n        const secondaryQuery = secondary.map((c) =>\r\n          db.collection(\"characters\").doc(c.id).get()\r\n        );\r\n        const mainRes = Promise.all(mainQuery);\r\n        const secondaryRes = Promise.all(secondaryQuery);\r\n        Promise.all([mainRes, secondaryRes]).then((result) => {\r\n          result[0].forEach((docu) => {\r\n            mainArr = [...mainArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          result[1].forEach((docu) => {\r\n            secondaryArr = [...secondaryArr, { ...docu.data(), id: docu.id }];\r\n          });\r\n          dispatch({\r\n            type: types.GET_STORY,\r\n            storyExists: true,\r\n            payload: {\r\n              ...doc.data(),\r\n              id: doc.id,\r\n              secondaryCharacters: secondaryArr,\r\n              mainCharacters: mainArr,\r\n              mainArr: doc.data().mainCharacters,\r\n            },\r\n          });\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.DISPATCH_ERROR,\r\n          storyExists: false,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addStory = (data) => (dispatch) => {\r\n  dispatch({ type: types.ADD_STORY, payload: { loading: true } });\r\n  let storyId = \"\";\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  db.collection(\"stories\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      authorName: data.authorName,\r\n      oneShot: false,\r\n      banner: typeof data.banner === \"string\" ? data.banner : \"\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      likesCount: 0,\r\n      chaptersCount: 0,\r\n      secondaryCharacters: [],\r\n      secondaryArr: [],\r\n      featured: false,\r\n      note: 0,\r\n    })\r\n    .then((res) => {\r\n      storyId = res.id;\r\n      if (typeof data.banner === \"object\") {\r\n        storage\r\n          .ref(`${auth.currentUser.uid}/${imageName}`)\r\n          .put(data.banner)\r\n          .then(() => {\r\n            return storage\r\n              .ref(auth.currentUser.uid)\r\n              .child(imageName)\r\n              .getDownloadURL();\r\n          })\r\n          .then((url) => {\r\n            return db\r\n              .collection(\"stories\")\r\n              .doc(storyid)\r\n              .update({ banner: url });\r\n          })\r\n          .then(() => {\r\n            dispatch({\r\n              type: types.ADD_STORY,\r\n              payload: {\r\n                message: \"Story added successfully\",\r\n                storyId: res.id,\r\n                loading: false,\r\n              },\r\n            });\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.ADD_STORY,\r\n          payload: {\r\n            message: \"Story added successfully\",\r\n            storyId: res.id,\r\n            loading: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"stories\").add({\r\n          ...data,\r\n          authorId: auth.currentUser.uid,\r\n          authorName: data.authorName,\r\n          oneShot: false,\r\n          banner: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          likesCount: 0,\r\n          chaptersCount: 0,\r\n          secondaryCharacters: [],\r\n          secondaryArr: [],\r\n          featured: false,\r\n          note: 0,\r\n        });\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .add({\r\n        ...data,\r\n        authorId: auth.currentUser.uid,\r\n        authorName: data.authorName,\r\n        oneShot: false,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        likesCount: 0,\r\n        chaptersCount: 0,\r\n        featured: false,\r\n        secondaryCharacters: [],\r\n        secondaryArr: [],\r\n        note: 0,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Story added successfully\");\r\n        setTimeout(() => {\r\n          Router.push(`/story/${res.id}`);\r\n          dispatch({\r\n            type: types.ADD_STORY,\r\n            payload: {\r\n              message: \"Story added successfully\",\r\n              storyId: res.id,\r\n              loading: false,\r\n            },\r\n          });\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editStory = (data, storyId) => (dispatch) => {\r\n  dispatch({ type: types.EDIT_STORY, payload: { loadingStory: true } });\r\n  const imageName = data.title.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.banner === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.banner)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db\r\n          .collection(\"stories\")\r\n          .doc(storyId)\r\n          .update({\r\n            ...data,\r\n            banner: url,\r\n          });\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              message.success(\"Story added successfully\");\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"stories\")\r\n      .doc(storyId)\r\n      .update({\r\n        ...data,\r\n      })\r\n      .then(() => {\r\n        db.collection(\"locations\")\r\n          .where(\"storyId\", \"==\", storyId)\r\n          .get()\r\n          .then((docs) => {\r\n            let locationQuery = [];\r\n            docs.forEach((doc) => {\r\n              locationQuery = [\r\n                ...locationQuery,\r\n                db\r\n                  .collection(\"locations\")\r\n                  .doc(doc.id)\r\n                  .update({ storyTitle: data.title }),\r\n              ];\r\n            });\r\n            Promise.all(locationQuery).then(() => {\r\n              message.success(\"Story added successfully\");\r\n              dispatch({\r\n                type: types.EDIT_STORY,\r\n                payload: {\r\n                  message: \"Story edited successfully\",\r\n                },\r\n              });\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteStory = (id) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_STORY, payload: { loading: true } });\r\n  const batch = db.batch();\r\n  batch.delete(db.collection(\"stories\").doc(id));\r\n  const chaptersToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const likesToDelete = db\r\n    .collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  const locationsToDelete = db\r\n    .collection(\"locations\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .get();\r\n  Promise.all([chaptersToDelete, likesToDelete, locationsToDelete]).then(\r\n    (res) => {\r\n      res[0].forEach((chap) => {\r\n        batch.delete(db.collection(\"chapters\").doc(chap.id));\r\n      });\r\n      res[1].forEach((like) => {\r\n        batch.delete(db.collection(\"storiesLikes\").doc(like.id));\r\n      });\r\n      res[2].forEach((loc) => {\r\n        batch.delete(db.collection(\"locations\").doc(loc.id));\r\n      });\r\n      batch.commit().then(() => {\r\n        dispatch({\r\n          type: types.DELETE_STORY,\r\n          payload: {\r\n            message: \"Story deleted successfully\",\r\n          },\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const getUserStories = () => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let items = [];\r\n      docs.forEach((doc) => {\r\n        items = [...items, { id: doc.id, ...doc.data() }];\r\n      });\r\n      return items;\r\n    })\r\n    .then((items) => {\r\n      dispatch({ type: types.GET_USER_STORIES, payload: items });\r\n    });\r\n};\r\n\r\nexport const getFavoriteStories = () => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().storyId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"stories\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_STORIES,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const isStoryFavorite = (storyId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"storiesLikes\")\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .where(\"storyId\", \"==\", storyId)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs[0] ? true : false;\r\n        return dispatch({\r\n          type: types.IS_STORY_FAVORITE,\r\n          payload: answer,\r\n          loadingFav: false,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const addStoryToFavorite = (id, username, storyTitle) => (dispatch) => {\r\n  // if (isFavorite) return message.warning(\"You've already liked this story\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to like a story\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"storiesLikes\")\r\n    .add({\r\n      sender: username,\r\n      senderId: auth.currentUser.uid,\r\n      storyId: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(`${storyTitle} added to your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const removeStoryFromFavorite = (id, storyTitle) => (dispatch) => {\r\n  db.collection(\"storiesLikes\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"storiesLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(`${storyTitle} removed from your favorites`))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const getStoryCharacters = () => (dispatch) => {};\r\n\r\n// CHAPTERs\r\n\r\nexport const addChapter = (data, secondaryCharacters) => (dispatch) => {\r\n  let chapId = \"\";\r\n  dispatch({ type: types.ADD_CHAPTER, payload: { loading: true } });\r\n\r\n  return db\r\n    .collection(\"chapters\")\r\n    .add({\r\n      ...data,\r\n      authorId: auth.currentUser.uid,\r\n      commentsCount: 0,\r\n      note: 0,\r\n      voters: [],\r\n      votesCount: 0,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then((res) => {\r\n      chapId = res.id;\r\n      db.collection(\"stories\")\r\n        .doc(data.storyId)\r\n        .update({\r\n          secondaryCharacters,\r\n          secondaryArr: secondaryCharacters.map((c) => c.id),\r\n        })\r\n        .then(() => {\r\n          dispatch({\r\n            type: types.ADD_CHAPTER,\r\n            payload: {\r\n              message: \"Chapter added successfully\",\r\n              chapId: chapId,\r\n              loading: false,\r\n            },\r\n          });\r\n        });\r\n    });\r\n};\r\n\r\nexport const editChapter = (data, storyId, chapid, secondaryCharacters) => (\r\n  dispatch\r\n) => {\r\n  dispatch({ type: types.EDIT_CHAPTER, payload: { loading: true } });\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .update({ ...data })\r\n    .then(() => {\r\n      db.collection(\"stories\")\r\n        .doc(storyId)\r\n        .get()\r\n        .then((doc) => {\r\n          db.collection(\"stories\")\r\n            .doc(storyId)\r\n            .update({\r\n              secondaryCharacters,\r\n              secondaryArr: secondaryCharacters.map((c) => c.id),\r\n            })\r\n            .then(() => {\r\n              dispatch({\r\n                type: types.EDIT_CHAPTER,\r\n                payload: {\r\n                  message: \"Chapter edited successfully\",\r\n                  loading: false,\r\n                },\r\n              });\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexport const deleteChapter = (id, storyId) => (dispatch) => {\r\n  dispatch({ type: types.DELETE_CHAPTER, payload: { loadingChapter: true } });\r\n  const batch = db.batch();\r\n\r\n  const commentsToDelete = db\r\n    .collection(\"chapters\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .get();\r\n  const chapter = db.collection(\"chapters\").doc(id).get();\r\n  const story = db.collection(\"stories\").doc(storyId).get();\r\n\r\n  Promise.all([chapter, story, commentsToDelete]).then((res) => {\r\n    const charactersFromChapter = res[0].data().characters;\r\n    const charactersFromStory = res[1].data().secondaryCharacters;\r\n    let newArr = charactersFromStory\r\n      .map((c) => {\r\n        if (charactersFromChapter.includes(c.id)) {\r\n          return { ...c, times: c.times - 1 };\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n      .filter((c) => c.times > 0);\r\n    batch.update(db.collection(\"stories\").doc(storyId), {\r\n      secondaryCharacters: newArr,\r\n      secondaryArr: newArr.map((c) => c.id),\r\n    });\r\n    res[2].forEach((comm) =>\r\n      batch.delete(db.collection(\"comments\").doc(comm.id))\r\n    );\r\n    batch.delete(db.collection(\"chapters\").doc(id));\r\n    batch.commit().then(() => {\r\n      dispatch({\r\n        type: types.DELETE_CHAPTER,\r\n        payload: {\r\n          message: \"Chapter deleted successfully\",\r\n          loadingChapter: false,\r\n        },\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const getChapter = (storyId, id, type) => (dispatch) => {\r\n  db.collection(\"stories\")\r\n    .doc(storyId)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        db.collection(\"chapters\")\r\n          .doc(id)\r\n          .get()\r\n          .then((chap) => {\r\n            if (chap.exists) {\r\n              if (type === \"show\") {\r\n                let characters = [];\r\n                let locations = [];\r\n                let charaQuery = [];\r\n                let locQuery = [];\r\n                const charactersInChaper = chap.data().characters;\r\n                const locationsInChaper = chap.data().locations;\r\n                charactersInChaper.forEach((char) => {\r\n                  charaQuery.push(db.collection(\"characters\").doc(char).get());\r\n                });\r\n                locationsInChaper.forEach((loc) => {\r\n                  locQuery.push(db.collection(\"locations\").doc(loc).get());\r\n                });\r\n                charaQuery = Promise.all(charaQuery);\r\n                locQuery = Promise.all(locQuery);\r\n                Promise.all([charaQuery, locQuery]).then((res) => {\r\n                  res[0].forEach((c) => {\r\n                    characters.push({ ...c.data(), id: c.id });\r\n                  });\r\n                  res[1].forEach((l) => {\r\n                    locations.push({ ...l.data(), id: l.id });\r\n                  });\r\n                  dispatch({\r\n                    type: types.GET_CHAPTER,\r\n                    payload: {\r\n                      chapter: {\r\n                        ...chap.data(),\r\n                        id: chap.id,\r\n                        locations,\r\n                        characters,\r\n                        public: doc.data().public,\r\n                        storyTitle: doc.data().title,\r\n                      },\r\n                      chapterExists: true,\r\n                    },\r\n                  });\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: types.GET_CHAPTER,\r\n                  payload: {\r\n                    chapter: {\r\n                      ...chap.data(),\r\n                      id: chap.id,\r\n                      public: doc.data().public,\r\n                    },\r\n                    chapterExists: true,\r\n                  },\r\n                });\r\n              }\r\n            } else {\r\n              dispatch({\r\n                type: types.GET_CHAPTER,\r\n                payload: { chapterExists: false },\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_CHAPTER,\r\n          payload: { chapterExists: false },\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getChapters = (id) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .where(\"storyId\", \"==\", id)\r\n    .orderBy(\"number\", \"asc\")\r\n    .onSnapshot((docs) => {\r\n      let arr = [];\r\n      docs.forEach((doc) => {\r\n        arr.push({\r\n          authorId: doc.data().authorId,\r\n          id: doc.id,\r\n          createdAt: doc.data().createdAt,\r\n          number: doc.data().number,\r\n          title: doc.data().title,\r\n          commentsCount: doc.data().commentsCount,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: types.GET_CHAPTERS,\r\n        payload: arr,\r\n      });\r\n    });\r\n};\r\n\r\n// LOCATIONS\r\n\r\nexport const addLocation = (data) => (dispatch) => {\r\n  console.log(\"coucou\");\r\n  dispatch({ type: types.ADD_LOCATION, payload: { loadingLoc: true } });\r\n\r\n  const imageName = data.name.toLowerCase().split(\" \").join(\"_\");\r\n\r\n  if (typeof data.image === \"object\") {\r\n    storage\r\n      .ref(`${auth.currentUser.uid}/${imageName}`)\r\n      .put(data.image)\r\n      .then(() => {\r\n        return storage\r\n          .ref(auth.currentUser.uid)\r\n          .child(imageName)\r\n          .getDownloadURL();\r\n      })\r\n      .then((url) => {\r\n        return db.collection(\"locations\").add({\r\n          ...data,\r\n          image: url,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n      })\r\n      .then((res) =>\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  } else {\r\n    db.collection(\"locations\")\r\n      .add({\r\n        ...data,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then((res) =>\r\n        dispatch({\r\n          type: types.ADD_LOCATION,\r\n          payload: {\r\n            message: \"Location added successfully\",\r\n            locId: res.id,\r\n            loadingLoc: false,\r\n          },\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        message.error(err.message);\r\n      });\r\n  }\r\n};\r\n\r\nexport const editLocation = (data) => (dispatch) => {};\r\n\r\nexport const getLocation = (id) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .doc(id)\r\n    .get()\r\n    .then((doc) => {\r\n      if (doc.exists) {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          payload: { ...doc.data(), id: doc.id },\r\n          locationExists: true,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: types.GET_LOCATION,\r\n          locationExists: false,\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getUserLocations = () => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let locations = [];\r\n      docs.forEach((doc) => {\r\n        locations = [...locations, { id: doc.id, ...doc.data() }];\r\n      });\r\n      dispatch({\r\n        type: types.GET_USER_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getStoryLocations = (storyId) => (dispatch) => {\r\n  db.collection(\"locations\")\r\n    .where(\"storyId\", \"==\", storyId)\r\n    .get()\r\n    .then((docs) => {\r\n      const locations = docs.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n      dispatch({\r\n        type: types.GET_STORY_LOCATIONS,\r\n        payload: locations,\r\n      });\r\n    });\r\n};\r\n\r\n// COMMENTS\r\n\r\nexport const getComments = (id) => (dispatch) => {\r\n  db.collection(\"comments\")\r\n    .where(\"chapterId\", \"==\", id)\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .onSnapshot((snap) => {\r\n      let comments = snap.docs.map((comment) => ({\r\n        ...comment.data(),\r\n        id: comment.id,\r\n      }));\r\n      let queries = [];\r\n      comments.forEach((comm) => {\r\n        queries.push(db.collection(\"users\").doc(comm.userId).get());\r\n      });\r\n      Promise.all(queries).then((res) => {\r\n        comments = comments.map((comm) => ({\r\n          ...comm,\r\n          userImage: res.find((d) => d.id === comm.userId).data().image,\r\n        }));\r\n        dispatch({\r\n          type: types.GET_COMMENTS,\r\n          payload: {\r\n            loadingComments: false,\r\n            comments,\r\n          },\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const submitComment = (info) => (dispatch) => {\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n  if (!info.content) return message.error(\"Content must not be empty\");\r\n\r\n  db.collection(\"comments\")\r\n    .add({\r\n      ...info,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      message.success(\"Comment posted successfully\");\r\n      db.collection(\"chapters\")\r\n        .doc(info.chapterId)\r\n        .get()\r\n        .then((chap) => {\r\n          db.collection(\"chapters\")\r\n            .doc(info.chapterId)\r\n            .update({ commentsCount: chap.data().commentsCount + 1 });\r\n        });\r\n    })\r\n    .catch((err) => message.error(err.message));\r\n};\r\n\r\nexport const deleteComment = (id, chapid) => (dispatch) => {\r\n  db.collection(\"chapters\")\r\n    .doc(chapid)\r\n    .get()\r\n    .then((chap) => {\r\n      db.collection(\"chapters\")\r\n        .doc(chapid)\r\n        .update({ commentsCount: chap.data().commentsCount - 1 })\r\n        .then(() => {\r\n          db.collection(\"comments\").doc(id).delete();\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}