{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db, auth, storage } from \"../fbConfig\";\nimport { types } from \"../../utils/constants\";\nimport firebase from \"firebase/app\";\nimport { message } from \"antd\";\nexport var log_in = function log_in(email, password) {\n  return function (dispatch) {\n    console.log(email, password);\n    auth.signInWithEmailAndPassword(email, password);\n  };\n};\nexport var getProfile = function getProfile(id) {\n  return function (dispatch) {\n    db.collection(\"users\").doc(id ? id : auth.currentUser.uid).onSnapshot(function (doc) {\n      return dispatch({\n        type: types.GET_PROFILE,\n        payload: _objectSpread({\n          id: doc.id\n        }, doc.data())\n      });\n    });\n  };\n};\nexport var getFavoriteAuthors = function getFavoriteAuthors(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"senderId\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().recipient]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FAVORITE_AUTHORS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getFollowers = function getFollowers(id) {\n  return function (dispatch) {\n    var addedOn;\n    var userId = id ? id : auth.currentUser.uid;\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).get().then(function (docs) {\n      var favArr = [];\n      docs.forEach(function (doc) {\n        addedOn = doc.data().createdAt;\n        favArr = [].concat(_toConsumableArray(favArr), [doc.data().senderId]);\n      });\n      return favArr;\n    }).then(function (users) {\n      var result = users.map(function (user) {\n        return db.collection(\"users\").doc(user).get();\n      });\n      Promise.all(result).then(function (res) {\n        var favUsers = [];\n        res.forEach(function (doc) {\n          return favUsers = [].concat(_toConsumableArray(favUsers), [_objectSpread({\n            addedOn: addedOn,\n            id: doc.id\n          }, doc.data())]);\n        });\n        dispatch({\n          type: types.GET_FOLLOWERS,\n          payload: favUsers\n        });\n      });\n    });\n  };\n};\nexport var getIsFollowing = function getIsFollowing(userId) {\n  return function (dispatch) {\n    if (auth.currentUser) {\n      db.collection(\"usersLikes\").where(\"recipient\", \"==\", userId).where(\"senderId\", \"==\", auth.currentUser.uid).onSnapshot(function (snapshot) {\n        var answer = snapshot.docs.length > 0 ? true : false;\n        return dispatch({\n          type: types.IS_FOLLOWING,\n          payload: answer\n        });\n      });\n    }\n  };\n};\nexport var followUser = function followUser(id, isFavorite, newFollower) {\n  return function (dispatch) {\n    if (isFavorite) return message.warning(\"You are already following this user\");\n    if (!auth.currentUser) return message.error(\"You need to be logged in to follow users\");\n    if (!auth.currentUser.emailVerified) return message.error(\"You need to verify your email first\");\n    db.collection(\"usersLikes\").add({\n      sender: newFollower.username,\n      senderId: newFollower.uid,\n      recipient: id,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      return message.success(\"You are now following this user\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var unfollowUser = function unfollowUser(id, isFavorite) {\n  return function (dispatch) {\n    if (!isFavorite) return message.warning(\"You are not following this user yet\");\n    db.collection(\"usersLikes\").where(\"recipient\", \"==\", id).where(\"senderId\", \"==\", auth.currentUser.uid).get().then(function (data) {\n      return db.collection(\"usersLikes\").doc(data.docs[0].id)[\"delete\"]();\n    }).then(function () {\n      return message.success(\"User successfully unfollowed\");\n    })[\"catch\"](function (err) {\n      return message.error(\"There has been a problem\");\n    });\n  };\n};\nexport var changeProfile = function changeProfile(data, setOpen, username, userImage) {\n  return function (dispatch) {\n    var newPassword = data.newPassword,\n        actualPassword = data.actualPassword,\n        newInfo = _objectWithoutProperties(data, [\"newPassword\", \"actualPassword\"]);\n\n    var imageName = \"\".concat(auth.currentUser.uid, \"_\").concat(newInfo.username); // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\n\n    var userStoriesQuery = db.collection(\"stories\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n    var userChaptersQuery = db.collection(\"chapters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n    var userCharactersQuery = db.collection(\"characters\").where(\"authorId\", \"==\", auth.currentUser.uid).get();\n    var userCommentsQuery = db.collection(\"comments\").where(\"userId\", \"==\", auth.currentUser.uid).get(); // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\n\n    var batchUpdateAll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(queries, url) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all(queries).then(function (res) {\n                  res[0].forEach(function (story) {\n                    db.collection(\"stories\").doc(story.id).update({\n                      userImage: url ? url : newInfo.image,\n                      authorName: data.username\n                    });\n                  });\n                  res[1].forEach(function (chap) {\n                    db.collection(\"chapters\").doc(chap.id).update({\n                      userImage: url ? url : newInfo.image,\n                      authorName: data.username\n                    });\n                  });\n                  res[2].forEach(function (_char) {\n                    db.collection(\"characters\").doc(_char.id).update({\n                      userImage: url ? url : newInfo.image,\n                      authorName: data.username\n                    });\n                  });\n                  res[3].forEach(function (comm) {\n                    db.collection(\"comments\").doc(comm.id).update({\n                      userImage: url ? url : newInfo.image,\n                      authorName: data.username\n                    });\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function batchUpdateAll(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (newPassword) {\n      auth.currentUser.reauthenticateWithCredential(firebase.auth.EmailAuthProvider.credential(auth.currentUser.email, actualPassword)).then(function () {\n        return auth.currentUser.updatePassword(newPassword);\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof newInfo.image === \"object\")) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(newInfo.image).then(function () {\n                  return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).getDownloadURL();\n                }).then( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            console.log(\"mdp changé et image changé\");\n                            db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n                              image: url\n                            }));\n                            _context2.next = 4;\n                            return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery], url);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n                _context3.next = 8;\n                break;\n\n              case 4:\n                console.log(\"mdp changé et image pas changé\");\n                db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo));\n                _context3.next = 8;\n                return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    } else {\n      if (typeof newInfo.image === \"object\") {\n        storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).put(newInfo.image).then(function () {\n          return storage.ref(\"\".concat(auth.currentUser.uid, \"/\").concat(imageName)).getDownloadURL();\n        }).then( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    console.log(\"mdp pas changé et image changé\");\n                    db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread(_objectSpread({}, newInfo), {}, {\n                      image: url\n                    }));\n                    _context4.next = 4;\n                    return batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery], url);\n\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          return function (_x4) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      } else {\n        console.log(\"mdp pas changé et image pas changé\");\n        db.collection(\"users\").doc(auth.currentUser.uid).update(_objectSpread({}, newInfo));\n        batchUpdateAll([userStoriesQuery, userChaptersQuery, userCharactersQuery, userCommentsQuery]);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","storage","types","firebase","message","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","id","collection","doc","currentUser","uid","onSnapshot","type","GET_PROFILE","payload","data","getFavoriteAuthors","addedOn","userId","where","get","then","docs","favArr","forEach","createdAt","recipient","users","result","map","user","Promise","all","res","favUsers","GET_FAVORITE_AUTHORS","getFollowers","senderId","GET_FOLLOWERS","getIsFollowing","snapshot","answer","length","IS_FOLLOWING","followUser","isFavorite","newFollower","warning","error","emailVerified","add","sender","username","firestore","FieldValue","serverTimestamp","success","err","unfollowUser","changeProfile","setOpen","userImage","newPassword","actualPassword","newInfo","imageName","userStoriesQuery","userChaptersQuery","userCharactersQuery","userCommentsQuery","batchUpdateAll","queries","url","story","update","image","authorName","chap","char","comm","reauthenticateWithCredential","EmailAuthProvider","credential","updatePassword","ref","put","getDownloadURL"],"mappings":"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","sourcesContent":["import { db, auth, storage } from \"../fbConfig\";\r\nimport { types } from \"../../utils/constants\";\r\nimport firebase from \"firebase/app\";\r\nimport { message } from \"antd\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = (id) => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(id ? id : auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: types.GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FAVORITE_AUTHORS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFollowers = (id) => (dispatch) => {\r\n  let addedOn;\r\n  const userId = id ? id : auth.currentUser.uid;\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", userId)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        addedOn = doc.data().createdAt;\r\n        favArr = [...favArr, doc.data().senderId];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        let favUsers = [];\r\n        res.forEach(\r\n          (doc) =>\r\n            (favUsers = [...favUsers, { addedOn, id: doc.id, ...doc.data() }])\r\n        );\r\n        dispatch({\r\n          type: types.GET_FOLLOWERS,\r\n          payload: favUsers,\r\n        });\r\n      });\r\n    });\r\n};\r\n\r\nexport const getIsFollowing = (userId) => (dispatch) => {\r\n  if (auth.currentUser) {\r\n    db.collection(\"usersLikes\")\r\n      .where(\"recipient\", \"==\", userId)\r\n      .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n      .onSnapshot((snapshot) => {\r\n        const answer = snapshot.docs.length > 0 ? true : false;\r\n        return dispatch({ type: types.IS_FOLLOWING, payload: answer });\r\n      });\r\n  }\r\n};\r\n\r\nexport const followUser = (id, isFavorite, newFollower) => (dispatch) => {\r\n  if (isFavorite) return message.warning(\"You are already following this user\");\r\n  if (!auth.currentUser)\r\n    return message.error(\"You need to be logged in to follow users\");\r\n  if (!auth.currentUser.emailVerified)\r\n    return message.error(\"You need to verify your email first\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .add({\r\n      sender: newFollower.username,\r\n      senderId: newFollower.uid,\r\n      recipient: id,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => message.success(\"You are now following this user\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const unfollowUser = (id, isFavorite) => (dispatch) => {\r\n  if (!isFavorite)\r\n    return message.warning(\"You are not following this user yet\");\r\n\r\n  db.collection(\"usersLikes\")\r\n    .where(\"recipient\", \"==\", id)\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((data) => {\r\n      return db.collection(\"usersLikes\").doc(data.docs[0].id).delete();\r\n    })\r\n    .then(() => message.success(\"User successfully unfollowed\"))\r\n    .catch((err) => message.error(\"There has been a problem\"));\r\n};\r\n\r\nexport const changeProfile = (data, setOpen, username, userImage) => (\r\n  dispatch\r\n) => {\r\n  const { newPassword, actualPassword, ...newInfo } = data;\r\n  const imageName = `${auth.currentUser.uid}_${newInfo.username}`;\r\n\r\n  // STORIES, CHAPTERS, CHARACTERS & COMMENTS QUERIES\r\n  const userStoriesQuery = db\r\n    .collection(\"stories\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userChaptersQuery = db\r\n    .collection(\"chapters\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userCharactersQuery = db\r\n    .collection(\"characters\")\r\n    .where(\"authorId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n  const userCommentsQuery = db\r\n    .collection(\"comments\")\r\n    .where(\"userId\", \"==\", auth.currentUser.uid)\r\n    .get();\r\n\r\n  // FUNCTION TO ACTUALLY UPDATE ALL AFFECTED FILES\r\n  const batchUpdateAll = async (queries, url) => {\r\n    await Promise.all(queries).then((res) => {\r\n      res[0].forEach((story) => {\r\n        db.collection(\"stories\")\r\n          .doc(story.id)\r\n          .update({\r\n            userImage: url ? url : newInfo.image,\r\n            authorName: data.username,\r\n          });\r\n      });\r\n      res[1].forEach((chap) => {\r\n        db.collection(\"chapters\")\r\n          .doc(chap.id)\r\n          .update({\r\n            userImage: url ? url : newInfo.image,\r\n            authorName: data.username,\r\n          });\r\n      });\r\n      res[2].forEach((char) => {\r\n        db.collection(\"characters\")\r\n          .doc(char.id)\r\n          .update({\r\n            userImage: url ? url : newInfo.image,\r\n            authorName: data.username,\r\n          });\r\n      });\r\n      res[3].forEach((comm) => {\r\n        db.collection(\"comments\")\r\n          .doc(comm.id)\r\n          .update({\r\n            userImage: url ? url : newInfo.image,\r\n            authorName: data.username,\r\n          });\r\n      });\r\n    });\r\n  };\r\n\r\n  if (newPassword) {\r\n    auth.currentUser\r\n      .reauthenticateWithCredential(\r\n        firebase.auth.EmailAuthProvider.credential(\r\n          auth.currentUser.email,\r\n          actualPassword\r\n        )\r\n      )\r\n      .then(() => {\r\n        return auth.currentUser.updatePassword(newPassword);\r\n      })\r\n      .then(async () => {\r\n        if (typeof newInfo.image === \"object\") {\r\n          storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .put(newInfo.image)\r\n            .then(() => {\r\n              return storage\r\n                .ref(`${auth.currentUser.uid}/${imageName}`)\r\n                .getDownloadURL();\r\n            })\r\n            .then(async (url) => {\r\n              console.log(\"mdp changé et image changé\");\r\n              db.collection(\"users\")\r\n                .doc(auth.currentUser.uid)\r\n                .update({\r\n                  ...newInfo,\r\n                  image: url,\r\n                });\r\n              await batchUpdateAll(\r\n                [\r\n                  userStoriesQuery,\r\n                  userChaptersQuery,\r\n                  userCharactersQuery,\r\n                  userCommentsQuery,\r\n                ],\r\n                url\r\n              );\r\n            });\r\n        } else {\r\n          console.log(\"mdp changé et image pas changé\");\r\n          db.collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n            });\r\n          await batchUpdateAll([\r\n            userStoriesQuery,\r\n            userChaptersQuery,\r\n            userCharactersQuery,\r\n            userCommentsQuery,\r\n          ]);\r\n        }\r\n      });\r\n  } else {\r\n    if (typeof newInfo.image === \"object\") {\r\n      storage\r\n        .ref(`${auth.currentUser.uid}/${imageName}`)\r\n        .put(newInfo.image)\r\n        .then(() => {\r\n          return storage\r\n            .ref(`${auth.currentUser.uid}/${imageName}`)\r\n            .getDownloadURL();\r\n        })\r\n        .then(async (url) => {\r\n          console.log(\"mdp pas changé et image changé\");\r\n          db.collection(\"users\")\r\n            .doc(auth.currentUser.uid)\r\n            .update({\r\n              ...newInfo,\r\n              image: url,\r\n            });\r\n          await batchUpdateAll(\r\n            [\r\n              userStoriesQuery,\r\n              userChaptersQuery,\r\n              userCharactersQuery,\r\n              userCommentsQuery,\r\n            ],\r\n            url\r\n          );\r\n        });\r\n    } else {\r\n      console.log(\"mdp pas changé et image pas changé\");\r\n      db.collection(\"users\")\r\n        .doc(auth.currentUser.uid)\r\n        .update({\r\n          ...newInfo,\r\n        });\r\n      batchUpdateAll([\r\n        userStoriesQuery,\r\n        userChaptersQuery,\r\n        userCharactersQuery,\r\n        userCommentsQuery,\r\n      ]);\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}