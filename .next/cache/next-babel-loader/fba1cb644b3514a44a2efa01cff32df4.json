{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, auth } from \"../fbConfig\";\nimport { GET_PROFILE, GET_FAVORITE_AUTHORS } from \"../../utils/constants\";\nexport const log_in = (email, password) => dispatch => {\n  console.log(email, password);\n  auth.signInWithEmailAndPassword(email, password);\n};\nexport const getProfile = () => dispatch => {\n  db.collection(\"users\").doc(auth.currentUser.uid).onSnapshot(doc => {\n    return dispatch({\n      type: GET_PROFILE,\n      payload: _objectSpread({\n        id: doc.id\n      }, doc.data())\n    });\n  });\n};\nexport const getFavoriteAuthors = () => dispatch => {\n  let favUser = [];\n  db.collection(\"usersLikes\").where(\"senderId\", \"==\", auth.currentUser.uid).get().then(docs => {\n    let favArr = [];\n    docs.forEach(doc => {\n      favArr = [...favArr, doc.data().recipient];\n    });\n    return favArr;\n  }).then(users => {\n    const result = users.map(user => db.collection(\"users\").doc(user).get());\n    Promise.all(result).then(res => {\n      res.forEach(doc => favUsers = [...favUsers, _objectSpread({\n        id: doc.id\n      }, doc.data())]);\n    });\n    return favUser;\n  }).then(result => console.log(result));\n};","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/redux/actions/userActions.js"],"names":["db","auth","GET_PROFILE","GET_FAVORITE_AUTHORS","log_in","email","password","dispatch","console","log","signInWithEmailAndPassword","getProfile","collection","doc","currentUser","uid","onSnapshot","type","payload","id","data","getFavoriteAuthors","favUser","where","get","then","docs","favArr","forEach","recipient","users","result","map","user","Promise","all","res","favUsers"],"mappings":";;;;;;AAAA,SAASA,EAAT,EAAaC,IAAb,QAAyB,aAAzB;AAEA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,uBAAlD;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,QAAnB;AACAL,EAAAA,IAAI,CAACS,0BAAL,CAAgCL,KAAhC,EAAuCC,QAAvC;AACD,CAHM;AAKP,OAAO,MAAMK,UAAU,GAAG,MAAOJ,QAAD,IAAc;AAC5CP,EAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EACGC,GADH,CACOZ,IAAI,CAACa,WAAL,CAAiBC,GADxB,EAEGC,UAFH,CAEeH,GAAD,IAAS;AACnB,WAAON,QAAQ,CAAC;AACdU,MAAAA,IAAI,EAAEf,WADQ;AAEdgB,MAAAA,OAAO;AAAIC,QAAAA,EAAE,EAAEN,GAAG,CAACM;AAAZ,SAAmBN,GAAG,CAACO,IAAJ,EAAnB;AAFO,KAAD,CAAf;AAID,GAPH;AAQD,CATM;AAWP,OAAO,MAAMC,kBAAkB,GAAG,MAAOd,QAAD,IAAc;AACpD,MAAIe,OAAO,GAAG,EAAd;AACAtB,EAAAA,EAAE,CAACY,UAAH,CAAc,YAAd,EACGW,KADH,CACS,UADT,EACqB,IADrB,EAC2BtB,IAAI,CAACa,WAAL,CAAiBC,GAD5C,EAEGS,GAFH,GAGGC,IAHH,CAGSC,IAAD,IAAU;AACd,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAcf,GAAD,IAAS;AACpBc,MAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYd,GAAG,CAACO,IAAJ,GAAWS,SAAvB,CAAT;AACD,KAFD;AAGA,WAAOF,MAAP;AACD,GATH,EAUGF,IAVH,CAUSK,KAAD,IAAW;AACf,UAAMC,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IACvBjC,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BoB,IAA3B,EAAiCT,GAAjC,EADa,CAAf;AAGAU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBN,IAApB,CAA0BW,GAAD,IAAS;AAChCA,MAAAA,GAAG,CAACR,OAAJ,CACGf,GAAD,IAAUwB,QAAQ,GAAG,CAAC,GAAGA,QAAJ;AAAgBlB,QAAAA,EAAE,EAAEN,GAAG,CAACM;AAAxB,SAA+BN,GAAG,CAACO,IAAJ,EAA/B,EADvB;AAGD,KAJD;AAKA,WAAOE,OAAP;AACD,GApBH,EAqBGG,IArBH,CAqBSM,MAAD,IAAYvB,OAAO,CAACC,GAAR,CAAYsB,MAAZ,CArBpB;AAsBD,CAxBM","sourcesContent":["import { db, auth } from \"../fbConfig\";\r\n\r\nimport { GET_PROFILE, GET_FAVORITE_AUTHORS } from \"../../utils/constants\";\r\n\r\nexport const log_in = (email, password) => (dispatch) => {\r\n  console.log(email, password);\r\n  auth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const getProfile = () => (dispatch) => {\r\n  db.collection(\"users\")\r\n    .doc(auth.currentUser.uid)\r\n    .onSnapshot((doc) => {\r\n      return dispatch({\r\n        type: GET_PROFILE,\r\n        payload: { id: doc.id, ...doc.data() },\r\n      });\r\n    });\r\n};\r\n\r\nexport const getFavoriteAuthors = () => (dispatch) => {\r\n  let favUser = [];\r\n  db.collection(\"usersLikes\")\r\n    .where(\"senderId\", \"==\", auth.currentUser.uid)\r\n    .get()\r\n    .then((docs) => {\r\n      let favArr = [];\r\n      docs.forEach((doc) => {\r\n        favArr = [...favArr, doc.data().recipient];\r\n      });\r\n      return favArr;\r\n    })\r\n    .then((users) => {\r\n      const result = users.map((user) =>\r\n        db.collection(\"users\").doc(user).get()\r\n      );\r\n      Promise.all(result).then((res) => {\r\n        res.forEach(\r\n          (doc) => (favUsers = [...favUsers, { id: doc.id, ...doc.data() }])\r\n        );\r\n      });\r\n      return favUser;\r\n    })\r\n    .then((result) => console.log(result));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}