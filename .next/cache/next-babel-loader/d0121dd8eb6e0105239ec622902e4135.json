{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Documents\\\\CODE\\\\kronikea-master\\\\hooks\\\\notificationsHooks.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { auth, db } from \"../redux/fbConfig\";\nconst notificationContext = /*#__PURE__*/createContext();\nexport function ProvideNotification({\n  children\n}) {\n  const notifications = useProvideNotification();\n  return __jsx(notificationContext.Provider, {\n    value: notifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport const useNotifcations = () => {\n  return useContext(notificationContext);\n};\n\nfunction useProvideNotification() {\n  const {\n    0: notifications,\n    1: setNotifications\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  useEffect(() => {\n    const unsubscribe = () => {\n      if (auth.currentUser) {\n        console.log(\"coucou\");\n        db.collection(\"notifications\").where(\"recipient\", \"==\", auth.currentUser.uid).onSnapshot(async docs => {\n          setNotifications(docs.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          })).sort((a, b) => {\n            a = typeof a.createdAt !== \"object\" ? new Date(a.createdAt) : new Date(a.createdAt.seconds);\n            b = typeof b.createdAt !== \"object\" ? new Date(b.createdAt) : new Date(b.createdAt.seconds);\n            return b > a ? -1 : b < a ? 1 : 0;\n          }));\n          const getUsers = await db.collection(\"users\").get();\n          const users = await getUsers.docs.map(u => _objectSpread(_objectSpread({}, u.data()), {}, {\n            id: u.id\n          }));\n          setNotifications(notifications.map(notif => _objectSpread(_objectSpread({}, notif), {}, {\n            user: users.find(u => u.id === notif.sender)\n          })));\n        });\n        setIsLoading(false);\n      }\n    }; // Cleanup subscription on unmount\n\n\n    return () => unsubscribe();\n  }, [auth]);\n  return {\n    isLoading,\n    notifications\n  };\n}","map":{"version":3,"sources":["C:/Users/Utilisateur/Documents/CODE/kronikea-master/hooks/notificationsHooks.js"],"names":["React","useState","useEffect","useContext","createContext","auth","db","notificationContext","ProvideNotification","children","notifications","useProvideNotification","useNotifcations","setNotifications","isLoading","setIsLoading","unsubscribe","currentUser","console","log","collection","where","uid","onSnapshot","docs","map","doc","data","id","sort","a","b","createdAt","Date","seconds","getUsers","get","users","u","notif","user","find","sender"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,mBAAzB;AAEA,MAAMC,mBAAmB,gBAAGH,aAAa,EAAzC;AAEA,OAAO,SAASI,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AAChD,QAAMC,aAAa,GAAGC,sBAAsB,EAA5C;AACA,SACE,MAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAED,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF;AAKD;AAED,OAAO,MAAMG,eAAe,GAAG,MAAM;AACnC,SAAOT,UAAU,CAACI,mBAAD,CAAjB;AACD,CAFM;;AAIP,SAASI,sBAAT,GAAkC;AAChC,QAAM;AAAA,OAACD,aAAD;AAAA,OAAgBG;AAAhB,MAAoCZ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,WAAW,GAAG,MAAM;AACxB,UAAIX,IAAI,CAACY,WAAT,EAAsB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAb,QAAAA,EAAE,CAACc,UAAH,CAAc,eAAd,EACGC,KADH,CACS,WADT,EACsB,IADtB,EAC4BhB,IAAI,CAACY,WAAL,CAAiBK,GAD7C,EAEGC,UAFH,CAEc,MAAOC,IAAP,IAAgB;AAC1BX,UAAAA,gBAAgB,CACdW,IAAI,CAACA,IAAL,CACGC,GADH,CACQC,GAAD,oCAAeA,GAAG,CAACC,IAAJ,EAAf;AAA2BC,YAAAA,EAAE,EAAEF,GAAG,CAACE;AAAnC,YADP,EAEGC,IAFH,CAEQ,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACdD,YAAAA,CAAC,GACC,OAAOA,CAAC,CAACE,SAAT,KAAuB,QAAvB,GACI,IAAIC,IAAJ,CAASH,CAAC,CAACE,SAAX,CADJ,GAEI,IAAIC,IAAJ,CAASH,CAAC,CAACE,SAAF,CAAYE,OAArB,CAHN;AAIAH,YAAAA,CAAC,GACC,OAAOA,CAAC,CAACC,SAAT,KAAuB,QAAvB,GACI,IAAIC,IAAJ,CAASF,CAAC,CAACC,SAAX,CADJ,GAEI,IAAIC,IAAJ,CAASF,CAAC,CAACC,SAAF,CAAYE,OAArB,CAHN;AAKA,mBAAOH,CAAC,GAAGD,CAAJ,GAAQ,CAAC,CAAT,GAAaC,CAAC,GAAGD,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,WAbH,CADc,CAAhB;AAiBA,gBAAMK,QAAQ,GAAG,MAAM7B,EAAE,CAACc,UAAH,CAAc,OAAd,EAAuBgB,GAAvB,EAAvB;AACA,gBAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACX,IAAT,CAAcC,GAAd,CAAmBa,CAAD,oCACjCA,CAAC,CAACX,IAAF,EADiC;AAEpCC,YAAAA,EAAE,EAAEU,CAAC,CAACV;AAF8B,YAAlB,CAApB;AAIAf,UAAAA,gBAAgB,CACdH,aAAa,CAACe,GAAd,CAAmBc,KAAD,oCACbA,KADa;AAEhBC,YAAAA,IAAI,EAAEH,KAAK,CAACI,IAAN,CAAYH,CAAD,IAAOA,CAAC,CAACV,EAAF,KAASW,KAAK,CAACG,MAAjC;AAFU,YAAlB,CADc,CAAhB;AAMD,SA/BH;AAgCA3B,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KArCD,CADc,CAwCd;;;AACA,WAAO,MAAMC,WAAW,EAAxB;AACD,GA1CQ,EA0CN,CAACX,IAAD,CA1CM,CAAT;AA4CA,SAAO;AACLS,IAAAA,SADK;AAELJ,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { auth, db } from \"../redux/fbConfig\";\r\n\r\nconst notificationContext = createContext();\r\n\r\nexport function ProvideNotification({ children }) {\r\n  const notifications = useProvideNotification();\r\n  return (\r\n    <notificationContext.Provider value={notifications}>\r\n      {children}\r\n    </notificationContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useNotifcations = () => {\r\n  return useContext(notificationContext);\r\n};\r\n\r\nfunction useProvideNotification() {\r\n  const [notifications, setNotifications] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = () => {\r\n      if (auth.currentUser) {\r\n        console.log(\"coucou\");\r\n        db.collection(\"notifications\")\r\n          .where(\"recipient\", \"==\", auth.currentUser.uid)\r\n          .onSnapshot(async (docs) => {\r\n            setNotifications(\r\n              docs.docs\r\n                .map((doc) => ({ ...doc.data(), id: doc.id }))\r\n                .sort((a, b) => {\r\n                  a =\r\n                    typeof a.createdAt !== \"object\"\r\n                      ? new Date(a.createdAt)\r\n                      : new Date(a.createdAt.seconds);\r\n                  b =\r\n                    typeof b.createdAt !== \"object\"\r\n                      ? new Date(b.createdAt)\r\n                      : new Date(b.createdAt.seconds);\r\n\r\n                  return b > a ? -1 : b < a ? 1 : 0;\r\n                })\r\n            );\r\n\r\n            const getUsers = await db.collection(\"users\").get();\r\n            const users = await getUsers.docs.map((u) => ({\r\n              ...u.data(),\r\n              id: u.id,\r\n            }));\r\n            setNotifications(\r\n              notifications.map((notif) => ({\r\n                ...notif,\r\n                user: users.find((u) => u.id === notif.sender),\r\n              }))\r\n            );\r\n          });\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, [auth]);\r\n\r\n  return {\r\n    isLoading,\r\n    notifications,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}